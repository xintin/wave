WARNING 10-01 18:38:27 [schedule.py:192] Not enough iterations to pipeline the loop. Skipping pipelining.
[INFO] Running GEMM benchmarks for backend wave
[INFO] Generated 1 GEMM configs for backend wave.
sched type: SchedulingType.PREFETCH

region_1 [root]:

graph():
    %a :  [num_users=1] = placeholder[target=a]
    %b :  [num_users=1] = placeholder[target=b]
    %c :  [num_users=64] = placeholder[target=c]
    %register_M:0_N:0_K:0 :  [num_users=1] = [register](args = ((M, N), f32, 0.0), kwargs = {})
    %register_M:0_N:1_K:0 :  [num_users=1] = [register](args = ((M, N), f32, 0.0), kwargs = {})
    %register_M:0_N:2_K:0 :  [num_users=1] = [register](args = ((M, N), f32, 0.0), kwargs = {})
    %register_M:0_N:3_K:0 :  [num_users=1] = [register](args = ((M, N), f32, 0.0), kwargs = {})
    %register_M:0_N:4_K:0 :  [num_users=1] = [register](args = ((M, N), f32, 0.0), kwargs = {})
    %register_M:0_N:5_K:0 :  [num_users=1] = [register](args = ((M, N), f32, 0.0), kwargs = {})
    %register_M:0_N:6_K:0 :  [num_users=1] = [register](args = ((M, N), f32, 0.0), kwargs = {})
    %register_M:0_N:7_K:0 :  [num_users=1] = [register](args = ((M, N), f32, 0.0), kwargs = {})
    %register_M:1_N:0_K:0 :  [num_users=1] = [register](args = ((M, N), f32, 0.0), kwargs = {})
    %register_M:1_N:1_K:0 :  [num_users=1] = [register](args = ((M, N), f32, 0.0), kwargs = {})
    %register_M:1_N:2_K:0 :  [num_users=1] = [register](args = ((M, N), f32, 0.0), kwargs = {})
    %register_M:1_N:3_K:0 :  [num_users=1] = [register](args = ((M, N), f32, 0.0), kwargs = {})
    %register_M:1_N:4_K:0 :  [num_users=1] = [register](args = ((M, N), f32, 0.0), kwargs = {})
    %register_M:1_N:5_K:0 :  [num_users=1] = [register](args = ((M, N), f32, 0.0), kwargs = {})
    %register_M:1_N:6_K:0 :  [num_users=1] = [register](args = ((M, N), f32, 0.0), kwargs = {})
    %register_M:1_N:7_K:0 :  [num_users=1] = [register](args = ((M, N), f32, 0.0), kwargs = {})
    %allocate_1 : [num_users=36] = [allocate](args = ((N, K), (BLOCK_N, BLOCK_K + 4), f16, $SHARED_ADDRESS_SPACE, 4, None, None, 0), kwargs = {})
    %allocate : [num_users=10] = [allocate](args = ((M, K), (BLOCK_M, BLOCK_K + 4), f16, $SHARED_ADDRESS_SPACE, 4, None, None, 0), kwargs = {})
    %shared_memory_barrier : [num_users=0] = [shared_memory_barrier](args = (False,), kwargs = {})
    %iterate :  [num_users=16] = [iterate](args = (K, [%register_M:0_N:0_K:0, %register_M:0_N:1_K:0, %register_M:0_N:2_K:0, %register_M:0_N:3_K:0, %register_M:0_N:4_K:0, %register_M:0_N:5_K:0, %register_M:0_N:6_K:0, %register_M:0_N:7_K:0, %register_M:1_N:0_K:0, %register_M:1_N:1_K:0, %register_M:1_N:2_K:0, %register_M:1_N:3_K:0, %register_M:1_N:4_K:0, %register_M:1_N:5_K:0, %register_M:1_N:6_K:0, %register_M:1_N:7_K:0], region_0, [%a, %b], 1, None, None), kwargs = {})
    %get_result_M:0_N:0_K:0 :  [num_users=4] = [get_result](args = (%iterate, 0), kwargs = {})
    %get_result_M:0_N:1_K:0 :  [num_users=4] = [get_result](args = (%iterate, 1), kwargs = {})
    %get_result_M:0_N:2_K:0 :  [num_users=4] = [get_result](args = (%iterate, 2), kwargs = {})
    %get_result_M:0_N:3_K:0 :  [num_users=4] = [get_result](args = (%iterate, 3), kwargs = {})
    %get_result_M:0_N:4_K:0 :  [num_users=4] = [get_result](args = (%iterate, 4), kwargs = {})
    %get_result_M:0_N:5_K:0 :  [num_users=4] = [get_result](args = (%iterate, 5), kwargs = {})
    %get_result_M:0_N:6_K:0 :  [num_users=4] = [get_result](args = (%iterate, 6), kwargs = {})
    %get_result_M:0_N:7_K:0 :  [num_users=4] = [get_result](args = (%iterate, 7), kwargs = {})
    %get_result_M:1_N:0_K:0 :  [num_users=4] = [get_result](args = (%iterate, 8), kwargs = {})
    %get_result_M:1_N:1_K:0 :  [num_users=4] = [get_result](args = (%iterate, 9), kwargs = {})
    %get_result_M:1_N:2_K:0 :  [num_users=4] = [get_result](args = (%iterate, 10), kwargs = {})
    %get_result_M:1_N:3_K:0 :  [num_users=4] = [get_result](args = (%iterate, 11), kwargs = {})
    %get_result_M:1_N:4_K:0 :  [num_users=4] = [get_result](args = (%iterate, 12), kwargs = {})
    %get_result_M:1_N:5_K:0 :  [num_users=4] = [get_result](args = (%iterate, 13), kwargs = {})
    %get_result_M:1_N:6_K:0 :  [num_users=4] = [get_result](args = (%iterate, 14), kwargs = {})
    %get_result_M:1_N:7_K:0 :  [num_users=4] = [get_result](args = (%iterate, 15), kwargs = {})
    %extract_slice : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:0_K:0, [0], [1], [1]), kwargs = {})
    %write_17 :  [num_users=0] = [write](args = (%extract_slice, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_1 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:0_K:0, [1], [1], [1]), kwargs = {})
    %write_18 :  [num_users=0] = [write](args = (%extract_slice_1, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_2 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:0_K:0, [2], [1], [1]), kwargs = {})
    %write_19 :  [num_users=0] = [write](args = (%extract_slice_2, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_3 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:0_K:0, [3], [1], [1]), kwargs = {})
    %write_20 :  [num_users=0] = [write](args = (%extract_slice_3, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_4 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:1_K:0, [0], [1], [1]), kwargs = {})
    %write_21 :  [num_users=0] = [write](args = (%extract_slice_4, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_5 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:1_K:0, [1], [1], [1]), kwargs = {})
    %write_22 :  [num_users=0] = [write](args = (%extract_slice_5, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_6 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:1_K:0, [2], [1], [1]), kwargs = {})
    %write_23 :  [num_users=0] = [write](args = (%extract_slice_6, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_7 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:1_K:0, [3], [1], [1]), kwargs = {})
    %write_24 :  [num_users=0] = [write](args = (%extract_slice_7, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_8 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:2_K:0, [0], [1], [1]), kwargs = {})
    %write_25 :  [num_users=0] = [write](args = (%extract_slice_8, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_9 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:2_K:0, [1], [1], [1]), kwargs = {})
    %write_26 :  [num_users=0] = [write](args = (%extract_slice_9, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_10 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:2_K:0, [2], [1], [1]), kwargs = {})
    %write_27 :  [num_users=0] = [write](args = (%extract_slice_10, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_11 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:2_K:0, [3], [1], [1]), kwargs = {})
    %write_28 :  [num_users=0] = [write](args = (%extract_slice_11, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_12 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:3_K:0, [0], [1], [1]), kwargs = {})
    %write_29 :  [num_users=0] = [write](args = (%extract_slice_12, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_13 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:3_K:0, [1], [1], [1]), kwargs = {})
    %write_30 :  [num_users=0] = [write](args = (%extract_slice_13, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_14 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:3_K:0, [2], [1], [1]), kwargs = {})
    %write_31 :  [num_users=0] = [write](args = (%extract_slice_14, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_15 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:3_K:0, [3], [1], [1]), kwargs = {})
    %write_32 :  [num_users=0] = [write](args = (%extract_slice_15, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_16 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:4_K:0, [0], [1], [1]), kwargs = {})
    %write_33 :  [num_users=0] = [write](args = (%extract_slice_16, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_17 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:4_K:0, [1], [1], [1]), kwargs = {})
    %write_34 :  [num_users=0] = [write](args = (%extract_slice_17, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_18 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:4_K:0, [2], [1], [1]), kwargs = {})
    %write_35 :  [num_users=0] = [write](args = (%extract_slice_18, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_19 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:4_K:0, [3], [1], [1]), kwargs = {})
    %write_36 :  [num_users=0] = [write](args = (%extract_slice_19, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_20 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:5_K:0, [0], [1], [1]), kwargs = {})
    %write_37 :  [num_users=0] = [write](args = (%extract_slice_20, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_21 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:5_K:0, [1], [1], [1]), kwargs = {})
    %write_38 :  [num_users=0] = [write](args = (%extract_slice_21, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_22 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:5_K:0, [2], [1], [1]), kwargs = {})
    %write_39 :  [num_users=0] = [write](args = (%extract_slice_22, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_23 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:5_K:0, [3], [1], [1]), kwargs = {})
    %write_40 :  [num_users=0] = [write](args = (%extract_slice_23, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_24 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:6_K:0, [0], [1], [1]), kwargs = {})
    %write_41 :  [num_users=0] = [write](args = (%extract_slice_24, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_25 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:6_K:0, [1], [1], [1]), kwargs = {})
    %write_42 :  [num_users=0] = [write](args = (%extract_slice_25, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_26 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:6_K:0, [2], [1], [1]), kwargs = {})
    %write_43 :  [num_users=0] = [write](args = (%extract_slice_26, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_27 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:6_K:0, [3], [1], [1]), kwargs = {})
    %write_44 :  [num_users=0] = [write](args = (%extract_slice_27, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_28 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:7_K:0, [0], [1], [1]), kwargs = {})
    %write_45 :  [num_users=0] = [write](args = (%extract_slice_28, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_29 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:7_K:0, [1], [1], [1]), kwargs = {})
    %write_46 :  [num_users=0] = [write](args = (%extract_slice_29, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_30 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:7_K:0, [2], [1], [1]), kwargs = {})
    %write_47 :  [num_users=0] = [write](args = (%extract_slice_30, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_31 : [num_users=1] = [extract_slice](args = (%get_result_M:0_N:7_K:0, [3], [1], [1]), kwargs = {})
    %write_48 :  [num_users=0] = [write](args = (%extract_slice_31, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_32 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:0_K:0, [0], [1], [1]), kwargs = {})
    %write_49 :  [num_users=0] = [write](args = (%extract_slice_32, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_33 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:0_K:0, [1], [1], [1]), kwargs = {})
    %write_50 :  [num_users=0] = [write](args = (%extract_slice_33, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_34 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:0_K:0, [2], [1], [1]), kwargs = {})
    %write_51 :  [num_users=0] = [write](args = (%extract_slice_34, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_35 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:0_K:0, [3], [1], [1]), kwargs = {})
    %write_52 :  [num_users=0] = [write](args = (%extract_slice_35, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_36 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:1_K:0, [0], [1], [1]), kwargs = {})
    %write_53 :  [num_users=0] = [write](args = (%extract_slice_36, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_37 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:1_K:0, [1], [1], [1]), kwargs = {})
    %write_54 :  [num_users=0] = [write](args = (%extract_slice_37, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_38 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:1_K:0, [2], [1], [1]), kwargs = {})
    %write_55 :  [num_users=0] = [write](args = (%extract_slice_38, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_39 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:1_K:0, [3], [1], [1]), kwargs = {})
    %write_56 :  [num_users=0] = [write](args = (%extract_slice_39, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_40 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:2_K:0, [0], [1], [1]), kwargs = {})
    %write_57 :  [num_users=0] = [write](args = (%extract_slice_40, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_41 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:2_K:0, [1], [1], [1]), kwargs = {})
    %write_58 :  [num_users=0] = [write](args = (%extract_slice_41, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_42 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:2_K:0, [2], [1], [1]), kwargs = {})
    %write_59 :  [num_users=0] = [write](args = (%extract_slice_42, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_43 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:2_K:0, [3], [1], [1]), kwargs = {})
    %write_60 :  [num_users=0] = [write](args = (%extract_slice_43, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_44 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:3_K:0, [0], [1], [1]), kwargs = {})
    %write_61 :  [num_users=0] = [write](args = (%extract_slice_44, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_45 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:3_K:0, [1], [1], [1]), kwargs = {})
    %write_62 :  [num_users=0] = [write](args = (%extract_slice_45, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_46 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:3_K:0, [2], [1], [1]), kwargs = {})
    %write_63 :  [num_users=0] = [write](args = (%extract_slice_46, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_47 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:3_K:0, [3], [1], [1]), kwargs = {})
    %write_64 :  [num_users=0] = [write](args = (%extract_slice_47, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_48 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:4_K:0, [0], [1], [1]), kwargs = {})
    %write_65 :  [num_users=0] = [write](args = (%extract_slice_48, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_49 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:4_K:0, [1], [1], [1]), kwargs = {})
    %write_66 :  [num_users=0] = [write](args = (%extract_slice_49, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_50 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:4_K:0, [2], [1], [1]), kwargs = {})
    %write_67 :  [num_users=0] = [write](args = (%extract_slice_50, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_51 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:4_K:0, [3], [1], [1]), kwargs = {})
    %write_68 :  [num_users=0] = [write](args = (%extract_slice_51, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_52 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:5_K:0, [0], [1], [1]), kwargs = {})
    %write_69 :  [num_users=0] = [write](args = (%extract_slice_52, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_53 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:5_K:0, [1], [1], [1]), kwargs = {})
    %write_70 :  [num_users=0] = [write](args = (%extract_slice_53, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_54 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:5_K:0, [2], [1], [1]), kwargs = {})
    %write_71 :  [num_users=0] = [write](args = (%extract_slice_54, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_55 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:5_K:0, [3], [1], [1]), kwargs = {})
    %write_72 :  [num_users=0] = [write](args = (%extract_slice_55, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_56 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:6_K:0, [0], [1], [1]), kwargs = {})
    %write_73 :  [num_users=0] = [write](args = (%extract_slice_56, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_57 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:6_K:0, [1], [1], [1]), kwargs = {})
    %write_74 :  [num_users=0] = [write](args = (%extract_slice_57, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_58 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:6_K:0, [2], [1], [1]), kwargs = {})
    %write_75 :  [num_users=0] = [write](args = (%extract_slice_58, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_59 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:6_K:0, [3], [1], [1]), kwargs = {})
    %write_76 :  [num_users=0] = [write](args = (%extract_slice_59, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_60 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:7_K:0, [0], [1], [1]), kwargs = {})
    %write_77 :  [num_users=0] = [write](args = (%extract_slice_60, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_61 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:7_K:0, [1], [1], [1]), kwargs = {})
    %write_78 :  [num_users=0] = [write](args = (%extract_slice_61, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_62 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:7_K:0, [2], [1], [1]), kwargs = {})
    %write_79 :  [num_users=0] = [write](args = (%extract_slice_62, %c, 1, None, (), None, None, None), kwargs = {})
    %extract_slice_63 : [num_users=1] = [extract_slice](args = (%get_result_M:1_N:7_K:0, [3], [1], [1]), kwargs = {})
    %write_80 :  [num_users=0] = [write](args = (%extract_slice_63, %c, 1, None, (), None, None, None), kwargs = {})
    return None
Custom format:
placeholder(_name=a, _type=Memory[M, K].of(f16)) type(Memory[M, K].of(f16))
placeholder(_name=b, _type=Memory[N, K].of(f16)) type(Memory[N, K].of(f16))
placeholder(_name=c, _type=Memory[M, N].of(f32)) type(Memory[M, N].of(f32))
register(shape=(M, N), dtype=f32, value=0.0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
register(shape=(M, N), dtype=f32, value=0.0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1}) type(Register[M, N].of(f32))
register(shape=(M, N), dtype=f32, value=0.0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1}) type(Register[M, N].of(f32))
register(shape=(M, N), dtype=f32, value=0.0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1}) type(Register[M, N].of(f32))
register(shape=(M, N), dtype=f32, value=0.0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1}) type(Register[M, N].of(f32))
register(shape=(M, N), dtype=f32, value=0.0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1}) type(Register[M, N].of(f32))
register(shape=(M, N), dtype=f32, value=0.0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1}) type(Register[M, N].of(f32))
register(shape=(M, N), dtype=f32, value=0.0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1}) type(Register[M, N].of(f32))
register(shape=(M, N), dtype=f32, value=0.0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
register(shape=(M, N), dtype=f32, value=0.0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1}) type(Register[M, N].of(f32))
register(shape=(M, N), dtype=f32, value=0.0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1}) type(Register[M, N].of(f32))
register(shape=(M, N), dtype=f32, value=0.0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1}) type(Register[M, N].of(f32))
register(shape=(M, N), dtype=f32, value=0.0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1}) type(Register[M, N].of(f32))
register(shape=(M, N), dtype=f32, value=0.0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1}) type(Register[M, N].of(f32))
register(shape=(M, N), dtype=f32, value=0.0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1}) type(Register[M, N].of(f32))
register(shape=(M, N), dtype=f32, value=0.0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1}) type(Register[M, N].of(f32))
allocate(shape=(N, K), distributed_shape=(BLOCK_N, BLOCK_K + 4), dtype=f16, address_space=$SHARED_ADDRESS_SPACE, padding=4, tail_padding=0, index={N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) : 1 : 1, K: $ARGK*BLOCK_K : 1 : 1}) type(None)
allocate(shape=(M, K), distributed_shape=(BLOCK_M, BLOCK_K + 4), dtype=f16, address_space=$SHARED_ADDRESS_SPACE, padding=4, tail_padding=0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K : 1 : 1}) type(None)
shared_memory_barrier(wait_async_ops=False) type(None)
iterate(axis=K, init_args=[register_M:0_N:0_K:0, register_M:0_N:1_K:0, register_M:0_N:2_K:0, register_M:0_N:3_K:0, register_M:0_N:4_K:0, register_M:0_N:5_K:0, register_M:0_N:6_K:0, register_M:0_N:7_K:0, register_M:1_N:0_K:0, register_M:1_N:1_K:0, register_M:1_N:2_K:0, register_M:1_N:3_K:0, register_M:1_N:4_K:0, register_M:1_N:5_K:0, register_M:1_N:6_K:0, register_M:1_N:7_K:0], subgraph_name=region_0, implicit_captures=[a, b], step=1) type(Register[M, N].of(f32))
get_result(value=iterate, res_idx=0, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
get_result(value=iterate, res_idx=1, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
get_result(value=iterate, res_idx=2, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
get_result(value=iterate, res_idx=3, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
get_result(value=iterate, res_idx=4, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
get_result(value=iterate, res_idx=5, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
get_result(value=iterate, res_idx=6, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
get_result(value=iterate, res_idx=7, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
get_result(value=iterate, res_idx=8, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
get_result(value=iterate, res_idx=9, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
get_result(value=iterate, res_idx=10, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
get_result(value=iterate, res_idx=11, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
get_result(value=iterate, res_idx=12, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
get_result(value=iterate, res_idx=13, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
get_result(value=iterate, res_idx=14, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
get_result(value=iterate, res_idx=15, index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1}) type(Register[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:0_K:0, offset=[0], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) : 1 : 1}) type(None)
write(register_=extract_slice, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:0_K:0, offset=[1], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 1 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) : 1 : 1}) type(None)
write(register_=extract_slice_1, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 1 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:0_K:0, offset=[2], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 2 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) : 1 : 1}) type(None)
write(register_=extract_slice_2, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 2 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:0_K:0, offset=[3], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 3 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) : 1 : 1}) type(None)
write(register_=extract_slice_3, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 3 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:1_K:0, offset=[0], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 16 : 1 : 1}) type(None)
write(register_=extract_slice_4, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 16 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:1_K:0, offset=[1], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 1 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 16 : 1 : 1}) type(None)
write(register_=extract_slice_5, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 1 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 16 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:1_K:0, offset=[2], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 2 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 16 : 1 : 1}) type(None)
write(register_=extract_slice_6, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 2 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 16 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:1_K:0, offset=[3], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 3 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 16 : 1 : 1}) type(None)
write(register_=extract_slice_7, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 3 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 16 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:2_K:0, offset=[0], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 32 : 1 : 1}) type(None)
write(register_=extract_slice_8, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 32 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:2_K:0, offset=[1], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 1 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 32 : 1 : 1}) type(None)
write(register_=extract_slice_9, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 1 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 32 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:2_K:0, offset=[2], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 2 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 32 : 1 : 1}) type(None)
write(register_=extract_slice_10, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 2 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 32 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:2_K:0, offset=[3], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 3 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 32 : 1 : 1}) type(None)
write(register_=extract_slice_11, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 3 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 32 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:3_K:0, offset=[0], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 48 : 1 : 1}) type(None)
write(register_=extract_slice_12, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 48 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:3_K:0, offset=[1], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 1 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 48 : 1 : 1}) type(None)
write(register_=extract_slice_13, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 1 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 48 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:3_K:0, offset=[2], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 2 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 48 : 1 : 1}) type(None)
write(register_=extract_slice_14, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 2 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 48 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:3_K:0, offset=[3], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 3 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 48 : 1 : 1}) type(None)
write(register_=extract_slice_15, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 3 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 48 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:4_K:0, offset=[0], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 64 : 1 : 1}) type(None)
write(register_=extract_slice_16, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 64 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:4_K:0, offset=[1], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 1 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 64 : 1 : 1}) type(None)
write(register_=extract_slice_17, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 1 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 64 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:4_K:0, offset=[2], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 2 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 64 : 1 : 1}) type(None)
write(register_=extract_slice_18, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 2 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 64 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:4_K:0, offset=[3], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 3 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 64 : 1 : 1}) type(None)
write(register_=extract_slice_19, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 3 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 64 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:5_K:0, offset=[0], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 80 : 1 : 1}) type(None)
write(register_=extract_slice_20, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 80 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:5_K:0, offset=[1], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 1 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 80 : 1 : 1}) type(None)
write(register_=extract_slice_21, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 1 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 80 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:5_K:0, offset=[2], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 2 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 80 : 1 : 1}) type(None)
write(register_=extract_slice_22, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 2 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 80 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:5_K:0, offset=[3], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 3 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 80 : 1 : 1}) type(None)
write(register_=extract_slice_23, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 3 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 80 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:6_K:0, offset=[0], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 96 : 1 : 1}) type(None)
write(register_=extract_slice_24, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 96 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:6_K:0, offset=[1], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 1 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 96 : 1 : 1}) type(None)
write(register_=extract_slice_25, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 1 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 96 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:6_K:0, offset=[2], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 2 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 96 : 1 : 1}) type(None)
write(register_=extract_slice_26, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 2 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 96 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:6_K:0, offset=[3], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 3 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 96 : 1 : 1}) type(None)
write(register_=extract_slice_27, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 3 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 96 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:7_K:0, offset=[0], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 112 : 1 : 1}) type(None)
write(register_=extract_slice_28, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 112 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:7_K:0, offset=[1], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 1 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 112 : 1 : 1}) type(None)
write(register_=extract_slice_29, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 1 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 112 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:7_K:0, offset=[2], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 2 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 112 : 1 : 1}) type(None)
write(register_=extract_slice_30, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 2 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 112 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:0_N:7_K:0, offset=[3], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 3 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 112 : 1 : 1}) type(None)
write(register_=extract_slice_31, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 3 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 112 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:0_K:0, offset=[0], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 16 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) : 1 : 1}) type(None)
write(register_=extract_slice_32, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 16 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:0_K:0, offset=[1], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 17 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) : 1 : 1}) type(None)
write(register_=extract_slice_33, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 17 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:0_K:0, offset=[2], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 18 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) : 1 : 1}) type(None)
write(register_=extract_slice_34, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 18 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:0_K:0, offset=[3], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 19 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) : 1 : 1}) type(None)
write(register_=extract_slice_35, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 19 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:1_K:0, offset=[0], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 16 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 16 : 1 : 1}) type(None)
write(register_=extract_slice_36, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 16 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 16 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:1_K:0, offset=[1], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 17 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 16 : 1 : 1}) type(None)
write(register_=extract_slice_37, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 17 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 16 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:1_K:0, offset=[2], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 18 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 16 : 1 : 1}) type(None)
write(register_=extract_slice_38, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 18 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 16 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:1_K:0, offset=[3], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 19 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 16 : 1 : 1}) type(None)
write(register_=extract_slice_39, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 19 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 16 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:2_K:0, offset=[0], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 16 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 32 : 1 : 1}) type(None)
write(register_=extract_slice_40, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 16 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 32 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:2_K:0, offset=[1], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 17 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 32 : 1 : 1}) type(None)
write(register_=extract_slice_41, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 17 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 32 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:2_K:0, offset=[2], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 18 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 32 : 1 : 1}) type(None)
write(register_=extract_slice_42, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 18 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 32 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:2_K:0, offset=[3], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 19 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 32 : 1 : 1}) type(None)
write(register_=extract_slice_43, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 19 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 32 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:3_K:0, offset=[0], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 16 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 48 : 1 : 1}) type(None)
write(register_=extract_slice_44, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 16 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 48 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:3_K:0, offset=[1], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 17 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 48 : 1 : 1}) type(None)
write(register_=extract_slice_45, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 17 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 48 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:3_K:0, offset=[2], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 18 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 48 : 1 : 1}) type(None)
write(register_=extract_slice_46, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 18 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 48 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:3_K:0, offset=[3], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 19 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 48 : 1 : 1}) type(None)
write(register_=extract_slice_47, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 19 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 48 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:4_K:0, offset=[0], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 16 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 64 : 1 : 1}) type(None)
write(register_=extract_slice_48, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 16 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 64 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:4_K:0, offset=[1], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 17 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 64 : 1 : 1}) type(None)
write(register_=extract_slice_49, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 17 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 64 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:4_K:0, offset=[2], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 18 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 64 : 1 : 1}) type(None)
write(register_=extract_slice_50, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 18 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 64 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:4_K:0, offset=[3], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 19 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 64 : 1 : 1}) type(None)
write(register_=extract_slice_51, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 19 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 64 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:5_K:0, offset=[0], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 16 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 80 : 1 : 1}) type(None)
write(register_=extract_slice_52, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 16 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 80 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:5_K:0, offset=[1], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 17 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 80 : 1 : 1}) type(None)
write(register_=extract_slice_53, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 17 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 80 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:5_K:0, offset=[2], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 18 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 80 : 1 : 1}) type(None)
write(register_=extract_slice_54, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 18 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 80 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:5_K:0, offset=[3], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 19 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 80 : 1 : 1}) type(None)
write(register_=extract_slice_55, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 19 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 80 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:6_K:0, offset=[0], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 16 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 96 : 1 : 1}) type(None)
write(register_=extract_slice_56, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 16 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 96 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:6_K:0, offset=[1], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 17 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 96 : 1 : 1}) type(None)
write(register_=extract_slice_57, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 17 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 96 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:6_K:0, offset=[2], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 18 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 96 : 1 : 1}) type(None)
write(register_=extract_slice_58, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 18 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 96 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:6_K:0, offset=[3], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 19 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 96 : 1 : 1}) type(None)
write(register_=extract_slice_59, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 19 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 96 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:7_K:0, offset=[0], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 16 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 112 : 1 : 1}) type(None)
write(register_=extract_slice_60, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 16 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 112 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:7_K:0, offset=[1], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 17 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 112 : 1 : 1}) type(None)
write(register_=extract_slice_61, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 17 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 112 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:7_K:0, offset=[2], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 18 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 112 : 1 : 1}) type(None)
write(register_=extract_slice_62, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 18 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 112 : 1 : 1}) type(Memory[M, N].of(f32))
extract_slice(register_=get_result_M:1_N:7_K:0, offset=[3], size=[1], stride=[1], index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 19 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 112 : 1 : 1}) type(None)
write(register_=extract_slice_63, memory=c, elements_per_thread=1, mapping_dynamic_vals=(), index={M: 5120*(Mod($WG0 + 321*$WG1, 8)) + 128*(Mod(Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24), Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321)))) + 32*floor($T0/64) + 1024*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 4*floor((Mod($T0, 64))/16) + 19 : 1 : 1, N: 128*$T1 + Mod($T0, 16) + 256*floor((Mod(floor($WG0/8 + 321*$WG1/8) + Min(3, Mod($WG0 + 321*$WG1, 8)), 24))/Max(1, Min(8, -40*Mod($WG0 + 321*$WG1, 8) - 8*floor(floor($WG0/8 + 321*$WG1/8)/24 + Min(3, Mod($WG0 + 321*$WG1, 8))/24) + 321))) + 112 : 1 : 1}) type(Memory[M, N].of(f32))
output(return_vals=(None,)) type(None)
region_0:

graph():
    %b :  [num_users=4] = placeholder[target=b]
    %a :  [num_users=2] = placeholder[target=a]
    %acc_M:0_N:0_K:0 :  [num_users=1] = placeholder[target=acc]
    %acc_M:0_N:1_K:0 :  [num_users=1] = placeholder[target=acc]
    %acc_M:0_N:2_K:0 :  [num_users=1] = placeholder[target=acc]
    %acc_M:0_N:3_K:0 :  [num_users=1] = placeholder[target=acc]
    %acc_M:0_N:4_K:0 :  [num_users=1] = placeholder[target=acc]
    %acc_M:0_N:5_K:0 :  [num_users=1] = placeholder[target=acc]
    %acc_M:0_N:6_K:0 :  [num_users=1] = placeholder[target=acc]
    %acc_M:0_N:7_K:0 :  [num_users=1] = placeholder[target=acc]
    %acc_M:1_N:0_K:0 :  [num_users=1] = placeholder[target=acc]
    %acc_M:1_N:1_K:0 :  [num_users=1] = placeholder[target=acc]
    %acc_M:1_N:2_K:0 :  [num_users=1] = placeholder[target=acc]
    %acc_M:1_N:3_K:0 :  [num_users=1] = placeholder[target=acc]
    %acc_M:1_N:4_K:0 :  [num_users=1] = placeholder[target=acc]
    %acc_M:1_N:5_K:0 :  [num_users=1] = placeholder[target=acc]
    %acc_M:1_N:6_K:0 :  [num_users=1] = placeholder[target=acc]
    %acc_M:1_N:7_K:0 :  [num_users=1] = placeholder[target=acc]
    %read_85 :  [num_users=1] = [read](args = (%a, 8, None, (), None, None, None, None), kwargs = {})
    %write_42 :  [num_users=8] = [write](args = (%read_85, %allocate, 8, None, (), None, None, None), kwargs = {})
    %read_86 :  [num_users=1] = [read](args = (%a, 8, None, (), None, None, None, None), kwargs = {})
    %write_43 :  [num_users=8] = [write](args = (%read_86, %allocate, 8, None, (), None, None, None), kwargs = {})
    %read_87 :  [num_users=1] = [read](args = (%b, 8, None, (), None, None, None, None), kwargs = {})
    %write_44 :  [num_users=32] = [write](args = (%read_87, %allocate_1, 8, None, (), None, None, None), kwargs = {})
    %read_88 :  [num_users=1] = [read](args = (%b, 8, None, (), None, None, None, None), kwargs = {})
    %write_45 :  [num_users=32] = [write](args = (%read_88, %allocate_1, 8, None, (), None, None, None), kwargs = {})
    %read_89 :  [num_users=1] = [read](args = (%b, 8, None, (), None, None, None, None), kwargs = {})
    %write_46 :  [num_users=32] = [write](args = (%read_89, %allocate_1, 8, None, (), None, None, None), kwargs = {})
    %read_90 :  [num_users=1] = [read](args = (%b, 8, None, (), None, None, None, None), kwargs = {})
    %write_47 :  [num_users=32] = [write](args = (%read_90, %allocate_1, 8, None, (), None, None, None), kwargs = {})
    %read_4_shared_M:0_N:0_K:0 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:0_K:1 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:0_K:2 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:0_K:3 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:1_K:0 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:1_K:1 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:1_K:2 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:1_K:3 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:2_K:0 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:2_K:1 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:2_K:2 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:2_K:3 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:3_K:0 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:3_K:1 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:3_K:2 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:3_K:3 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:4_K:0 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:4_K:1 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:4_K:2 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:4_K:3 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:5_K:0 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:5_K:1 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:5_K:2 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:5_K:3 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:6_K:0 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:6_K:1 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:6_K:2 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:6_K:3 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:7_K:0 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:7_K:1 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:7_K:2 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_4_shared_M:0_N:7_K:3 :  [num_users=2] = [read](args = (%allocate_1, 4, None, (), None, None, None, [%write_44, %write_45, %write_46, %write_47]), kwargs = {})
    %read_2_shared_M:0_N:0_K:0 :  [num_users=8] = [read](args = (%allocate, 4, None, (), None, None, None, [%write_42, %write_43]), kwargs = {})
    %read_2_shared_M:0_N:0_K:1 :  [num_users=8] = [read](args = (%allocate, 4, None, (), None, None, None, [%write_42, %write_43]), kwargs = {})
    %read_2_shared_M:0_N:0_K:2 :  [num_users=8] = [read](args = (%allocate, 4, None, (), None, None, None, [%write_42, %write_43]), kwargs = {})
    %read_2_shared_M:0_N:0_K:3 :  [num_users=8] = [read](args = (%allocate, 4, None, (), None, None, None, [%write_42, %write_43]), kwargs = {})
    %read_2_shared_M:1_N:0_K:0 :  [num_users=8] = [read](args = (%allocate, 4, None, (), None, None, None, [%write_42, %write_43]), kwargs = {})
    %read_2_shared_M:1_N:0_K:1 :  [num_users=8] = [read](args = (%allocate, 4, None, (), None, None, None, [%write_42, %write_43]), kwargs = {})
    %read_2_shared_M:1_N:0_K:2 :  [num_users=8] = [read](args = (%allocate, 4, None, (), None, None, None, [%write_42, %write_43]), kwargs = {})
    %read_2_shared_M:1_N:0_K:3 :  [num_users=8] = [read](args = (%allocate, 4, None, (), None, None, None, [%write_42, %write_43]), kwargs = {})
    %mma_M:0_N:0_K:0 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:0, %read_4_shared_M:0_N:0_K:0, %acc_M:0_N:0_K:0, None), kwargs = {})
    %mma_M:0_N:0_K:1 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:1, %read_4_shared_M:0_N:0_K:1, %mma_M:0_N:0_K:0, None), kwargs = {})
    %mma_M:0_N:0_K:2 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:2, %read_4_shared_M:0_N:0_K:2, %mma_M:0_N:0_K:1, None), kwargs = {})
    %mma_M:0_N:0_K:3 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:3, %read_4_shared_M:0_N:0_K:3, %mma_M:0_N:0_K:2, None), kwargs = {})
    %mma_M:0_N:1_K:0 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:0, %read_4_shared_M:0_N:1_K:0, %acc_M:0_N:1_K:0, None), kwargs = {})
    %mma_M:0_N:1_K:1 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:1, %read_4_shared_M:0_N:1_K:1, %mma_M:0_N:1_K:0, None), kwargs = {})
    %mma_M:0_N:1_K:2 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:2, %read_4_shared_M:0_N:1_K:2, %mma_M:0_N:1_K:1, None), kwargs = {})
    %mma_M:0_N:1_K:3 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:3, %read_4_shared_M:0_N:1_K:3, %mma_M:0_N:1_K:2, None), kwargs = {})
    %mma_M:0_N:2_K:0 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:0, %read_4_shared_M:0_N:2_K:0, %acc_M:0_N:2_K:0, None), kwargs = {})
    %mma_M:0_N:2_K:1 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:1, %read_4_shared_M:0_N:2_K:1, %mma_M:0_N:2_K:0, None), kwargs = {})
    %mma_M:0_N:2_K:2 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:2, %read_4_shared_M:0_N:2_K:2, %mma_M:0_N:2_K:1, None), kwargs = {})
    %mma_M:0_N:2_K:3 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:3, %read_4_shared_M:0_N:2_K:3, %mma_M:0_N:2_K:2, None), kwargs = {})
    %mma_M:0_N:3_K:0 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:0, %read_4_shared_M:0_N:3_K:0, %acc_M:0_N:3_K:0, None), kwargs = {})
    %mma_M:0_N:3_K:1 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:1, %read_4_shared_M:0_N:3_K:1, %mma_M:0_N:3_K:0, None), kwargs = {})
    %mma_M:0_N:3_K:2 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:2, %read_4_shared_M:0_N:3_K:2, %mma_M:0_N:3_K:1, None), kwargs = {})
    %mma_M:0_N:3_K:3 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:3, %read_4_shared_M:0_N:3_K:3, %mma_M:0_N:3_K:2, None), kwargs = {})
    %mma_M:0_N:4_K:0 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:0, %read_4_shared_M:0_N:4_K:0, %acc_M:0_N:4_K:0, None), kwargs = {})
    %mma_M:0_N:4_K:1 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:1, %read_4_shared_M:0_N:4_K:1, %mma_M:0_N:4_K:0, None), kwargs = {})
    %mma_M:0_N:4_K:2 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:2, %read_4_shared_M:0_N:4_K:2, %mma_M:0_N:4_K:1, None), kwargs = {})
    %mma_M:0_N:4_K:3 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:3, %read_4_shared_M:0_N:4_K:3, %mma_M:0_N:4_K:2, None), kwargs = {})
    %mma_M:0_N:5_K:0 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:0, %read_4_shared_M:0_N:5_K:0, %acc_M:0_N:5_K:0, None), kwargs = {})
    %mma_M:0_N:5_K:1 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:1, %read_4_shared_M:0_N:5_K:1, %mma_M:0_N:5_K:0, None), kwargs = {})
    %mma_M:0_N:5_K:2 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:2, %read_4_shared_M:0_N:5_K:2, %mma_M:0_N:5_K:1, None), kwargs = {})
    %mma_M:0_N:5_K:3 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:3, %read_4_shared_M:0_N:5_K:3, %mma_M:0_N:5_K:2, None), kwargs = {})
    %mma_M:0_N:6_K:0 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:0, %read_4_shared_M:0_N:6_K:0, %acc_M:0_N:6_K:0, None), kwargs = {})
    %mma_M:0_N:6_K:1 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:1, %read_4_shared_M:0_N:6_K:1, %mma_M:0_N:6_K:0, None), kwargs = {})
    %mma_M:0_N:6_K:2 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:2, %read_4_shared_M:0_N:6_K:2, %mma_M:0_N:6_K:1, None), kwargs = {})
    %mma_M:0_N:6_K:3 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:3, %read_4_shared_M:0_N:6_K:3, %mma_M:0_N:6_K:2, None), kwargs = {})
    %mma_M:0_N:7_K:0 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:0, %read_4_shared_M:0_N:7_K:0, %acc_M:0_N:7_K:0, None), kwargs = {})
    %mma_M:0_N:7_K:1 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:1, %read_4_shared_M:0_N:7_K:1, %mma_M:0_N:7_K:0, None), kwargs = {})
    %mma_M:0_N:7_K:2 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:2, %read_4_shared_M:0_N:7_K:2, %mma_M:0_N:7_K:1, None), kwargs = {})
    %mma_M:0_N:7_K:3 :  [num_users=1] = [mma](args = (%read_2_shared_M:0_N:0_K:3, %read_4_shared_M:0_N:7_K:3, %mma_M:0_N:7_K:2, None), kwargs = {})
    %mma_M:1_N:0_K:0 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:0, %read_4_shared_M:0_N:0_K:0, %acc_M:1_N:0_K:0, None), kwargs = {})
    %mma_M:1_N:0_K:1 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:1, %read_4_shared_M:0_N:0_K:1, %mma_M:1_N:0_K:0, None), kwargs = {})
    %mma_M:1_N:0_K:2 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:2, %read_4_shared_M:0_N:0_K:2, %mma_M:1_N:0_K:1, None), kwargs = {})
    %mma_M:1_N:0_K:3 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:3, %read_4_shared_M:0_N:0_K:3, %mma_M:1_N:0_K:2, None), kwargs = {})
    %mma_M:1_N:1_K:0 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:0, %read_4_shared_M:0_N:1_K:0, %acc_M:1_N:1_K:0, None), kwargs = {})
    %mma_M:1_N:1_K:1 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:1, %read_4_shared_M:0_N:1_K:1, %mma_M:1_N:1_K:0, None), kwargs = {})
    %mma_M:1_N:1_K:2 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:2, %read_4_shared_M:0_N:1_K:2, %mma_M:1_N:1_K:1, None), kwargs = {})
    %mma_M:1_N:1_K:3 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:3, %read_4_shared_M:0_N:1_K:3, %mma_M:1_N:1_K:2, None), kwargs = {})
    %mma_M:1_N:2_K:0 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:0, %read_4_shared_M:0_N:2_K:0, %acc_M:1_N:2_K:0, None), kwargs = {})
    %mma_M:1_N:2_K:1 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:1, %read_4_shared_M:0_N:2_K:1, %mma_M:1_N:2_K:0, None), kwargs = {})
    %mma_M:1_N:2_K:2 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:2, %read_4_shared_M:0_N:2_K:2, %mma_M:1_N:2_K:1, None), kwargs = {})
    %mma_M:1_N:2_K:3 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:3, %read_4_shared_M:0_N:2_K:3, %mma_M:1_N:2_K:2, None), kwargs = {})
    %mma_M:1_N:3_K:0 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:0, %read_4_shared_M:0_N:3_K:0, %acc_M:1_N:3_K:0, None), kwargs = {})
    %mma_M:1_N:3_K:1 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:1, %read_4_shared_M:0_N:3_K:1, %mma_M:1_N:3_K:0, None), kwargs = {})
    %mma_M:1_N:3_K:2 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:2, %read_4_shared_M:0_N:3_K:2, %mma_M:1_N:3_K:1, None), kwargs = {})
    %mma_M:1_N:3_K:3 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:3, %read_4_shared_M:0_N:3_K:3, %mma_M:1_N:3_K:2, None), kwargs = {})
    %mma_M:1_N:4_K:0 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:0, %read_4_shared_M:0_N:4_K:0, %acc_M:1_N:4_K:0, None), kwargs = {})
    %mma_M:1_N:4_K:1 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:1, %read_4_shared_M:0_N:4_K:1, %mma_M:1_N:4_K:0, None), kwargs = {})
    %mma_M:1_N:4_K:2 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:2, %read_4_shared_M:0_N:4_K:2, %mma_M:1_N:4_K:1, None), kwargs = {})
    %mma_M:1_N:4_K:3 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:3, %read_4_shared_M:0_N:4_K:3, %mma_M:1_N:4_K:2, None), kwargs = {})
    %mma_M:1_N:5_K:0 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:0, %read_4_shared_M:0_N:5_K:0, %acc_M:1_N:5_K:0, None), kwargs = {})
    %mma_M:1_N:5_K:1 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:1, %read_4_shared_M:0_N:5_K:1, %mma_M:1_N:5_K:0, None), kwargs = {})
    %mma_M:1_N:5_K:2 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:2, %read_4_shared_M:0_N:5_K:2, %mma_M:1_N:5_K:1, None), kwargs = {})
    %mma_M:1_N:5_K:3 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:3, %read_4_shared_M:0_N:5_K:3, %mma_M:1_N:5_K:2, None), kwargs = {})
    %mma_M:1_N:6_K:0 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:0, %read_4_shared_M:0_N:6_K:0, %acc_M:1_N:6_K:0, None), kwargs = {})
    %mma_M:1_N:6_K:1 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:1, %read_4_shared_M:0_N:6_K:1, %mma_M:1_N:6_K:0, None), kwargs = {})
    %mma_M:1_N:6_K:2 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:2, %read_4_shared_M:0_N:6_K:2, %mma_M:1_N:6_K:1, None), kwargs = {})
    %mma_M:1_N:6_K:3 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:3, %read_4_shared_M:0_N:6_K:3, %mma_M:1_N:6_K:2, None), kwargs = {})
    %mma_M:1_N:7_K:0 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:0, %read_4_shared_M:0_N:7_K:0, %acc_M:1_N:7_K:0, None), kwargs = {})
    %mma_M:1_N:7_K:1 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:1, %read_4_shared_M:0_N:7_K:1, %mma_M:1_N:7_K:0, None), kwargs = {})
    %mma_M:1_N:7_K:2 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:2, %read_4_shared_M:0_N:7_K:2, %mma_M:1_N:7_K:1, None), kwargs = {})
    %mma_M:1_N:7_K:3 :  [num_users=1] = [mma](args = (%read_2_shared_M:1_N:0_K:3, %read_4_shared_M:0_N:7_K:3, %mma_M:1_N:7_K:2, None), kwargs = {})
    %shared_memory_barrier : [num_users=0] = [shared_memory_barrier](args = (False,), kwargs = {})
    return [mma_M:0_N:0_K:3, mma_M:0_N:1_K:3, mma_M:0_N:2_K:3, mma_M:0_N:3_K:3, mma_M:0_N:4_K:3, mma_M:0_N:5_K:3, mma_M:0_N:6_K:3, mma_M:0_N:7_K:3, mma_M:1_N:0_K:3, mma_M:1_N:1_K:3, mma_M:1_N:2_K:3, mma_M:1_N:3_K:3, mma_M:1_N:4_K:3, mma_M:1_N:5_K:3, mma_M:1_N:6_K:3, mma_M:1_N:7_K:3]
Custom format:
placeholder(_name=b, _type=Memory[N, K].of(f16)) type(Memory[N, K].of(f16))
placeholder(_name=a, _type=Memory[M, K].of(f16)) type(Memory[M, K].of(f16))
placeholder(_name=acc_M:0_N:0_K:0, _type=Register[M, N].of(f32)) type(Register[M, N].of(f32))
placeholder(_name=acc_M:0_N:1_K:0, _type=Register[M, N].of(f32)) type(Register[M, N].of(f32))
placeholder(_name=acc_M:0_N:2_K:0, _type=Register[M, N].of(f32)) type(Register[M, N].of(f32))
placeholder(_name=acc_M:0_N:3_K:0, _type=Register[M, N].of(f32)) type(Register[M, N].of(f32))
placeholder(_name=acc_M:0_N:4_K:0, _type=Register[M, N].of(f32)) type(Register[M, N].of(f32))
placeholder(_name=acc_M:0_N:5_K:0, _type=Register[M, N].of(f32)) type(Register[M, N].of(f32))
placeholder(_name=acc_M:0_N:6_K:0, _type=Register[M, N].of(f32)) type(Register[M, N].of(f32))
placeholder(_name=acc_M:0_N:7_K:0, _type=Register[M, N].of(f32)) type(Register[M, N].of(f32))
placeholder(_name=acc_M:1_N:0_K:0, _type=Register[M, N].of(f32)) type(Register[M, N].of(f32))
placeholder(_name=acc_M:1_N:1_K:0, _type=Register[M, N].of(f32)) type(Register[M, N].of(f32))
placeholder(_name=acc_M:1_N:2_K:0, _type=Register[M, N].of(f32)) type(Register[M, N].of(f32))
placeholder(_name=acc_M:1_N:3_K:0, _type=Register[M, N].of(f32)) type(Register[M, N].of(f32))
placeholder(_name=acc_M:1_N:4_K:0, _type=Register[M, N].of(f32)) type(Register[M, N].of(f32))
placeholder(_name=acc_M:1_N:5_K:0, _type=Register[M, N].of(f32)) type(Register[M, N].of(f32))
placeholder(_name=acc_M:1_N:6_K:0, _type=Register[M, N].of(f32)) type(Register[M, N].of(f32))
placeholder(_name=acc_M:1_N:7_K:0, _type=Register[M, N].of(f32)) type(Register[M, N].of(f32))
read(memory=a, elements_per_thread=8, mapping_dynamic_vals=(), index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod(32*$T1 + 64*$T2 + floor($T0/8), 128) : 1 : 1, K: $ARGK*BLOCK_K + 8*(Mod($T0, 8)) : 8 : 1}) type(Register[M, K].of(f16))
write(register_=read_85, memory=allocate, elements_per_thread=8, mapping_dynamic_vals=(), index={M: Mod(32*$T1 + 64*$T2 + floor($T0/8), 128) : 1 : 1, K: 8*(Mod($T0, 8)) : 8 : 1}) type(Memory[M, K].of(f16))
read(memory=a, elements_per_thread=8, mapping_dynamic_vals=(), index={M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod(32*$T1 + 64*$T2 + floor($T0/8) + 64, 128) : 1 : 1, K: $ARGK*BLOCK_K + 8*(Mod($T0, 8)) : 8 : 1}) type(Register[M, K].of(f16))
write(register_=read_86, memory=allocate, elements_per_thread=8, mapping_dynamic_vals=(), index={M: Mod(32*$T1 + 64*$T2 + floor($T0/8) + 64, 128) : 1 : 1, K: 8*(Mod($T0, 8)) : 8 : 1}) type(Memory[M, K].of(f16))
read(memory=b, elements_per_thread=8, mapping_dynamic_vals=(), index={N: BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod(32*$T1 + 64*$T2 + floor($T0/8), 256) : 1 : 1, K: $ARGK*BLOCK_K + 8*(Mod($T0, 8)) : 8 : 1}) type(Register[N, K].of(f16))
write(register_=read_87, memory=allocate_1, elements_per_thread=8, mapping_dynamic_vals=(), index={N: Mod(32*$T1 + 64*$T2 + floor($T0/8), 256) : 1 : 1, K: 8*(Mod($T0, 8)) : 8 : 1}) type(Memory[N, K].of(f16))
read(memory=b, elements_per_thread=8, mapping_dynamic_vals=(), index={N: BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod(32*$T1 + 64*$T2 + floor($T0/8) + 64, 256) : 1 : 1, K: $ARGK*BLOCK_K + 8*(Mod($T0, 8)) : 8 : 1}) type(Register[N, K].of(f16))
write(register_=read_88, memory=allocate_1, elements_per_thread=8, mapping_dynamic_vals=(), index={N: Mod(32*$T1 + 64*$T2 + floor($T0/8) + 64, 256) : 1 : 1, K: 8*(Mod($T0, 8)) : 8 : 1}) type(Memory[N, K].of(f16))
read(memory=b, elements_per_thread=8, mapping_dynamic_vals=(), index={N: BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod(32*$T1 + 64*$T2 + floor($T0/8) + 128, 256) : 1 : 1, K: $ARGK*BLOCK_K + 8*(Mod($T0, 8)) : 8 : 1}) type(Register[N, K].of(f16))
write(register_=read_89, memory=allocate_1, elements_per_thread=8, mapping_dynamic_vals=(), index={N: Mod(32*$T1 + 64*$T2 + floor($T0/8) + 128, 256) : 1 : 1, K: 8*(Mod($T0, 8)) : 8 : 1}) type(Memory[N, K].of(f16))
read(memory=b, elements_per_thread=8, mapping_dynamic_vals=(), index={N: BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod(32*$T1 + 64*$T2 + floor($T0/8) + 192, 256) : 1 : 1, K: $ARGK*BLOCK_K + 8*(Mod($T0, 8)) : 8 : 1}) type(Register[N, K].of(f16))
write(register_=read_90, memory=allocate_1, elements_per_thread=8, mapping_dynamic_vals=(), index={N: Mod(32*$T1 + 64*$T2 + floor($T0/8) + 192, 256) : 1 : 1, K: 8*(Mod($T0, 8)) : 8 : 1}) type(Memory[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) : 1 : 1, K: 4*floor((Mod($T0, 64))/16) : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 16 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 16 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 16 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 16 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 32 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 32 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 32 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 32 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 48 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 48 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 48 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 48 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 64 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 64 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 64 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 64 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 80 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 80 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 80 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 80 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 96 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 96 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 96 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 96 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 112 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 112 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 112 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate_1, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_44, write_45, write_46, write_47], index={N: $T1*floor(BLOCK_N/2) + Mod($T0, 16) + 112 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}) type(Register[N, K].of(f16))
read(memory=allocate, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_42, write_43], index={M: Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: 4*floor((Mod($T0, 64))/16) : 4 : 1}) type(Register[M, K].of(f16))
read(memory=allocate, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_42, write_43], index={M: Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}) type(Register[M, K].of(f16))
read(memory=allocate, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_42, write_43], index={M: Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}) type(Register[M, K].of(f16))
read(memory=allocate, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_42, write_43], index={M: Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}) type(Register[M, K].of(f16))
read(memory=allocate, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_42, write_43], index={M: Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) : 4 : 1}) type(Register[M, K].of(f16))
read(memory=allocate, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_42, write_43], index={M: Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}) type(Register[M, K].of(f16))
read(memory=allocate, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_42, write_43], index={M: Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}) type(Register[M, K].of(f16))
read(memory=allocate, elements_per_thread=4, mapping_dynamic_vals=(), _write_dependency=[write_42, write_43], index={M: Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}) type(Register[M, K].of(f16))
mma(lhs=read_2_shared_M:0_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), rhs=read_4_shared_M:0_N:0_K:0 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), acc=acc_M:0_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), rhs=read_4_shared_M:0_N:0_K:1 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), acc=mma_M:0_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), rhs=read_4_shared_M:0_N:0_K:2 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), acc=mma_M:0_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:3 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), rhs=read_4_shared_M:0_N:0_K:3 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), acc=mma_M:0_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), rhs=read_4_shared_M:0_N:1_K:0 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), acc=acc_M:0_N:1_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), rhs=read_4_shared_M:0_N:1_K:1 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), acc=mma_M:0_N:1_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), rhs=read_4_shared_M:0_N:1_K:2 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), acc=mma_M:0_N:1_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:3 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), rhs=read_4_shared_M:0_N:1_K:3 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), acc=mma_M:0_N:1_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), rhs=read_4_shared_M:0_N:2_K:0 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), acc=acc_M:0_N:2_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), rhs=read_4_shared_M:0_N:2_K:1 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), acc=mma_M:0_N:2_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), rhs=read_4_shared_M:0_N:2_K:2 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), acc=mma_M:0_N:2_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:3 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), rhs=read_4_shared_M:0_N:2_K:3 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), acc=mma_M:0_N:2_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), rhs=read_4_shared_M:0_N:3_K:0 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), acc=acc_M:0_N:3_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), rhs=read_4_shared_M:0_N:3_K:1 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), acc=mma_M:0_N:3_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), rhs=read_4_shared_M:0_N:3_K:2 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), acc=mma_M:0_N:3_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:3 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), rhs=read_4_shared_M:0_N:3_K:3 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), acc=mma_M:0_N:3_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), rhs=read_4_shared_M:0_N:4_K:0 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), acc=acc_M:0_N:4_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), rhs=read_4_shared_M:0_N:4_K:1 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), acc=mma_M:0_N:4_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), rhs=read_4_shared_M:0_N:4_K:2 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), acc=mma_M:0_N:4_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:3 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), rhs=read_4_shared_M:0_N:4_K:3 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), acc=mma_M:0_N:4_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), rhs=read_4_shared_M:0_N:5_K:0 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), acc=acc_M:0_N:5_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), rhs=read_4_shared_M:0_N:5_K:1 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), acc=mma_M:0_N:5_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), rhs=read_4_shared_M:0_N:5_K:2 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), acc=mma_M:0_N:5_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:3 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), rhs=read_4_shared_M:0_N:5_K:3 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), acc=mma_M:0_N:5_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), rhs=read_4_shared_M:0_N:6_K:0 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), acc=acc_M:0_N:6_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), rhs=read_4_shared_M:0_N:6_K:1 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), acc=mma_M:0_N:6_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), rhs=read_4_shared_M:0_N:6_K:2 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), acc=mma_M:0_N:6_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:3 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), rhs=read_4_shared_M:0_N:6_K:3 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), acc=mma_M:0_N:6_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), rhs=read_4_shared_M:0_N:7_K:0 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), acc=acc_M:0_N:7_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), rhs=read_4_shared_M:0_N:7_K:1 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), acc=mma_M:0_N:7_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), rhs=read_4_shared_M:0_N:7_K:2 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), acc=mma_M:0_N:7_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:0_N:0_K:3 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), rhs=read_4_shared_M:0_N:7_K:3 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), acc=mma_M:0_N:7_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), rhs=read_4_shared_M:0_N:0_K:0 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), acc=acc_M:1_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), rhs=read_4_shared_M:0_N:0_K:1 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), acc=mma_M:1_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), rhs=read_4_shared_M:0_N:0_K:2 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), acc=mma_M:1_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:3 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), rhs=read_4_shared_M:0_N:0_K:3 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), acc=mma_M:1_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), rhs=read_4_shared_M:0_N:1_K:0 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), acc=acc_M:1_N:1_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), rhs=read_4_shared_M:0_N:1_K:1 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), acc=mma_M:1_N:1_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), rhs=read_4_shared_M:0_N:1_K:2 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), acc=mma_M:1_N:1_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:3 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), rhs=read_4_shared_M:0_N:1_K:3 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), acc=mma_M:1_N:1_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 16 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), rhs=read_4_shared_M:0_N:2_K:0 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), acc=acc_M:1_N:2_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), rhs=read_4_shared_M:0_N:2_K:1 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), acc=mma_M:1_N:2_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), rhs=read_4_shared_M:0_N:2_K:2 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), acc=mma_M:1_N:2_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:3 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), rhs=read_4_shared_M:0_N:2_K:3 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), acc=mma_M:1_N:2_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 32 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), rhs=read_4_shared_M:0_N:3_K:0 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), acc=acc_M:1_N:3_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), rhs=read_4_shared_M:0_N:3_K:1 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), acc=mma_M:1_N:3_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), rhs=read_4_shared_M:0_N:3_K:2 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), acc=mma_M:1_N:3_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:3 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), rhs=read_4_shared_M:0_N:3_K:3 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), acc=mma_M:1_N:3_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 48 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), rhs=read_4_shared_M:0_N:4_K:0 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), acc=acc_M:1_N:4_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), rhs=read_4_shared_M:0_N:4_K:1 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), acc=mma_M:1_N:4_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), rhs=read_4_shared_M:0_N:4_K:2 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), acc=mma_M:1_N:4_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:3 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), rhs=read_4_shared_M:0_N:4_K:3 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), acc=mma_M:1_N:4_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 64 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), rhs=read_4_shared_M:0_N:5_K:0 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), acc=acc_M:1_N:5_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), rhs=read_4_shared_M:0_N:5_K:1 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), acc=mma_M:1_N:5_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), rhs=read_4_shared_M:0_N:5_K:2 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), acc=mma_M:1_N:5_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:3 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), rhs=read_4_shared_M:0_N:5_K:3 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), acc=mma_M:1_N:5_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 80 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), rhs=read_4_shared_M:0_N:6_K:0 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), acc=acc_M:1_N:6_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), rhs=read_4_shared_M:0_N:6_K:1 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), acc=mma_M:1_N:6_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), rhs=read_4_shared_M:0_N:6_K:2 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), acc=mma_M:1_N:6_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:3 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), rhs=read_4_shared_M:0_N:6_K:3 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), acc=mma_M:1_N:6_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 96 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), rhs=read_4_shared_M:0_N:7_K:0 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) : 4 : 1}), acc=acc_M:1_N:7_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), rhs=read_4_shared_M:0_N:7_K:1 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 1}), acc=mma_M:1_N:7_K:0 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), rhs=read_4_shared_M:0_N:7_K:2 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 32 : 4 : 1}), acc=mma_M:1_N:7_K:1 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1})) type(Register[M, N].of(f32))
mma(lhs=read_2_shared_M:1_N:0_K:3 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + Mod($T0, 16) + floor($T0/64)*floor(BLOCK_M/4) + 16 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), rhs=read_4_shared_M:0_N:7_K:3 (index = {N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1, K: $ARGK*BLOCK_K + 4*floor((Mod($T0, 64))/16) + 48 : 4 : 1}), acc=mma_M:1_N:7_K:2 (index = {M: BLOCK_M*(GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + Mod(Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)), Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M))))) + floor($T0/64)*floor(BLOCK_M/4) + 4*floor((Mod($T0, 64))/16) + 16 : 4 : 16, N: $T1*floor(BLOCK_N/2) + BLOCK_N*floor((Mod((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)), GROUP_SIZE_M*ceiling(N/BLOCK_N)))/Max(1, Min(GROUP_SIZE_M, -GROUP_SIZE_M*floor(((Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8))*floor(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N)/8) + floor($WG0/8 + $WG1*ceiling(M/BLOCK_M)/8) + Min(Mod(ceiling(M/BLOCK_M)*ceiling(N/BLOCK_N), 8), Mod($WG0 + $WG1*ceiling(M/BLOCK_M), 8)))/(GROUP_SIZE_M*ceiling(N/BLOCK_N))) + ceiling(M/BLOCK_M)))) + Mod($T0, 16) + 112 : 1 : 1})) type(Register[M, N].of(f32))
shared_memory_barrier(wait_async_ops=False) type(None)
output(return_vals=([mma_M:0_N:0_K:3, mma_M:0_N:1_K:3, mma_M:0_N:2_K:3, mma_M:0_N:3_K:3, mma_M:0_N:4_K:3, mma_M:0_N:5_K:3, mma_M:0_N:6_K:3, mma_M:0_N:7_K:3, mma_M:1_N:0_K:3, mma_M:1_N:1_K:3, mma_M:1_N:2_K:3, mma_M:1_N:3_K:3, mma_M:1_N:4_K:3, mma_M:1_N:5_K:3, mma_M:1_N:6_K:3, mma_M:1_N:7_K:3],)) type(Register[M, N].of(f32))
[ERROR] Failed to compile gemm_41024_641_64_f16_f16_tB: Cannot find producer(s) for remaining item in workqueue.
[ERROR] Traceback (most recent call last):
          File "/home/gaurverm/upstream/iree-kernel-benchmark/kernel_bench/core/template.py", line 246, in compile_to_vmfb
            result = wave_compile(compile_options, kernel.launchable)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          File "/home/gaurverm/upstream/iree-kernel-benchmark/bench_venv/lib/python3.12/site-packages/wave_lang/kernel/wave/compile.py", line 325, in wave_compile
            ) = kernel._trace_and_get_kernel_signature(options)
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          File "/home/gaurverm/upstream/iree-kernel-benchmark/bench_venv/lib/python3.12/site-packages/wave_lang/kernel/wave/wave.py", line 818, in _trace_and_get_kernel_signature
            try_apply_pass(
          File "/home/gaurverm/upstream/iree-kernel-benchmark/bench_venv/lib/python3.12/site-packages/wave_lang/kernel/wave/utils/print_utils.py", line 784, in try_apply_pass
            p()
          File "/home/gaurverm/upstream/iree-kernel-benchmark/bench_venv/lib/python3.12/site-packages/wave_lang/kernel/wave/schedule_reordering.py", line 804, in schedule_reordering
            reordered_graph = reorder_graph(graph, clusters)
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          File "/home/gaurverm/upstream/iree-kernel-benchmark/bench_venv/lib/python3.12/site-packages/wave_lang/kernel/wave/schedule_reordering.py", line 254, in reorder_graph
            reordered_original_nodes = topological_sort_with_dependencies(
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
          File "/home/gaurverm/upstream/iree-kernel-benchmark/bench_venv/lib/python3.12/site-packages/wave_lang/kernel/wave/utils/general_utils.py", line 654, in topological_sort_with_dependencies
            raise ValueError(
        ValueError: Cannot find producer(s) for remaining item in workqueue.
        
[ERROR] 0 Success, 1 Failed out of 1 configs
[INFO] Compilation process completed.
Benchmarking kernels:   0%|          | 0/1 [00:00<?, ?it/s]Benchmarking kernels: 100%|██████████| 1/1 [00:00<00:00, 11459.85it/s]
[INFO] Results written to results/csv/gemm/gemm_wave.csv
[INFO] Results written to results/json/gemm/gemm_wave.json
[INFO] Running GEMM benchmarks for backend triton
[INFO] Generated 1 GEMM configs for backend triton.
Benchmarking kernels:   0%|          | 0/1 [00:00<?, ?it/s]Benchmarking kernels: 100%|██████████| 1/1 [00:10<00:00, 10.44s/it]Benchmarking kernels: 100%|██████████| 1/1 [00:10<00:00, 10.44s/it]
[INFO] Results written to results/csv/gemm/gemm_triton.csv
[INFO] Results written to results/json/gemm/gemm_triton.json
[INFO] Results written to results/csv/gemm/gemm_triton_41024x641x64.csv
[INFO] Results written to results/json/gemm/gemm_triton_41024x641x64.json
[INFO] Running GEMM benchmarks for backend torch
[INFO] Generated 1 GEMM configs for backend torch.
Benchmarking kernels:   0%|          | 0/1 [00:00<?, ?it/s]Benchmarking kernels: 100%|██████████| 1/1 [00:00<00:00,  2.25it/s]Benchmarking kernels: 100%|██████████| 1/1 [00:00<00:00,  2.25it/s]
[INFO] Results written to results/csv/gemm/gemm_torch.csv
[INFO] Results written to results/json/gemm/gemm_torch.json
[INFO] Results written to results/csv/gemm/gemm_torch_41024x641x64.csv
[INFO] Results written to results/json/gemm/gemm_torch_41024x641x64.json
[INFO] Results written to results/csv/gemm/gemm_triton_41024x641x64.csv
[INFO] Results written to results/json/gemm/gemm_triton_41024x641x64.json
