2025-10-02 00:36:01 [INFO] [task_scheduler.cc:160] Initializing Task #0: "mm"
2025-10-02 00:36:01 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        for i, j, k in T.grid(642, 4096, 14336):
            with T.block("C"):
                v_i, v_j, v_k = T.axis.remap("SSR", [i, j, k])
                T.reads(A[v_i, v_k], B[v_k, v_j])
                T.writes(C[v_i, v_j])
                with T.init():
                    C[v_i, v_j] = T.float16(0.0)
                C[v_i, v_j] = C[v_i, v_j] + A[v_i, v_k] * B[v_k, v_j]
2025-10-02 00:36:01 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2025-10-02 00:36:01 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
            A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
            B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
            for i_0_j_0_fused in T.thread_binding(64, thread="blockIdx.x"):
                for i_1_j_1_fused in T.thread_binding(12, thread="vthread.x"):
                    for i_2_j_2_fused in T.thread_binding(214, thread="threadIdx.x"):
                        for k_0 in range(1024):
                            for ax0_ax1_fused in range(4494):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, i_0_j_0_fused // 32 * 321 + ax0_ax1_fused // 14)
                                    v1 = T.axis.spatial(14336, k_0 * 14 + ax0_ax1_fused % 14)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    A_shared[v0, v1] = A[v0, v1]
                            for ax0_ax1_fused in range(1792):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(14336, k_0 * 14 + ax0_ax1_fused // 128)
                                    v1 = T.axis.spatial(4096, i_0_j_0_fused % 32 * 128 + ax0_ax1_fused % 128)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    B_shared[v0, v1] = B[v0, v1]
                            for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 8, 14, 1, 2):
                                with T.block("C"):
                                    v_i = T.axis.spatial(642, i_0_j_0_fused // 32 * 321 + i_1_j_1_fused // 4 * 107 + i_2_j_2_fused // 2 + i_3 + i_4)
                                    v_j = T.axis.spatial(4096, i_0_j_0_fused % 32 * 128 + i_1_j_1_fused % 4 * 32 + i_2_j_2_fused % 2 * 16 + j_3 * 2 + j_4)
                                    v_k = T.axis.reduce(14336, k_0 * 14 + k_1 * 14 + k_2)
                                    T.reads(A_shared[v_i, v_k], B_shared[v_k, v_j])
                                    T.writes(C_local[v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        C_local[v_i, v_j] = T.float16(0.0)
                                    C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                        for ax0, ax1 in T.grid(1, 16):
                            with T.block("C_local"):
                                v0 = T.axis.spatial(642, i_0_j_0_fused // 32 * 321 + i_1_j_1_fused // 4 * 107 + i_2_j_2_fused // 2 + ax0)
                                v1 = T.axis.spatial(4096, i_0_j_0_fused % 32 * 128 + i_1_j_1_fused % 4 * 32 + i_2_j_2_fused % 2 * 16 + ax1)
                                T.reads(C_local[v0, v1])
                                T.writes(C[v0, v1])
                                C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 3, 107, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[32, 4, 2, 8, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 1, 14])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
2025-10-02 00:36:01 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-02 00:36:01 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2025-10-02 00:36:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x430c838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x44f7238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x44f7208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x43efed8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4345248)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x44e46b8)]: 491 failure(s)
2025-10-02 00:36:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x430c838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x44f7238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x44f7208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x43efed8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4345248)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x44e46b8)]: 987 failure(s)
2025-10-02 00:36:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x430c838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x44f7238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x44f7208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x43efed8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4345248)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x44e46b8)]: 1483 failure(s)
2025-10-02 00:36:05 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2025-10-02 00:36:07 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x430c838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x44f7238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x44f7208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x43efed8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4345248)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x44e46b8)]: 112 failure(s)
2025-10-02 00:36:09 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x430c838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x44f7238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x44f7208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x43efed8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4345248)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x44e46b8)]: 95 failure(s)
2025-10-02 00:36:11 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x430c838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x44f7238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x44f7208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x43efed8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4345248)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x44e46b8)]: 79 failure(s)
2025-10-02 00:36:13 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x430c838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x44f7238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x44f7208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x43efed8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4345248)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x44e46b8)]: 83 failure(s)
2025-10-02 00:36:14 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9994  0.9993  0.9978  0.9974  0.9965  0.9965  0.9953  0.9942  0.9931  0.9918  0.9911  0.9911  0.9909  0.9900  0.9889
[17 : 32]:	0.9888  0.9877  0.9874  0.9868  0.9866  0.9859  0.9858  0.9840  0.9837  0.9832  0.9830  0.9828  0.9818  0.9814  0.9793  0.9791
[33 : 48]:	0.9787  0.9776  0.9776  0.9775  0.9773  0.9769  0.9763  0.9745  0.9742  0.9741  0.9737  0.9712  0.9710  0.9707  0.9706  0.9699
[49 : 64]:	0.9691  0.9687  0.9685  0.9680  0.9680  0.9678  0.9677  0.9674  0.9661  0.9654  0.9652  0.9651  0.9639  0.9596  0.9593  0.9566
2025-10-02 00:36:14 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-02 00:36:14 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #1: GFLOPs: 408.5095. Time: 184565.6330 us. Best GFLOPs: 408.5095
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #2: GFLOPs: 7087.6924. Time: 10637.7090 us. Best GFLOPs: 7087.6924
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #3: GFLOPs: 7849.1588. Time: 9605.7184 us. Best GFLOPs: 7849.1588
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #4: GFLOPs: 404.8541. Time: 186232.0350 us. Best GFLOPs: 7849.1588
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #5: GFLOPs: 92.9091. Time: 811511.5557 us. Best GFLOPs: 7849.1588
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #6: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(2568, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 8, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 8 * 2 + i_2_j_2_fused // 32 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_1_j_1_fused % 8 * 512 + i_2_j_2_fused % 32 * 16 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(3584):
                        for ax0_ax1_fused_0 in range(21):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 2568)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(256):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) // 4096)
                                    v1 = T.axis.spatial(4096, (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) % 4096)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 8, 4, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 8 * 2 + i_2_j_2_fused // 32 + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_1_j_1_fused % 8 * 512 + i_2_j_2_fused % 32 * 16 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 4 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 8 * 2 + i_2_j_2_fused // 32 + ax0)
                            v1 = T.axis.spatial(4096, i_1_j_1_fused % 8 * 512 + i_2_j_2_fused % 32 * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 321, 2, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 8, 32, 8, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[3584, 1, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #7: GFLOPs: 48.1541. Time: 1565740.3970 us. Best GFLOPs: 7849.1588
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #8: GFLOPs: 10428.5406. Time: 7229.8524 us. Best GFLOPs: 10428.5406
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #9: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(6, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(107, 32, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused // 2 * 214 + i_2_j_2_fused // 32 * 107 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_0_j_0_fused % 2 * 2048 + i_2_j_2_fused % 32 * 64 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1792):
                        for ax0_ax1_fused_0 in range(7):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, i_0_j_0_fused // 2 * 214 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(14336, k_0 * 8 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 8)
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 1712)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(256):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(14336, k_0 * 8 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) // 2048)
                                    v1 = T.axis.spatial(4096, i_0_j_0_fused % 2 * 2048 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) % 2048)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 107, 32, 4, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused // 2 * 214 + i_2_j_2_fused // 32 * 107 + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_0_j_0_fused % 2 * 2048 + i_2_j_2_fused % 32 * 64 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 8 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(107, 64):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused // 2 * 214 + i_2_j_2_fused // 32 * 107 + ax0)
                            v1 = T.axis.spatial(4096, i_0_j_0_fused % 2 * 2048 + i_2_j_2_fused % 32 * 64 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[3, 1, 2, 107, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 1, 32, 32, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1792, 2, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #10: GFLOPs: 32.1107. Time: 2348027.5063 us. Best GFLOPs: 10428.5406
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #11: GFLOPs: 16575.1063. Time: 4548.7979 us. Best GFLOPs: 16575.1063
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #12: GFLOPs: 49.3995. Time: 1526266.6013 us. Best GFLOPs: 16575.1063
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #13: GFLOPs: 35.7720. Time: 2107707.5193 us. Best GFLOPs: 16575.1063
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #14: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(512, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(428, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 1, 6, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_2_j_2_fused // 4 * 6 + i_3_init * 6 + i_4_init)
                            v_j = T.axis.spatial(4096, i_0_j_0_fused * 2048 + i_1_j_1_fused * 4 + i_2_j_2_fused % 4 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(7168):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(428, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 1712 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(14336, k_0 * 2 + (ax0_ax1_fused_0 * 1712 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 1284)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(428, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(14336, k_0 * 2 + (ax0_ax1_fused_0 * 3424 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 2048)
                                        v1 = T.axis.spatial(4096, i_0_j_0_fused * 2048 + (ax0_ax1_fused_0 * 3424 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 2048)
                                        T.where((ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 1, 2, 6, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_2_j_2_fused // 4 * 6 + i_3 * 6 + i_4)
                                v_j = T.axis.spatial(4096, i_0_j_0_fused * 2048 + i_1_j_1_fused * 4 + i_2_j_2_fused % 4 + j_3 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(6, 1):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_2_j_2_fused // 4 * 6 + ax0)
                            v1 = T.axis.spatial(4096, i_0_j_0_fused * 2048 + i_1_j_1_fused * 4 + i_2_j_2_fused % 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 107, 1, 6])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 512, 4, 1, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[7168, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 428, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 428, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #15: GFLOPs: 31.5944. Time: 2386395.6703 us. Best GFLOPs: 16575.1063
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #16: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1712, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(192, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 1, 1, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 8 * 3 + i_2_j_2_fused // 64 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_1_j_1_fused % 8 * 512 + i_2_j_2_fused % 64 * 8 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(3584):
                        for ax0_ax1_fused_0 in range(14):
                            for ax0_ax1_fused_1 in T.thread_binding(192, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1) // 4)
                                    v1 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1) % 4)
                                    T.where(ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1 < 2568)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(11):
                            for ax0_ax1_fused_1 in T.thread_binding(192, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 1536 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(4096, (ax0_ax1_fused_0 * 1536 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 4096)
                                        T.where((ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 16384)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 1, 4, 1, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 8 * 3 + i_2_j_2_fused // 64 + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_1_j_1_fused % 8 * 512 + i_2_j_2_fused % 64 * 8 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 4 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 8 * 3 + i_2_j_2_fused // 64 + ax0)
                            v1 = T.axis.spatial(4096, i_1_j_1_fused % 8 * 512 + i_2_j_2_fused % 64 * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 214, 3, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 8, 64, 1, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[3584, 1, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 192], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 192, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #17: GFLOPs: 5860.3864. Time: 12865.5014 us. Best GFLOPs: 16575.1063
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #18: GFLOPs: 26205.9045. Time: 2877.0924 us. Best GFLOPs: 26205.9045
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #19: GFLOPs: 407.1010. Time: 185204.1623 us. Best GFLOPs: 26205.9045
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #20: GFLOPs: 5134.0703. Time: 14685.5817 us. Best GFLOPs: 26205.9045
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #21: GFLOPs: 5493.4227. Time: 13724.9240 us. Best GFLOPs: 26205.9045
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #22: GFLOPs: 32.1685. Time: 2343811.0350 us. Best GFLOPs: 26205.9045
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #23: GFLOPs: 651.2326. Time: 115775.5430 us. Best GFLOPs: 26205.9045
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #24: GFLOPs: 99.7011. Time: 756228.3527 us. Best GFLOPs: 26205.9045
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #25: GFLOPs: 36.3141. Time: 2076239.0950 us. Best GFLOPs: 26205.9045
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #26: GFLOPs: 28810.8003. Time: 2616.9634 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #27: GFLOPs: 79.3878. Time: 949727.9457 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #28: GFLOPs: 3928.1803. Time: 19193.8260 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #29: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(6, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(2, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(428, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 8, 1, 32):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused // 2 * 214 + i_2_j_2_fused // 4 * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_0_j_0_fused % 2 * 2048 + i_1_j_1_fused * 1024 + i_2_j_2_fused % 4 * 256 + j_3_init * 32 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(3584):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(428, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, i_0_j_0_fused // 2 * 214 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(5):
                            for ax0_ax1_fused_1 in T.thread_binding(428, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 1712 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2048)
                                        v1 = T.axis.spatial(4096, i_0_j_0_fused % 2 * 2048 + (ax0_ax1_fused_0 * 1712 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2048)
                                        T.where((ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 8192)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 2, 8, 2, 1, 32):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused // 2 * 214 + i_2_j_2_fused // 4 * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_0_j_0_fused % 2 * 2048 + i_1_j_1_fused * 1024 + i_2_j_2_fused % 4 * 256 + j_3 * 32 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 4 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 256):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused // 2 * 214 + i_2_j_2_fused // 4 * 2 + ax0)
                            v1 = T.axis.spatial(4096, i_0_j_0_fused % 2 * 2048 + i_1_j_1_fused * 1024 + i_2_j_2_fused % 4 * 256 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[3, 1, 107, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 2, 4, 8, 32])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[3584, 2, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 428, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 428, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #30: GFLOPs: 15101.3490. Time: 4992.7201 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #31: GFLOPs: 31.9288. Time: 2361405.7617 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #32: GFLOPs: 32.1328. Time: 2346409.8307 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #33: GFLOPs: 7247.9944. Time: 10402.4375 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #34: GFLOPs: 1373.8840. Time: 54878.5857 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #35: GFLOPs: 2392.9444. Time: 31507.9650 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #36: GFLOPs: 28415.6244. Time: 2653.3574 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #37: GFLOPs: 96.1391. Time: 784247.3957 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #38: GFLOPs: 237.4661. Time: 317505.5337 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #39: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(856, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(96, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 8, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused // 2 * 321 + i_1_j_1_fused // 8 * 3 + i_2_j_2_fused // 32 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_0_j_0_fused % 2 * 2048 + i_1_j_1_fused % 8 * 256 + i_2_j_2_fused % 32 * 8 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(3584):
                        for ax0_ax1_fused_0 in range(7):
                            for ax0_ax1_fused_1 in T.thread_binding(96, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, i_0_j_0_fused // 2 * 321 + (ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 96 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 1284)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(22):
                            for ax0_ax1_fused_1 in T.thread_binding(96, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2048)
                                        v1 = T.axis.spatial(4096, i_0_j_0_fused % 2 * 2048 + (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2048)
                                        T.where((ax0_ax1_fused_0 * 96 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 8192)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 8, 2, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused // 2 * 321 + i_1_j_1_fused // 8 * 3 + i_2_j_2_fused // 32 + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_0_j_0_fused % 2 * 2048 + i_1_j_1_fused % 8 * 256 + i_2_j_2_fused % 32 * 8 + j_3 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 4 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused // 2 * 321 + i_1_j_1_fused // 8 * 3 + i_2_j_2_fused // 32 + ax0)
                            v1 = T.axis.spatial(4096, i_0_j_0_fused % 2 * 2048 + i_1_j_1_fused % 8 * 256 + i_2_j_2_fused % 32 * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 107, 3, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 8, 32, 8, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[3584, 2, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 96, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 96, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #40: GFLOPs: 3611.4032. Time: 20877.4276 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #41: GFLOPs: 10994.9605. Time: 6857.3969 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #42: GFLOPs: 4478.4009. Time: 16835.6540 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #43: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(48, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(214, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 1, 1, 16):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 16 * 214 + i_2_j_2_fused // 2 * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_0_j_0_fused * 512 + i_1_j_1_fused % 16 * 32 + i_2_j_2_fused % 2 * 16 + j_3_init * 16 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(3584):
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(214, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(214, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 1712 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 512)
                                        v1 = T.axis.spatial(4096, i_0_j_0_fused * 512 + (ax0_ax1_fused_0 * 1712 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 512)
                                        T.where((ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 2048)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 1, 4, 1, 16):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 16 * 214 + i_2_j_2_fused // 2 * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_0_j_0_fused * 512 + i_1_j_1_fused % 16 * 32 + i_2_j_2_fused % 2 * 16 + j_3 * 16 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 4 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 16 * 214 + i_2_j_2_fused // 2 * 2 + ax0)
                            v1 = T.axis.spatial(4096, i_0_j_0_fused * 512 + i_1_j_1_fused % 16 * 32 + i_2_j_2_fused % 2 * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 3, 107, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 16, 2, 1, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[3584, 1, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 214, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 214, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #44: GFLOPs: 5577.5839. Time: 13517.8260 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #45: GFLOPs: 31.8366. Time: 2368240.0713 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #46: GFLOPs: 3709.4590. Time: 20325.5538 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #47: GFLOPs: 125.4729. Time: 600901.3670 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #48: GFLOPs: 194.4705. Time: 387703.1250 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #49: GFLOPs: 66.0898. Time: 1140823.6490 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #50: GFLOPs: 123.9240. Time: 608411.9057 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #51: GFLOPs: 28511.1456. Time: 2644.4679 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #52: GFLOPs: 11009.8083. Time: 6848.1491 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #53: GFLOPs: 25957.5655. Time: 2904.6179 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #54: GFLOPs: 125.1974. Time: 602223.3070 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #55: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(428, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(3, 2, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 4 * 6 + i_2_j_2_fused // 32 * 3 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_0_j_0_fused * 512 + i_1_j_1_fused % 4 * 128 + i_2_j_2_fused % 32 * 4 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1792):
                        for ax0_ax1_fused_0 in range(81):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) // 8)
                                    v1 = T.axis.spatial(14336, k_0 * 8 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) % 8)
                                    T.where(ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1 < 5136)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(14336, k_0 * 8 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 512)
                                        v1 = T.axis.spatial(4096, i_0_j_0_fused * 512 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 512)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(8, 3, 2, 1, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 4 * 6 + i_2_j_2_fused // 32 * 3 + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_0_j_0_fused * 512 + i_1_j_1_fused % 4 * 128 + i_2_j_2_fused % 32 * 4 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 8 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(3, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 4 * 6 + i_2_j_2_fused // 32 * 3 + ax0)
                            v1 = T.axis.spatial(4096, i_0_j_0_fused * 512 + i_1_j_1_fused % 4 * 128 + i_2_j_2_fused % 32 * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 107, 2, 3, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 4, 32, 2, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1792, 8, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #56: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(6, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(128, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(214, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 1, 2, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused // 2 * 214 + i_2_j_2_fused // 2 * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(4096, i_0_j_0_fused % 2 * 2048 + i_1_j_1_fused * 16 + i_2_j_2_fused % 2 * 8 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(3584):
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(214, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, i_0_j_0_fused // 2 * 214 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1) // 4)
                                    v1 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1) % 4)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(39):
                            for ax0_ax1_fused_1 in T.thread_binding(214, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1) // 2048)
                                    v1 = T.axis.spatial(4096, i_0_j_0_fused % 2 * 2048 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1) % 2048)
                                    T.where(ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 < 8192)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 1, 4, 2, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused // 2 * 214 + i_2_j_2_fused // 2 * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(4096, i_0_j_0_fused % 2 * 2048 + i_1_j_1_fused * 16 + i_2_j_2_fused % 2 * 8 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 4 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused // 2 * 214 + i_2_j_2_fused // 2 * 2 + ax0)
                            v1 = T.axis.spatial(4096, i_0_j_0_fused % 2 * 2048 + i_1_j_1_fused * 16 + i_2_j_2_fused % 2 * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[3, 1, 107, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 128, 2, 1, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[3584, 1, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 214], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 214], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #57: GFLOPs: 124.5289. Time: 605456.5020 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #58: GFLOPs: 409.5543. Time: 184094.7670 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #59: GFLOPs: 63.3885. Time: 1189440.5110 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #60: GFLOPs: 1985.4860. Time: 37973.9810 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #61: GFLOPs: 2127.6768. Time: 35436.2130 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #62: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(428, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(3, 2, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 4 * 6 + i_2_j_2_fused // 32 * 3 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_0_j_0_fused * 512 + i_1_j_1_fused % 4 * 128 + i_2_j_2_fused % 32 * 4 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1792):
                        for ax0_ax1_fused_0 in range(81):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) // 8)
                                    v1 = T.axis.spatial(14336, k_0 * 8 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) % 8)
                                    T.where(ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1 < 5136)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(14336, k_0 * 8 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 512)
                                        v1 = T.axis.spatial(4096, i_0_j_0_fused * 512 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 512)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(8, 3, 2, 1, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 4 * 6 + i_2_j_2_fused // 32 * 3 + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_0_j_0_fused * 512 + i_1_j_1_fused % 4 * 128 + i_2_j_2_fused % 32 * 4 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 8 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(3, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 4 * 6 + i_2_j_2_fused // 32 * 3 + ax0)
                            v1 = T.axis.spatial(4096, i_0_j_0_fused * 512 + i_1_j_1_fused % 4 * 128 + i_2_j_2_fused % 32 * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 107, 2, 3, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 4, 32, 2, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1792, 8, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #63: GFLOPs: 678.5795. Time: 111109.7717 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #64: GFLOPs: 35.8093. Time: 2105510.5793 us. Best GFLOPs: 28810.8003
2025-10-02 00:47:06 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-02 00:47:06 [INFO] [evolutionary_search.cc:715] Picked top 54 candidate(s) from database
2025-10-02 00:47:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x430c838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x44f7238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x44f7208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x43efed8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4345248)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x44e46b8)]: 449 failure(s)
2025-10-02 00:47:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x430c838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x44f7238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x44f7208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x43efed8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4345248)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x44e46b8)]: 891 failure(s)
2025-10-02 00:47:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x430c838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x44f7238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x44f7208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x43efed8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4345248)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x44e46b8)]: 1342 failure(s)
2025-10-02 00:47:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x430c838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x44f7238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x44f7208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x43efed8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4345248)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x44e46b8)]: 1786 failure(s)
2025-10-02 00:47:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x430c838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x44f7238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x44f7208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x43efed8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4345248)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x44e46b8)]: 2231 failure(s)
2025-10-02 00:47:12 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2025-10-02 00:47:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x430c838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x44f7238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x44f7208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x43efed8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4345248)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x44e46b8)]: 87 failure(s)
2025-10-02 00:47:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x430c838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x44f7238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x44f7208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x43efed8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4345248)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x44e46b8)]: 90 failure(s)
2025-10-02 00:47:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x430c838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x44f7238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x44f7208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x43efed8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4345248)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x44e46b8)]: 89 failure(s)
2025-10-02 00:47:20 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x430c838)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x44f7238)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x44f7208)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x43efed8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4345248)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x44e46b8)]: 74 failure(s)
2025-10-02 00:47:20 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9996  0.9993  0.9993  0.9993  0.9989  0.9975  0.9963  0.9962  0.9953  0.9952  0.9948  0.9927  0.9898  0.9895  0.9885
[17 : 32]:	0.9870  0.9867  0.9862  0.9857  0.9857  0.9846  0.9831  0.9830  0.9826  0.9815  0.9806  0.9789  0.9787  0.9783  0.9772  0.9771
[33 : 48]:	0.9771  0.9756  0.9750  0.9746  0.9745  0.9742  0.9737  0.9732  0.9727  0.9723  0.9718  0.9717  0.9710  0.9707  0.9707  0.9694
[49 : 64]:	0.9693  0.9672  0.9670  0.9668  0.9667  0.9661  0.9650  0.9641  0.9637  0.9628  0.9627  0.9617  0.9611  0.9586  0.9585  0.9584
2025-10-02 00:47:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-02 00:47:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #65: GFLOPs: 4548.5040. Time: 16576.1773 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #66: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(3, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(107, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 64, 1, 64):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused * 321 + i_1_j_1_fused * 107 + i_2_j_2_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, j_3_init * 64 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(7168):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, i_0_j_0_fused * 321 + (ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) // 2)
                                    v1 = T.axis.spatial(14336, k_0 * 2 + (ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) % 2)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(39):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(14336, k_0 * 2 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(4096, (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4096)
                                        T.where((ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 8192)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 64, 1, 1, 64):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused * 321 + i_1_j_1_fused * 107 + i_2_j_2_fused + i_3 + i_4)
                                v_j = T.axis.spatial(4096, j_3 * 64 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 4096):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused * 321 + i_1_j_1_fused * 107 + i_2_j_2_fused + ax0)
                            v1 = T.axis.spatial(4096, ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 3, 107, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 1, 64, 64])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[7168, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 107], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 107, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #67: GFLOPs: 3052.5667. Time: 24699.4796 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #68: GFLOPs: 768.6853. Time: 98085.4083 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #69: GFLOPs: 900.7138. Time: 83707.8397 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #70: GFLOPs: 14099.9465. Time: 5347.3117 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #71: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(321, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(1024, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 2, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_2_j_2_fused * 4 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(3584):
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(1024, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1) // 4)
                                    v1 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1) % 4)
                                    T.where(ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 < 2568)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(1024, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1) // 4096)
                                    v1 = T.axis.spatial(4096, (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1) % 4096)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 2, 2, 2, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_2_j_2_fused * 4 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 4 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused * 2 + ax0)
                            v1 = T.axis.spatial(4096, i_2_j_2_fused * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 321, 1, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 1024, 2, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[3584, 2, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 1024], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 1024], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #72: GFLOPs: 125.5269. Time: 600642.4153 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #73: GFLOPs: 90.3049. Time: 834913.8997 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #74: GFLOPs: 5422.2240. Time: 13905.1446 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #75: GFLOPs: 484.5252. Time: 155609.6903 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #76: GFLOPs: 155.5901. Time: 484586.0187 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #77: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(428, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 1, 3, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 3 + i_3_init * 3 + i_4_init)
                            v_j = T.axis.spatial(4096, i_0_j_0_fused * 512 + i_1_j_1_fused % 2 * 256 + i_2_j_2_fused * 4 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1792):
                        for ax0_ax1_fused_0 in range(41):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(14336, k_0 * 8 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 8)
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 5136)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(32):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(14336, k_0 * 8 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 512)
                                        v1 = T.axis.spatial(4096, i_0_j_0_fused * 512 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 512)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(8, 1, 1, 1, 3, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 3 + i_3 * 3 + i_4)
                                v_j = T.axis.spatial(4096, i_0_j_0_fused * 512 + i_1_j_1_fused % 2 * 256 + i_2_j_2_fused * 4 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 8 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(3, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 2 * 3 + ax0)
                            v1 = T.axis.spatial(4096, i_0_j_0_fused * 512 + i_1_j_1_fused % 2 * 256 + i_2_j_2_fused * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 214, 1, 1, 3])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 2, 64, 1, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1792, 8, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #78: GFLOPs: 2802.8707. Time: 26899.8528 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #79: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(856, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(512, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(3, 2, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 8 * 6 + i_2_j_2_fused // 256 * 3 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_1_j_1_fused % 8 * 512 + i_2_j_2_fused % 256 * 2 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(3584):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(512, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1) // 4)
                                    v1 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1) % 4)
                                    T.where(ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 < 2568)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(512, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(4096, (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 3, 2, 2, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 8 * 6 + i_2_j_2_fused // 256 * 3 + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_1_j_1_fused % 8 * 512 + i_2_j_2_fused % 256 * 2 + j_3 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 4 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(3, 2):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 8 * 6 + i_2_j_2_fused // 256 * 3 + ax0)
                            v1 = T.axis.spatial(4096, i_1_j_1_fused % 8 * 512 + i_2_j_2_fused % 256 * 2 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 107, 2, 3, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 8, 256, 2, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[3584, 2, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 512], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 512, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #80: GFLOPs: 3129.7858. Time: 24090.0862 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #81: GFLOPs: 47.9849. Time: 1571259.7653 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #82: GFLOPs: 987.4635. Time: 76354.0240 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #83: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(64, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(107, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 128, 3, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 32 * 321 + i_2_j_2_fused * 3 + i_3_init * 3 + i_4_init)
                            v_j = T.axis.spatial(4096, i_1_j_1_fused % 32 * 128 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(3584):
                        for ax0_ax1_fused_0 in range(12):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(154):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) // 4096)
                                    v1 = T.axis.spatial(4096, (ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) % 4096)
                                    T.where(ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1 < 16384)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 128, 4, 3, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 32 * 321 + i_2_j_2_fused * 3 + i_3 * 3 + i_4)
                                v_j = T.axis.spatial(4096, i_1_j_1_fused % 32 * 128 + j_3 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 4 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(3, 128):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 32 * 321 + i_2_j_2_fused * 3 + ax0)
                            v1 = T.axis.spatial(4096, i_1_j_1_fused % 32 * 128 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 2, 107, 1, 3])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 32, 1, 128, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[3584, 1, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 107, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 107], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #84: GFLOPs: 773.4223. Time: 97484.6597 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #85: GFLOPs: 1625.1844. Time: 46392.7713 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #86: GFLOPs: 10285.6576. Time: 7330.2857 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #87: GFLOPs: 10896.4406. Time: 6919.3979 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #88: GFLOPs: 4787.4767. Time: 15748.7574 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #89: GFLOPs: 23730.5489. Time: 3177.2046 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #90: GFLOPs: 284.3498. Time: 265155.1717 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #91: GFLOPs: 23482.7467. Time: 3210.7321 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #92: GFLOPs: 3009.4292. Time: 25053.5246 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #93: GFLOPs: 1889.3073. Time: 39907.1170 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #94: GFLOPs: 738.8329. Time: 102048.5330 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #95: GFLOPs: 270.5027. Time: 278728.5357 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #96: GFLOPs: 140.1833. Time: 537844.5230 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #97: GFLOPs: 236.9877. Time: 318146.5657 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #98: GFLOPs: 432.6656. Time: 174261.1490 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #99: GFLOPs: 123.2739. Time: 611620.4427 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #100: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(107, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 1, 6, 32):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused * 6 + i_3_init * 6 + i_4_init)
                            v_j = T.axis.spatial(4096, i_2_j_2_fused * 32 + j_3_init * 32 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(7168):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(14336, k_0 * 2 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 1284)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(32):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(14336, k_0 * 2 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(4096, (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 1, 1, 6, 32):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused * 6 + i_3 * 6 + i_4)
                                v_j = T.axis.spatial(4096, i_2_j_2_fused * 32 + j_3 * 32 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(6, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused * 6 + ax0)
                            v1 = T.axis.spatial(4096, i_2_j_2_fused * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 107, 1, 1, 6])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 128, 1, 32])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[7168, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 128, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #101: GFLOPs: 49.3566. Time: 1527592.1223 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #102: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(321, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(1024, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 2, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused * 321 + i_1_j_1_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_2_j_2_fused * 4 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(3584):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(1024, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, i_0_j_0_fused * 321 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1) // 4)
                                    v1 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1) % 4)
                                    T.where(ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 < 1284)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(1024, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1) // 4096)
                                    v1 = T.axis.spatial(4096, (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1) % 4096)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 2, 2, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused * 321 + i_1_j_1_fused + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_2_j_2_fused * 4 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 4 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused * 321 + i_1_j_1_fused + ax0)
                            v1 = T.axis.spatial(4096, i_2_j_2_fused * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 321, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 1024, 2, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[3584, 2, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 1024], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 1024], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #103: GFLOPs: 5398.7659. Time: 13965.5637 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #104: GFLOPs: 330.8644. Time: 227878.2550 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #105: GFLOPs: 31.8277. Time: 2368909.0167 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #106: GFLOPs: 99.5026. Time: 757737.3047 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #107: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(1712, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 1, 6, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 16 * 6 + i_3_init * 6 + i_4_init)
                            v_j = T.axis.spatial(4096, i_0_j_0_fused * 2048 + i_1_j_1_fused % 16 * 128 + i_2_j_2_fused + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(7168):
                        for ax0_ax1_fused_0 in range(11):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) // 2)
                                    v1 = T.axis.spatial(14336, k_0 * 2 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) % 2)
                                    T.where(ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 < 1284)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(14336, k_0 * 2 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2048)
                                        v1 = T.axis.spatial(4096, i_0_j_0_fused * 2048 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2048)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 1, 1, 6, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 16 * 6 + i_3 * 6 + i_4)
                                v_j = T.axis.spatial(4096, i_0_j_0_fused * 2048 + i_1_j_1_fused % 16 * 128 + i_2_j_2_fused + j_3 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(6, 1):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 16 * 6 + ax0)
                            v1 = T.axis.spatial(4096, i_0_j_0_fused * 2048 + i_1_j_1_fused % 16 * 128 + i_2_j_2_fused + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 107, 1, 1, 6])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 16, 128, 1, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[7168, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 128, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #108: GFLOPs: 11212.8116. Time: 6724.1662 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #109: GFLOPs: 9920.5956. Time: 7600.0284 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #110: GFLOPs: 1684.4134. Time: 44761.4643 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #111: GFLOPs: 7476.3324. Time: 10084.7320 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #112: GFLOPs: 60.7880. Time: 1240324.5440 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #113: GFLOPs: 10966.8914. Time: 6874.9481 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #114: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(321, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(1024, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 2, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused * 321 + i_1_j_1_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_2_j_2_fused * 4 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(3584):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(1024, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, i_0_j_0_fused * 321 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1) // 4)
                                    v1 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1) % 4)
                                    T.where(ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 < 1284)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(1024, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(14336, k_0 * 4 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1) // 4096)
                                    v1 = T.axis.spatial(4096, (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1) % 4096)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 2, 2, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused * 321 + i_1_j_1_fused + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_2_j_2_fused * 4 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 4 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused * 321 + i_1_j_1_fused + ax0)
                            v1 = T.axis.spatial(4096, i_2_j_2_fused * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 321, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 1024, 2, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[3584, 2, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 1024], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 1024], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #115: GFLOPs: 2400.9137. Time: 31403.3813 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #116: GFLOPs: 71.3117. Time: 1057284.8307 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #117: GFLOPs: 785.3635. Time: 96002.4413 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #118: GFLOPs: 25982.8984. Time: 2901.7859 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #119: GFLOPs: 127.9515. Time: 589260.6607 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #120: GFLOPs: 12108.5653. Time: 6226.7335 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #121: GFLOPs: 20607.4187. Time: 3658.7216 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #122: GFLOPs: 49.2173. Time: 1531917.4803 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #123: GFLOPs: 17797.2879. Time: 4236.4212 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #124: GFLOPs: 1000.4063. Time: 75366.1853 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #125: GFLOPs: 332.9980. Time: 226418.2330 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #126: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 14336), "float16"), B: T.Buffer((14336, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 14336), "float16", scope="shared")
        B_shared = T.alloc_buffer((14336, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(16, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(384, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(107, 1, 1, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_2_j_2_fused // 64 * 107 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_1_j_1_fused * 256 + i_2_j_2_fused % 64 * 4 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(7168):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(384, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 1536 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(14336, k_0 * 2 + (ax0_ax1_fused_0 * 1536 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 1284)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(384, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(14336, k_0 * 2 + (ax0_ax1_fused_0 * 3072 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(4096, (ax0_ax1_fused_0 * 3072 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 4096)
                                        T.where((ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 8192)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 107, 1, 2, 1, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_2_j_2_fused // 64 * 107 + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_1_j_1_fused * 256 + i_2_j_2_fused % 64 * 4 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(14336, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(107, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_2_j_2_fused // 64 * 107 + ax0)
                            v1 = T.axis.spatial(4096, i_1_j_1_fused * 256 + i_2_j_2_fused % 64 * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 6, 107, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 16, 64, 1, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[7168, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 384, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 384, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #127: GFLOPs: 4609.3191. Time: 16357.4720 us. Best GFLOPs: 28810.8003
2025-10-02 00:56:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #128: GFLOPs: 1741.7248. Time: 43288.5893 us. Best GFLOPs: 28810.8003
