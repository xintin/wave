2025-10-02 02:52:56 [INFO] [task_scheduler.cc:160] Initializing Task #0: "mm"
2025-10-02 02:52:56 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((641, 2880), "float16"), B: T.Buffer((2880, 4096), "float16"), C: T.Buffer((641, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        for i, j, k in T.grid(641, 4096, 2880):
            with T.block("C"):
                v_i, v_j, v_k = T.axis.remap("SSR", [i, j, k])
                T.reads(A[v_i, v_k], B[v_k, v_j])
                T.writes(C[v_i, v_j])
                with T.init():
                    C[v_i, v_j] = T.float16(0.0)
                C[v_i, v_j] = C[v_i, v_j] + A[v_i, v_k] * B[v_k, v_j]
2025-10-02 02:52:56 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2025-10-02 02:52:56 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((641, 2880), "float16"), B: T.Buffer((2880, 4096), "float16"), C: T.Buffer((641, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            C_local = T.alloc_buffer((641, 4096), "float16", scope="local")
            A_shared = T.alloc_buffer((641, 2880), "float16", scope="shared")
            B_shared = T.alloc_buffer((2880, 4096), "float16", scope="shared")
            for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x"):
                for i_1_j_1_fused in T.thread_binding(64, thread="vthread.x"):
                    for i_2_j_2_fused in T.thread_binding(8, thread="threadIdx.x"):
                        for k_0 in range(10):
                            for ax0_ax1_fused in range(184608):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(641, ax0_ax1_fused // 288)
                                    v1 = T.axis.spatial(2880, k_0 * 288 + ax0_ax1_fused % 288)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 8})
                                    A_shared[v0, v1] = A[v0, v1]
                            for ax0_ax1_fused in range(589824):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(2880, k_0 * 288 + ax0_ax1_fused // 2048)
                                    v1 = T.axis.spatial(4096, i_0_j_0_fused * 2048 + ax0_ax1_fused % 2048)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 8})
                                    B_shared[v0, v1] = B[v0, v1]
                            for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(96, 641, 2, 3, 1, 2):
                                with T.block("C"):
                                    v_i = T.axis.spatial(641, i_3 + i_4)
                                    v_j = T.axis.spatial(4096, i_0_j_0_fused * 2048 + i_1_j_1_fused * 32 + i_2_j_2_fused * 4 + j_3 * 2 + j_4)
                                    v_k = T.axis.reduce(2880, k_0 * 288 + k_1 * 3 + k_2)
                                    T.reads(A_shared[v_i, v_k], B_shared[v_k, v_j])
                                    T.writes(C_local[v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        C_local[v_i, v_j] = T.float16(0.0)
                                    C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                        for ax0, ax1 in T.grid(641, 4):
                            with T.block("C_local"):
                                v0 = T.axis.spatial(641, ax0)
                                v1 = T.axis.spatial(4096, i_0_j_0_fused * 2048 + i_1_j_1_fused * 32 + i_2_j_2_fused * 4 + ax1)
                                T.reads(C_local[v0, v1])
                                T.writes(C[v0, v1])
                                C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 1, 641, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 64, 8, 2, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[10, 96, 3])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
2025-10-02 02:52:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-02 02:52:56 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2025-10-02 02:52:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 506 failure(s)
2025-10-02 02:52:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 1010 failure(s)
2025-10-02 02:52:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 1514 failure(s)
2025-10-02 02:53:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 2014 failure(s)
2025-10-02 02:53:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 2522 failure(s)
2025-10-02 02:53:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 3029 failure(s)
2025-10-02 02:53:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 3535 failure(s)
2025-10-02 02:53:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 4038 failure(s)
2025-10-02 02:53:04 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2025-10-02 02:53:06 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 166 failure(s)
2025-10-02 02:53:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 158 failure(s)
2025-10-02 02:53:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 169 failure(s)
2025-10-02 02:53:11 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 145 failure(s)
2025-10-02 02:53:11 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9989  0.9983  0.9978  0.9972  0.9963  0.9960  0.9955  0.9951  0.9951  0.9945  0.9943  0.9943  0.9939  0.9936  0.9925
[17 : 32]:	0.9919  0.9899  0.9899  0.9899  0.9886  0.9884  0.9883  0.9873  0.9864  0.9854  0.9849  0.9846  0.9841  0.9833  0.9831  0.9813
[33 : 48]:	0.9811  0.9810  0.9790  0.9767  0.9759  0.9749  0.9740  0.9739  0.9725  0.9725  0.9718  0.9714  0.9711  0.9707  0.9701  0.9686
[49 : 64]:	0.9672  0.9629  0.9627  0.9623  0.9620  0.9590  0.9576  0.9556  0.9549  0.9542  0.9539  0.9538  0.9536  0.9525  0.9517  0.9513
2025-10-02 02:53:11 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-02 02:53:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #1: GFLOPs: 570.7497. Time: 26496.8832 us. Best GFLOPs: 570.7497
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #2: GFLOPs: 32.9645. Time: 458768.6360 us. Best GFLOPs: 570.7497
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #3: GFLOPs: 14.0593. Time: 1075666.5037 us. Best GFLOPs: 570.7497
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #4: GFLOPs: 253.3907. Time: 59682.8917 us. Best GFLOPs: 570.7497
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #5: GFLOPs: 9120.4262. Time: 1658.1558 us. Best GFLOPs: 9120.4262
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #6: GFLOPs: 125.7543. Time: 120258.9823 us. Best GFLOPs: 9120.4262
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #7: GFLOPs: 10118.5605. Time: 1494.5888 us. Best GFLOPs: 10118.5605
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #8: GFLOPs: 8676.4535. Time: 1743.0033 us. Best GFLOPs: 10118.5605
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #9: GFLOPs: 4486.2993. Time: 3370.9493 us. Best GFLOPs: 10118.5605
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #10: GFLOPs: 14451.3082. Time: 1046.4857 us. Best GFLOPs: 14451.3082
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #11: GFLOPs: 15.7763. Time: 958592.8547 us. Best GFLOPs: 14451.3082
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #12: GFLOPs: 11034.6442. Time: 1370.5097 us. Best GFLOPs: 14451.3082
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #13: GFLOPs: 569.6318. Time: 26548.8815 us. Best GFLOPs: 14451.3082
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #14: GFLOPs: 125.0786. Time: 120908.6913 us. Best GFLOPs: 14451.3082
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #15: GFLOPs: 46.8445. Time: 322835.8763 us. Best GFLOPs: 14451.3082
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #16: GFLOPs: 18065.4719. Time: 837.1266 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #17: GFLOPs: 3271.2168. Time: 4623.0770 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #18: GFLOPs: 6072.5662. Time: 2490.3948 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #19: GFLOPs: 260.1768. Time: 58126.1900 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #20: GFLOPs: 9881.6947. Time: 1530.4143 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #21: GFLOPs: 10619.3217. Time: 1424.1105 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #22: GFLOPs: 5291.4694. Time: 2858.0128 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #23: GFLOPs: 46.8664. Time: 322685.3637 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #24: GFLOPs: 6512.8746. Time: 2322.0296 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #25: GFLOPs: 9993.2039. Time: 1513.3372 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #26: GFLOPs: 2446.4924. Time: 6181.5387 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #27: GFLOPs: 32.1380. Time: 470567.2607 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #28: GFLOPs: 69.8709. Time: 216443.1353 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #29: GFLOPs: 107.7270. Time: 140383.4330 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #30: GFLOPs: 443.3492. Time: 34111.0077 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #31: GFLOPs: 9980.5486. Time: 1515.2561 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #32: GFLOPs: 47.0299. Time: 321563.0900 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #33: GFLOPs: 123.8661. Time: 122092.2543 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #34: GFLOPs: 4315.8201. Time: 3504.1051 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #35: GFLOPs: 4879.6164. Time: 3099.2369 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #36: GFLOPs: 212.3667. Time: 71212.1530 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #37: GFLOPs: 601.2940. Time: 25150.9035 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #38: GFLOPs: 32.7179. Time: 462226.8880 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #39: GFLOPs: 65.2215. Time: 231872.5583 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #40: GFLOPs: 9096.3341. Time: 1662.5475 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #41: GFLOPs: 1642.5658. Time: 9206.9903 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #42: GFLOPs: 15.8024. Time: 957011.6373 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #43: GFLOPs: 847.7211. Time: 17839.6962 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #44: GFLOPs: 6733.7822. Time: 2245.8534 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #45: GFLOPs: 8639.2065. Time: 1750.5181 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #46: GFLOPs: 10.2717. Time: 1472310.7093 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #47: GFLOPs: 60.4840. Time: 250034.4033 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #48: GFLOPs: 9120.3802. Time: 1658.1641 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #49: GFLOPs: 15127.7900. Time: 999.6891 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #50: GFLOPs: 4484.6040. Time: 3372.2235 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #51: GFLOPs: 11.9917. Time: 1261132.6497 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #52: GFLOPs: 61.1725. Time: 247220.4180 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #53: GFLOPs: 30.2945. Time: 499201.9857 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #54: GFLOPs: 475.9447. Time: 31774.8832 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #55: GFLOPs: 5960.2878. Time: 2537.3082 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #56: GFLOPs: 3271.5827. Time: 4622.5600 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #57: GFLOPs: 10.3330. Time: 1463568.5220 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #58: GFLOPs: 381.3249. Time: 39659.3270 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #59: GFLOPs: 11.8081. Time: 1280737.4673 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #60: GFLOPs: 522.8426. Time: 28924.7398 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #61: GFLOPs: 266.9517. Time: 56651.0263 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #62: GFLOPs: 38.1460. Time: 396452.8400 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #63: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((641, 2880), "float16"), B: T.Buffer((2880, 4096), "float16"), C: T.Buffer((641, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((641, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((641, 2880), "float16", scope="shared")
        B_shared = T.alloc_buffer((2880, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(1282, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(256, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 1, 1, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(641, i_1_j_1_fused // 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 8 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(960):
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(641, (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1) // 3)
                                    v1 = T.axis.spatial(2880, k_0 * 3 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1) % 3)
                                    T.where(ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 < 1923)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(2880, k_0 * 3 + (ax0_ax1_fused_0 * 2048 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(4096, (ax0_ax1_fused_0 * 2048 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(3, 1, 1, 1, 1, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(641, i_1_j_1_fused // 2 + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 8 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(2880, k_0 * 3 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(641, i_1_j_1_fused // 2 + ax0)
                            v1 = T.axis.spatial(4096, i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 641, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 2, 256, 1, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[960, 3, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 256], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 256, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 02:57:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #64: GFLOPs: 57.1906. Time: 264432.9223 us. Best GFLOPs: 18065.4719
2025-10-02 02:57:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-02 02:57:03 [INFO] [evolutionary_search.cc:715] Picked top 63 candidate(s) from database
2025-10-02 02:57:04 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 439 failure(s)
2025-10-02 02:57:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 879 failure(s)
2025-10-02 02:57:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 1325 failure(s)
2025-10-02 02:57:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 1763 failure(s)
2025-10-02 02:57:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 2204 failure(s)
2025-10-02 02:57:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 2649 failure(s)
2025-10-02 02:57:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 3090 failure(s)
2025-10-02 02:57:09 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2025-10-02 02:57:11 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 152 failure(s)
2025-10-02 02:57:13 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 145 failure(s)
2025-10-02 02:57:15 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 161 failure(s)
2025-10-02 02:57:17 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f37dde8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f4a6f78)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f4a6f48)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f366378)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f321268)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f49be18)]: 165 failure(s)
2025-10-02 02:57:17 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9969  0.9958  0.9942  0.9938  0.9924  0.9920  0.9914  0.9900  0.9896  0.9895  0.9889  0.9886  0.9870  0.9864  0.9850
[17 : 32]:	0.9848  0.9846  0.9845  0.9842  0.9837  0.9837  0.9835  0.9834  0.9830  0.9824  0.9810  0.9806  0.9799  0.9798  0.9792  0.9788
[33 : 48]:	0.9780  0.9770  0.9761  0.9741  0.9731  0.9720  0.9715  0.9712  0.9710  0.9710  0.9700  0.9700  0.9692  0.9685  0.9685  0.9676
[49 : 64]:	0.9668  0.9630  0.9626  0.9622  0.9622  0.9617  0.9615  0.9602  0.9598  0.9594  0.9593  0.9593  0.9588  0.9583  0.9566  0.9560
2025-10-02 02:57:17 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-02 02:57:17 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #65: GFLOPs: 49.7030. Time: 304268.9003 us. Best GFLOPs: 18065.4719
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #66: GFLOPs: 9910.9934. Time: 1525.8902 us. Best GFLOPs: 18065.4719
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #67: GFLOPs: 21.8653. Time: 691648.6000 us. Best GFLOPs: 18065.4719
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #68: GFLOPs: 60.7995. Time: 248736.9587 us. Best GFLOPs: 18065.4719
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #69: GFLOPs: 4876.2957. Time: 3101.3475 us. Best GFLOPs: 18065.4719
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #70: GFLOPs: 8875.2942. Time: 1703.9534 us. Best GFLOPs: 18065.4719
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #71: GFLOPs: 4929.0256. Time: 3068.1698 us. Best GFLOPs: 18065.4719
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #72: GFLOPs: 10606.2188. Time: 1425.8698 us. Best GFLOPs: 18065.4719
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #73: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((641, 2880), "float16"), B: T.Buffer((2880, 4096), "float16"), C: T.Buffer((641, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((641, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((641, 2880), "float16", scope="shared")
        B_shared = T.alloc_buffer((2880, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(32, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(641, 1, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(641, i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_1_j_1_fused * 128 + i_2_j_2_fused + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2880):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(641, ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1)
                                    v1 = T.axis.spatial(2880, k_0)
                                    T.where(ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 < 641)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(2880, k_0)
                                        v1 = T.axis.spatial(4096, ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 641, 1, 1, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(641, i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_1_j_1_fused * 128 + i_2_j_2_fused + j_3 + j_4)
                                v_k = T.axis.reduce(2880, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(641, 1):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(641, ax0)
                            v1 = T.axis.spatial(4096, i_1_j_1_fused * 128 + i_2_j_2_fused + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 1, 641, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 32, 128, 1, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2880, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 128, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #74: GFLOPs: 11.7135. Time: 1291084.3097 us. Best GFLOPs: 18065.4719
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #75: GFLOPs: 25.2614. Time: 598664.3470 us. Best GFLOPs: 18065.4719
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #76: GFLOPs: 771.4253. Time: 19604.0852 us. Best GFLOPs: 18065.4719
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #77: GFLOPs: 354.2582. Time: 42689.4480 us. Best GFLOPs: 18065.4719
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #78: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((641, 2880), "float16"), B: T.Buffer((2880, 4096), "float16"), C: T.Buffer((641, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((641, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((641, 2880), "float16", scope="shared")
        B_shared = T.alloc_buffer((2880, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1282, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 4, 1, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(641, i_1_j_1_fused // 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 32 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2880):
                        for ax0_ax1_fused_0 in range(11):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(641, ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1)
                                    v1 = T.axis.spatial(2880, k_0)
                                    T.where(ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1 < 641)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(32):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(2880, k_0)
                                        v1 = T.axis.spatial(4096, ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 4, 1, 1, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(641, i_1_j_1_fused // 2 + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 32 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(2880, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(641, i_1_j_1_fused // 2 + ax0)
                            v1 = T.axis.spatial(4096, i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 641, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 2, 64, 4, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2880, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 64, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #79: GFLOPs: 11735.5650. Time: 1288.6544 us. Best GFLOPs: 18065.4719
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #80: GFLOPs: 38.5930. Time: 391860.6770 us. Best GFLOPs: 18065.4719
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #81: GFLOPs: 4561.7756. Time: 3315.1757 us. Best GFLOPs: 18065.4719
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #82: GFLOPs: 46.7858. Time: 323241.2717 us. Best GFLOPs: 18065.4719
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #83: GFLOPs: 7015.5314. Time: 2155.6581 us. Best GFLOPs: 18065.4719
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #84: GFLOPs: 26756.2152. Time: 565.2177 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #85: GFLOPs: 17625.0373. Time: 858.0457 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #86: GFLOPs: 251.3104. Time: 60176.9253 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #87: GFLOPs: 16.7792. Time: 901299.1533 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #88: GFLOPs: 9322.4982. Time: 1622.2140 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #89: GFLOPs: 100.1893. Time: 150945.1700 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #90: GFLOPs: 15526.9070. Time: 973.9923 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #91: GFLOPs: 123.9281. Time: 122031.0973 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #92: GFLOPs: 49.0903. Time: 308066.5690 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #93: GFLOPs: 4908.6166. Time: 3080.9266 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #94: GFLOPs: 1214.1387. Time: 12455.8156 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #95: GFLOPs: 4506.7756. Time: 3355.6335 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #96: GFLOPs: 11015.8710. Time: 1372.8454 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #97: GFLOPs: 1502.7315. Time: 10063.7321 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #98: GFLOPs: 9102.3293. Time: 1661.4525 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #99: GFLOPs: 4573.7008. Time: 3306.5318 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #100: GFLOPs: 299.4715. Time: 50499.2573 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #101: GFLOPs: 16411.3450. Time: 921.5020 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #102: GFLOPs: 1620.6876. Time: 9331.2786 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #103: GFLOPs: 11851.0784. Time: 1276.0938 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #104: GFLOPs: 161.5817. Time: 93594.0653 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #105: GFLOPs: 60.7589. Time: 248903.1980 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #106: GFLOPs: 125.2962. Time: 120698.7303 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #107: GFLOPs: 14628.5235. Time: 1033.8082 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #108: GFLOPs: 30.5978. Time: 494254.3130 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #109: GFLOPs: 5136.0699. Time: 2944.4863 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #110: GFLOPs: 8367.9633. Time: 1807.2602 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #111: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((641, 2880), "float16"), B: T.Buffer((2880, 4096), "float16"), C: T.Buffer((641, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((641, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((641, 2880), "float16", scope="shared")
        B_shared = T.alloc_buffer((2880, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(641, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 8, 1, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(641, i_1_j_1_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_2_j_2_fused * 64 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(720):
                        for ax0_ax1_fused_0 in range(21):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(641, (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(2880, k_0 * 4 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 2564)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(128):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(2880, k_0 * 4 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(4096, (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 8, 4, 1, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(641, i_1_j_1_fused + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_2_j_2_fused * 64 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(2880, k_0 * 4 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 64):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(641, i_1_j_1_fused + ax0)
                            v1 = T.axis.spatial(4096, i_2_j_2_fused * 64 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 641, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 64, 8, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[720, 1, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #112: GFLOPs: 13697.6308. Time: 1104.0659 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #113: GFLOPs: 10332.6829. Time: 1463.6167 us. Best GFLOPs: 26756.2152
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #114: GFLOPs: 27818.8723. Time: 543.6269 us. Best GFLOPs: 27818.8723
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #115: GFLOPs: 1770.7259. Time: 8540.6144 us. Best GFLOPs: 27818.8723
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #116: GFLOPs: 640.0621. Time: 23627.5328 us. Best GFLOPs: 27818.8723
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #117: GFLOPs: 7059.5140. Time: 2142.2278 us. Best GFLOPs: 27818.8723
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #118: GFLOPs: 6178.3614. Time: 2447.7505 us. Best GFLOPs: 27818.8723
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #119: GFLOPs: 25038.8075. Time: 603.9859 us. Best GFLOPs: 27818.8723
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #120: GFLOPs: 5069.4254. Time: 2983.1956 us. Best GFLOPs: 27818.8723
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #121: GFLOPs: 2291.5185. Time: 6599.5922 us. Best GFLOPs: 27818.8723
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #122: GFLOPs: 11.5763. Time: 1306385.9047 us. Best GFLOPs: 27818.8723
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #123: GFLOPs: 1747.5284. Time: 8653.9866 us. Best GFLOPs: 27818.8723
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #124: GFLOPs: 10034.9663. Time: 1507.0392 us. Best GFLOPs: 27818.8723
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #125: GFLOPs: 16.7687. Time: 901862.6300 us. Best GFLOPs: 27818.8723
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #126: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((641, 2880), "float16"), B: T.Buffer((2880, 4096), "float16"), C: T.Buffer((641, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((641, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((641, 2880), "float16", scope="shared")
        B_shared = T.alloc_buffer((2880, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1282, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 1, 1, 32):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(641, i_1_j_1_fused // 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 32 + j_3_init * 32 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1440):
                        for ax0_ax1_fused_0 in range(11):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(641, (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(2880, k_0 * 2 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 1282)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(32):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(2880, k_0 * 2 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(4096, (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 1, 1, 1, 32):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(641, i_1_j_1_fused // 2 + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 32 + j_3 * 32 + j_4)
                                v_k = T.axis.reduce(2880, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(641, i_1_j_1_fused // 2 + ax0)
                            v1 = T.axis.spatial(4096, i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 641, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 2, 64, 1, 32])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1440, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #127: GFLOPs: 326.8765. Time: 46265.4467 us. Best GFLOPs: 27818.8723
2025-10-02 03:00:48 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #128: GFLOPs: 42.5525. Time: 355398.1117 us. Best GFLOPs: 27818.8723
