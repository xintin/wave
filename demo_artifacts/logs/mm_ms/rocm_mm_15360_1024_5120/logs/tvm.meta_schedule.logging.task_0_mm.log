2025-10-01 11:58:40 [INFO] [task_scheduler.cc:160] Initializing Task #0: "mm"
2025-10-01 11:58:40 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        for i, j, k in T.grid(15360, 1024, 5120):
            with T.block("C"):
                v_i, v_j, v_k = T.axis.remap("SSR", [i, j, k])
                T.reads(A[v_i, v_k], B[v_k, v_j])
                T.writes(C[v_i, v_j])
                with T.init():
                    C[v_i, v_j] = T.float16(0.0)
                C[v_i, v_j] = C[v_i, v_j] + A[v_i, v_k] * B[v_k, v_j]
2025-10-01 11:58:40 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2025-10-01 11:58:40 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 512})
            C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
            A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
            B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
            for i_0_j_0_fused in T.thread_binding(256, thread="blockIdx.x"):
                for i_1_j_1_fused in T.thread_binding(8, thread="vthread.x"):
                    for i_2_j_2_fused in T.thread_binding(2, thread="threadIdx.x"):
                        for k_0 in range(4):
                            for ax0_ax1_fused in range(76800):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(15360, i_0_j_0_fused * 60 + ax0_ax1_fused // 1280)
                                    v1 = T.axis.spatial(5120, k_0 * 1280 + ax0_ax1_fused % 1280)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 8})
                                    A_shared[v0, v1] = A[v0, v1]
                            for ax0_ax1_fused in range(1310720):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0 * 1280 + ax0_ax1_fused // 1024)
                                    v1 = T.axis.spatial(1024, ax0_ax1_fused % 1024)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    B_shared[v0, v1] = B[v0, v1]
                            for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(80, 3, 128, 16, 10, 1):
                                with T.block("C"):
                                    v_i = T.axis.spatial(15360, i_0_j_0_fused * 60 + i_1_j_1_fused // 4 * 30 + i_3 * 10 + i_4)
                                    v_j = T.axis.spatial(1024, i_1_j_1_fused % 4 * 256 + i_2_j_2_fused * 128 + j_3 + j_4)
                                    v_k = T.axis.reduce(5120, k_0 * 1280 + k_1 * 16 + k_2)
                                    T.reads(A_shared[v_i, v_k], B_shared[v_k, v_j])
                                    T.writes(C_local[v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        C_local[v_i, v_j] = T.float16(0.0)
                                    C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                        for ax0, ax1 in T.grid(30, 128):
                            with T.block("C_local"):
                                v0 = T.axis.spatial(15360, i_0_j_0_fused * 60 + i_1_j_1_fused // 4 * 30 + ax0)
                                v1 = T.axis.spatial(1024, i_1_j_1_fused % 4 * 256 + i_2_j_2_fused * 128 + ax1)
                                T.reads(C_local[v0, v1])
                                T.writes(C[v0, v1])
                                C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[256, 2, 1, 3, 10])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 4, 2, 128, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4, 80, 16])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
2025-10-01 11:58:40 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-01 11:58:40 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2025-10-01 11:58:41 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 499 failure(s)
2025-10-01 11:58:43 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 1001 failure(s)
2025-10-01 11:58:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 1495 failure(s)
2025-10-01 11:58:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 1993 failure(s)
2025-10-01 11:58:45 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2025-10-01 11:58:47 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 128 failure(s)
2025-10-01 11:58:50 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 96 failure(s)
2025-10-01 11:58:52 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 97 failure(s)
2025-10-01 11:58:54 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 93 failure(s)
2025-10-01 11:58:54 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9997  0.9996  0.9994  0.9985  0.9983  0.9981  0.9974  0.9972  0.9954  0.9949  0.9942  0.9916  0.9911  0.9899  0.9895
[17 : 32]:	0.9894  0.9893  0.9892  0.9888  0.9878  0.9872  0.9869  0.9864  0.9860  0.9854  0.9853  0.9844  0.9844  0.9838  0.9834  0.9820
[33 : 48]:	0.9809  0.9807  0.9800  0.9797  0.9795  0.9788  0.9786  0.9777  0.9774  0.9774  0.9766  0.9766  0.9757  0.9752  0.9746  0.9733
[49 : 64]:	0.9722  0.9719  0.9715  0.9709  0.9707  0.9704  0.9699  0.9684  0.9680  0.9676  0.9665  0.9664  0.9663  0.9653  0.9653  0.9647
2025-10-01 11:58:54 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-01 11:58:54 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #1: GFLOPs: 13807.7141. Time: 11664.5863 us. Best GFLOPs: 13807.7141
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #2: GFLOPs: 22990.5632. Time: 7005.5384 us. Best GFLOPs: 22990.5632
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #3: GFLOPs: 947.9866. Time: 169898.2543 us. Best GFLOPs: 22990.5632
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #4: GFLOPs: 1980.6946. Time: 81315.5517 us. Best GFLOPs: 22990.5632
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #5: GFLOPs: 64.1563. Time: 2510451.6600 us. Best GFLOPs: 22990.5632
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #6: GFLOPs: 1399.7847. Time: 115061.4623 us. Best GFLOPs: 22990.5632
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #7: GFLOPs: 2066.3736. Time: 77943.9290 us. Best GFLOPs: 22990.5632
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #8: GFLOPs: 32723.0073. Time: 4921.9582 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #9: GFLOPs: 26533.9565. Time: 6070.0059 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #10: GFLOPs: 113.1790. Time: 1423066.5690 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #11: GFLOPs: 80.6778. Time: 1996352.3760 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #12: GFLOPs: 21164.7432. Time: 7609.8856 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #13: GFLOPs: 22611.7496. Time: 7122.9019 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #14: GFLOPs: 1216.5798. Time: 132388.5800 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #15: GFLOPs: 288.1417. Time: 558965.4540 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #16: GFLOPs: 2073.1178. Time: 77690.3633 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #17: GFLOPs: 378.1656. Time: 425901.4890 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #18: GFLOPs: 11012.3001. Time: 14625.5797 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #19: GFLOPs: 2442.9469. Time: 65929.0923 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #20: GFLOPs: 191.2397. Time: 842195.6380 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #21: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(10, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(24, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(128, 2, 2, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused * 1536 + i_1_j_1_fused // 8 * 512 + i_2_j_2_fused // 64 * 256 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(1024, i_1_j_1_fused % 8 * 128 + i_2_j_2_fused % 64 * 2 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(640):
                        for ax0_ax1_fused_0 in range(12):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(15360, i_0_j_0_fused * 1536 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(5120, k_0 * 8 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 8)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 8 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(1024, (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 1024)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 128, 2, 2, 2, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused * 1536 + i_1_j_1_fused // 8 * 512 + i_2_j_2_fused // 64 * 256 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(1024, i_1_j_1_fused % 8 * 128 + i_2_j_2_fused % 64 * 2 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 8 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(256, 2):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused * 1536 + i_1_j_1_fused // 8 * 512 + i_2_j_2_fused // 64 * 256 + ax0)
                            v1 = T.axis.spatial(1024, i_1_j_1_fused % 8 * 128 + i_2_j_2_fused % 64 * 2 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[10, 3, 2, 128, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 8, 64, 2, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[640, 4, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 128, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #22: GFLOPs: 390.3293. Time: 412629.2317 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #23: GFLOPs: 401.8127. Time: 400836.7103 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #24: GFLOPs: 1016.1897. Time: 158495.2900 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #25: GFLOPs: 631.4150. Time: 255079.8950 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #26: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(10, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(24, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(128, 2, 2, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused * 1536 + i_1_j_1_fused // 8 * 512 + i_2_j_2_fused // 64 * 256 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(1024, i_1_j_1_fused % 8 * 128 + i_2_j_2_fused % 64 * 2 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(640):
                        for ax0_ax1_fused_0 in range(24):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(15360, i_0_j_0_fused * 1536 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(5120, k_0 * 8 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 8)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(64):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0 * 8 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) // 1024)
                                    v1 = T.axis.spatial(1024, (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) % 1024)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 128, 2, 2, 2, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused * 1536 + i_1_j_1_fused // 8 * 512 + i_2_j_2_fused // 64 * 256 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(1024, i_1_j_1_fused % 8 * 128 + i_2_j_2_fused % 64 * 2 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 8 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(256, 2):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused * 1536 + i_1_j_1_fused // 8 * 512 + i_2_j_2_fused // 64 * 256 + ax0)
                            v1 = T.axis.spatial(1024, i_1_j_1_fused % 8 * 128 + i_2_j_2_fused % 64 * 2 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[10, 3, 2, 128, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 8, 64, 2, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[640, 4, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #27: GFLOPs: 24266.2487. Time: 6637.2547 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #28: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(10, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(128, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(48, 2, 2, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused * 1536 + i_1_j_1_fused // 32 * 384 + i_2_j_2_fused // 16 * 96 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(1024, i_1_j_1_fused % 32 * 32 + i_2_j_2_fused % 16 * 2 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(5120):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(15360, i_0_j_0_fused * 1536 + ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2)
                                        v1 = T.axis.spatial(5120, k_0)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0)
                                        v1 = T.axis.spatial(1024, ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 48, 2, 1, 2, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused * 1536 + i_1_j_1_fused // 32 * 384 + i_2_j_2_fused // 16 * 96 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(1024, i_1_j_1_fused % 32 * 32 + i_2_j_2_fused % 16 * 2 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(96, 2):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused * 1536 + i_1_j_1_fused // 32 * 384 + i_2_j_2_fused // 16 * 96 + ax0)
                            v1 = T.axis.spatial(1024, i_1_j_1_fused % 32 * 32 + i_2_j_2_fused % 16 * 2 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[10, 4, 4, 48, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 32, 16, 2, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[5120, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #29: GFLOPs: 3563.8867. Time: 45192.5913 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #30: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(16, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(320, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(24, 8, 1, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_2_j_2_fused // 2 * 24 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(1024, i_1_j_1_fused * 64 + i_2_j_2_fused % 2 * 32 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1280):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(320, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + (ax0_ax1_fused_0 * 2560 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(5120, k_0 * 4 + (ax0_ax1_fused_0 * 2560 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 4)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(7):
                            for ax0_ax1_fused_1 in T.thread_binding(320, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 4 + (ax0_ax1_fused_0 * 640 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(1024, (ax0_ax1_fused_0 * 640 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 1024)
                                        T.where((ax0_ax1_fused_0 * 320 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 24, 8, 1, 1, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_2_j_2_fused // 2 * 24 + i_3 + i_4)
                                v_j = T.axis.spatial(1024, i_1_j_1_fused * 64 + i_2_j_2_fused % 2 * 32 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 4 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(24, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_2_j_2_fused // 2 * 24 + ax0)
                            v1 = T.axis.spatial(1024, i_1_j_1_fused * 64 + i_2_j_2_fused % 2 * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 1, 160, 24, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 16, 2, 8, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1280, 4, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 320, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 320, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #31: GFLOPs: 448.5281. Time: 359088.4600 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #32: GFLOPs: 1890.6902. Time: 85186.4980 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #33: GFLOPs: 12275.2356. Time: 13120.8295 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #34: GFLOPs: 8987.0345. Time: 17921.5150 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #35: GFLOPs: 191.6242. Time: 840505.9407 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #36: GFLOPs: 528.5617. Time: 304716.1457 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #37: GFLOPs: 2269.0333. Time: 70982.3300 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #38: GFLOPs: 851.6695. Time: 189112.4063 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #39: GFLOPs: 4864.6506. Time: 33108.4975 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #40: GFLOPs: 61.5929. Time: 2614933.4307 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #41: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(10, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(64, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(48, 2, 2, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused * 1536 + i_1_j_1_fused // 16 * 384 + i_2_j_2_fused // 16 * 96 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(1024, i_1_j_1_fused % 16 * 64 + i_2_j_2_fused % 16 * 4 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(5120):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(15360, i_0_j_0_fused * 1536 + ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2)
                                        v1 = T.axis.spatial(5120, k_0)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0)
                                        v1 = T.axis.spatial(1024, ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 48, 2, 1, 2, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused * 1536 + i_1_j_1_fused // 16 * 384 + i_2_j_2_fused // 16 * 96 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(1024, i_1_j_1_fused % 16 * 64 + i_2_j_2_fused % 16 * 4 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(5120, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(96, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused * 1536 + i_1_j_1_fused // 16 * 384 + i_2_j_2_fused // 16 * 96 + ax0)
                            v1 = T.axis.spatial(1024, i_1_j_1_fused % 16 * 64 + i_2_j_2_fused % 16 * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[10, 4, 4, 48, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 16, 16, 2, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[5120, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #42: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(48, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(8, 4, 10, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused // 8 * 640 + i_2_j_2_fused // 16 * 80 + i_3_init * 10 + i_4_init)
                            v_j = T.axis.spatial(1024, i_1_j_1_fused % 8 * 128 + i_2_j_2_fused % 16 * 8 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2560):
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 7680)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(1024, (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 1024)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 8, 4, 1, 10, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused // 8 * 640 + i_2_j_2_fused // 16 * 80 + i_3 * 10 + i_4)
                                v_j = T.axis.spatial(1024, i_1_j_1_fused % 8 * 128 + i_2_j_2_fused % 16 * 8 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(80, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused // 8 * 640 + i_2_j_2_fused // 16 * 80 + ax0)
                            v1 = T.axis.spatial(1024, i_1_j_1_fused % 8 * 128 + i_2_j_2_fused % 16 * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 6, 8, 8, 10])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 8, 16, 4, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2560, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 128, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #43: GFLOPs: 187.8380. Time: 857447.8350 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #44: GFLOPs: 60.6488. Time: 2655638.1833 us. Best GFLOPs: 32723.0073
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #45: GFLOPs: 36018.5837. Time: 4471.6160 us. Best GFLOPs: 36018.5837
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #46: GFLOPs: 256.9986. Time: 626700.8870 us. Best GFLOPs: 36018.5837
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #47: GFLOPs: 13722.6672. Time: 11736.8782 us. Best GFLOPs: 36018.5837
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #48: GFLOPs: 65.8806. Time: 2444745.2797 us. Best GFLOPs: 36018.5837
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #49: GFLOPs: 26416.2338. Time: 6097.0566 us. Best GFLOPs: 36018.5837
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #50: GFLOPs: 86.7855. Time: 1855853.8410 us. Best GFLOPs: 36018.5837
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #51: GFLOPs: 415.1178. Time: 387989.2983 us. Best GFLOPs: 36018.5837
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #52: GFLOPs: 1214.7920. Time: 132583.4147 us. Best GFLOPs: 36018.5837
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #53: GFLOPs: 79.4467. Time: 2027288.0857 us. Best GFLOPs: 36018.5837
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #54: Error in building:
LocalBuilder: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1280, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 2, 3, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused // 4 * 12 + i_2_j_2_fused // 16 * 3 + i_3_init * 3 + i_4_init)
                            v_j = T.axis.spatial(1024, i_1_j_1_fused % 4 * 256 + i_2_j_2_fused % 16 * 16 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(75):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 5)
                                        v1 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 5)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(10):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(1024, (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 1024)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(5, 1, 2, 1, 3, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused // 4 * 12 + i_2_j_2_fused // 16 * 3 + i_3 * 3 + i_4)
                                v_j = T.axis.spatial(1024, i_1_j_1_fused % 4 * 256 + i_2_j_2_fused % 16 * 16 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 5 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(3, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused // 4 * 12 + i_2_j_2_fused // 16 * 3 + ax0)
                            v1 = T.axis.spatial(1024, i_1_j_1_fused % 4 * 256 + i_2_j_2_fused % 16 * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 320, 4, 1, 3])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 4, 16, 2, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 5, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #55: GFLOPs: 1670.9714. Time: 96387.8070 us. Best GFLOPs: 36018.5837
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #56: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(16, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(16, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(80, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(24, 8, 1, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused // 2 * 1920 + i_2_j_2_fused * 24 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + i_1_j_1_fused * 32 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1280):
                        for ax0_ax1_fused_0 in range(12):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(15360, i_0_j_0_fused // 2 * 1920 + (ax0_ax1_fused_0 * 640 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(5120, k_0 * 4 + (ax0_ax1_fused_0 * 640 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 4)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(13):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 4 + (ax0_ax1_fused_0 * 160 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 512)
                                        v1 = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + (ax0_ax1_fused_0 * 160 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 512)
                                        T.where((ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 2048)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 24, 8, 1, 1, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused // 2 * 1920 + i_2_j_2_fused * 24 + i_3 + i_4)
                                v_j = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + i_1_j_1_fused * 32 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 4 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(24, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused // 2 * 1920 + i_2_j_2_fused * 24 + ax0)
                            v1 = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + i_1_j_1_fused * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[8, 1, 80, 24, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 16, 1, 8, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1280, 4, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 80, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 80, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #57: GFLOPs: 126.5510. Time: 1272698.0793 us. Best GFLOPs: 36018.5837
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #58: GFLOPs: 1399.3715. Time: 115095.4383 us. Best GFLOPs: 36018.5837
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #59: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(15, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 8, 64, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused * 256 + i_2_j_2_fused // 32 * 64 + i_3_init * 64 + i_4_init)
                            v_j = T.axis.spatial(1024, i_2_j_2_fused % 32 * 32 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2560):
                        for ax0_ax1_fused_0 in range(30):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) // 1024)
                                    v1 = T.axis.spatial(1024, (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) % 1024)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 8, 1, 64, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused * 256 + i_2_j_2_fused // 32 * 64 + i_3 * 64 + i_4)
                                v_j = T.axis.spatial(1024, i_2_j_2_fused % 32 * 32 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(64, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused * 256 + i_2_j_2_fused // 32 * 64 + ax0)
                            v1 = T.axis.spatial(1024, i_2_j_2_fused % 32 * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 15, 4, 1, 64])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 32, 8, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2560, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #60: GFLOPs: 113.3270. Time: 1421208.4960 us. Best GFLOPs: 36018.5837
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #61: GFLOPs: 378.1929. Time: 425870.6867 us. Best GFLOPs: 36018.5837
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #62: GFLOPs: 12418.5288. Time: 12969.4327 us. Best GFLOPs: 36018.5837
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #63: GFLOPs: 234.8023. Time: 685944.1730 us. Best GFLOPs: 36018.5837
2025-10-01 12:08:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #64: GFLOPs: 2557.2437. Time: 62982.3710 us. Best GFLOPs: 36018.5837
2025-10-01 12:08:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-01 12:08:25 [INFO] [evolutionary_search.cc:715] Picked top 55 candidate(s) from database
2025-10-01 12:08:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 447 failure(s)
2025-10-01 12:08:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 893 failure(s)
2025-10-01 12:08:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 1338 failure(s)
2025-10-01 12:08:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 1785 failure(s)
2025-10-01 12:08:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 2233 failure(s)
2025-10-01 12:08:31 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2025-10-01 12:08:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 98 failure(s)
2025-10-01 12:08:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 89 failure(s)
2025-10-01 12:08:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 97 failure(s)
2025-10-01 12:08:40 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 95 failure(s)
2025-10-01 12:08:40 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9993  0.9981  0.9970  0.9953  0.9953  0.9950  0.9946  0.9939  0.9937  0.9935  0.9931  0.9930  0.9929  0.9923  0.9920
[17 : 32]:	0.9914  0.9911  0.9911  0.9901  0.9899  0.9893  0.9892  0.9888  0.9886  0.9862  0.9860  0.9858  0.9855  0.9852  0.9851  0.9849
[33 : 48]:	0.9846  0.9845  0.9835  0.9819  0.9814  0.9813  0.9808  0.9803  0.9793  0.9784  0.9778  0.9762  0.9761  0.9757  0.9754  0.9754
[49 : 64]:	0.9753  0.9749  0.9740  0.9737  0.9734  0.9727  0.9723  0.9717  0.9710  0.9706  0.9705  0.9697  0.9697  0.9692  0.9683  0.9682
2025-10-01 12:08:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-01 12:08:40 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #65: GFLOPs: 2812.9805. Time: 57256.4493 us. Best GFLOPs: 36018.5837
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #66: GFLOPs: 60927.7814. Time: 2643.4784 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #67: GFLOPs: 945.2639. Time: 170387.6340 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #68: GFLOPs: 400.8496. Time: 401799.7230 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #69: GFLOPs: 230.8041. Time: 697826.7413 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #70: GFLOPs: 1736.5165. Time: 92749.6337 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #71: GFLOPs: 719.9216. Time: 223720.5607 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #72: GFLOPs: 767.9738. Time: 209722.3510 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #73: GFLOPs: 5416.3670. Time: 29736.0343 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #74: GFLOPs: 367.9607. Time: 437713.2973 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #75: GFLOPs: 911.3436. Time: 176729.4717 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #76: GFLOPs: 112.6535. Time: 1429705.4033 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #77: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(6, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(10, 8, 8, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused // 2 * 3840 + i_1_j_1_fused // 2 * 1280 + i_2_j_2_fused // 4 * 80 + i_3_init * 8 + i_4_init)
                            v_j = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + i_1_j_1_fused % 2 * 256 + i_2_j_2_fused % 4 * 64 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(75):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(15360, i_0_j_0_fused // 2 * 3840 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 5)
                                        v1 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 5)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(40):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) // 512)
                                    v1 = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) % 512)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(5, 10, 8, 1, 8, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused // 2 * 3840 + i_1_j_1_fused // 2 * 1280 + i_2_j_2_fused // 4 * 80 + i_3 * 8 + i_4)
                                v_j = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + i_1_j_1_fused % 2 * 256 + i_2_j_2_fused % 4 * 64 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 5 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(80, 64):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused // 2 * 3840 + i_1_j_1_fused // 2 * 1280 + i_2_j_2_fused // 4 * 80 + ax0)
                            v1 = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + i_1_j_1_fused % 2 * 256 + i_2_j_2_fused % 4 * 64 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 3, 16, 10, 8])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 2, 4, 8, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 5, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #78: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(160, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(384, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 2, 1, 16):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused * 24 + i_2_j_2_fused // 32 * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(1024, i_2_j_2_fused % 32 * 32 + j_3_init * 16 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(50):
                            for ax0_ax1_fused_1 in T.thread_binding(384, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1) // 5)
                                    v1 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1) % 5)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(384, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 3072 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(1024, (ax0_ax1_fused_0 * 3072 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 1024)
                                        T.where((ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 5120)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 2, 5, 1, 16):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused * 24 + i_2_j_2_fused // 32 * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(1024, i_2_j_2_fused % 32 * 32 + j_3 * 16 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 5 + k_1 * 5 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused * 24 + i_2_j_2_fused // 32 * 2 + ax0)
                            v1 = T.axis.spatial(1024, i_2_j_2_fused % 32 * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 160, 12, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 32, 2, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 1, 5])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 384], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 384, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #79: GFLOPs: 414.3292. Time: 388727.8237 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #80: GFLOPs: 380.2254. Time: 423594.1567 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #81: GFLOPs: 187.0691. Time: 860972.1677 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #82: GFLOPs: 236.3218. Time: 681533.7727 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #83: GFLOPs: 79.0266. Time: 2038065.1040 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #84: GFLOPs: 221.1027. Time: 728445.5563 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #85: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(160, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(192, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 4, 1, 16):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused * 24 + i_2_j_2_fused // 16 * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(1024, i_2_j_2_fused % 16 * 64 + j_3_init * 16 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(50):
                            for ax0_ax1_fused_1 in T.thread_binding(192, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 5)
                                        v1 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 5)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(14):
                            for ax0_ax1_fused_1 in T.thread_binding(192, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(1024, (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 1024)
                                        T.where((ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 5120)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 4, 5, 1, 16):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused * 24 + i_2_j_2_fused // 16 * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(1024, i_2_j_2_fused % 16 * 64 + j_3 * 16 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 5 + k_1 * 5 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 64):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused * 24 + i_2_j_2_fused // 16 * 2 + ax0)
                            v1 = T.axis.spatial(1024, i_2_j_2_fused % 16 * 64 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 160, 12, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 16, 4, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 1, 5])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 192, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 192, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #86: GFLOPs: 364.9255. Time: 441353.8003 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #87: GFLOPs: 531.7665. Time: 302879.6997 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #88: GFLOPs: 189.4719. Time: 850053.6293 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #89: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(20, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(32, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 64, 3, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused // 2 * 1536 + i_1_j_1_fused * 48 + i_2_j_2_fused // 8 * 3 + i_3_init * 3 + i_4_init)
                            v_j = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + i_2_j_2_fused % 8 * 64 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2560):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(15360, i_0_j_0_fused // 2 * 1536 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 512)
                                        v1 = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 512)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 64, 2, 3, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused // 2 * 1536 + i_1_j_1_fused * 48 + i_2_j_2_fused // 8 * 3 + i_3 * 3 + i_4)
                                v_j = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + i_2_j_2_fused % 8 * 64 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(3, 64):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused // 2 * 1536 + i_1_j_1_fused * 48 + i_2_j_2_fused // 8 * 3 + ax0)
                            v1 = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + i_2_j_2_fused % 8 * 64 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[10, 32, 16, 1, 3])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 1, 8, 64, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2560, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 128, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #90: GFLOPs: 5262.8609. Time: 30603.3688 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #91: GFLOPs: 210.5704. Time: 764880.9407 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #92: GFLOPs: 362.2940. Time: 444559.6517 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #93: GFLOPs: 40971.0360. Time: 3931.1008 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #94: GFLOPs: 189.8828. Time: 848214.0297 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #95: GFLOPs: 43703.3808. Time: 3685.3276 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #96: GFLOPs: 1273.4816. Time: 126473.1850 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #97: GFLOPs: 417.0011. Time: 386237.0197 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #98: GFLOPs: 193.7469. Time: 831297.3630 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #99: GFLOPs: 130.3423. Time: 1235678.9550 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #100: GFLOPs: 178.6175. Time: 901710.5303 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #101: GFLOPs: 3195.4245. Time: 50403.7170 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #102: GFLOPs: 12350.1758. Time: 13041.2130 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #103: GFLOPs: 2085.8974. Time: 77214.3807 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #104: GFLOPs: 65.2349. Time: 2468944.4987 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #105: GFLOPs: 196.9115. Time: 817937.2557 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #106: GFLOPs: 26454.8696. Time: 6088.1522 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #107: GFLOPs: 1344.4094. Time: 119800.7607 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #108: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(384, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 4, 10, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused // 8 * 80 + i_2_j_2_fused // 16 * 20 + i_3_init * 10 + i_4_init)
                            v_j = T.axis.spatial(1024, i_1_j_1_fused % 8 * 128 + i_2_j_2_fused % 16 * 8 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2560):
                        for ax0_ax1_fused_0 in range(15):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 2)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(1024, (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 1024)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 2, 4, 1, 10, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused // 8 * 80 + i_2_j_2_fused // 16 * 20 + i_3 * 10 + i_4)
                                v_j = T.axis.spatial(1024, i_1_j_1_fused % 8 * 128 + i_2_j_2_fused % 16 * 8 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(20, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused // 8 * 80 + i_2_j_2_fused // 16 * 20 + ax0)
                            v1 = T.axis.spatial(1024, i_1_j_1_fused % 8 * 128 + i_2_j_2_fused % 16 * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 48, 4, 2, 10])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 8, 16, 4, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2560, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #109: GFLOPs: 8161.8978. Time: 19733.3118 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #110: GFLOPs: 239.0787. Time: 673674.6417 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #111: GFLOPs: 64.2399. Time: 2507186.1977 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #112: GFLOPs: 145.9560. Time: 1103492.1873 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #113: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(12, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(64, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(80, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(16, 1, 2, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused // 2 * 2560 + i_1_j_1_fused // 4 * 160 + i_2_j_2_fused // 16 * 32 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + i_1_j_1_fused % 4 * 128 + i_2_j_2_fused % 16 * 8 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(640):
                        for ax0_ax1_fused_0 in range(64):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(15360, i_0_j_0_fused // 2 * 2560 + (ax0_ax1_fused_0 * 320 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(5120, k_0 * 8 + (ax0_ax1_fused_0 * 320 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 8)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(13):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 8 + (ax0_ax1_fused_0 * 320 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 512)
                                        v1 = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + (ax0_ax1_fused_0 * 320 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 512)
                                        T.where((ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 16, 1, 2, 2, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused // 2 * 2560 + i_1_j_1_fused // 4 * 160 + i_2_j_2_fused // 16 * 32 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + i_1_j_1_fused % 4 * 128 + i_2_j_2_fused % 16 * 8 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 8 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(32, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused // 2 * 2560 + i_1_j_1_fused // 4 * 160 + i_2_j_2_fused // 16 * 32 + ax0)
                            v1 = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + i_1_j_1_fused % 4 * 128 + i_2_j_2_fused % 16 * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[6, 16, 5, 16, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 4, 16, 1, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[640, 4, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 80, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 80, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #114: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1024, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 1, 30, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused * 7680 + i_1_j_1_fused // 256 * 1920 + i_2_j_2_fused // 2 * 30 + i_3_init * 30 + i_4_init)
                            v_j = T.axis.spatial(1024, i_1_j_1_fused % 256 * 4 + i_2_j_2_fused % 2 * 2 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(5120):
                        for ax0_ax1_fused_0 in range(30):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(15360, i_0_j_0_fused * 7680 + ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2)
                                        v1 = T.axis.spatial(5120, k_0)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0)
                                    v1 = T.axis.spatial(1024, ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 1, 1, 30, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused * 7680 + i_1_j_1_fused // 256 * 1920 + i_2_j_2_fused // 2 * 30 + i_3 * 30 + i_4)
                                v_j = T.axis.spatial(1024, i_1_j_1_fused % 256 * 4 + i_2_j_2_fused % 2 * 2 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(5120, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(30, 2):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused * 7680 + i_1_j_1_fused // 256 * 1920 + i_2_j_2_fused // 2 * 30 + ax0)
                            v1 = T.axis.spatial(1024, i_1_j_1_fused % 256 * 4 + i_2_j_2_fused % 2 * 2 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 4, 64, 1, 30])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 256, 2, 1, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[5120, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #115: GFLOPs: 2605.9759. Time: 61804.5907 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #116: GFLOPs: 98.7725. Time: 1630629.2317 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #117: GFLOPs: 10197.2814. Time: 15794.5306 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #118: GFLOPs: 667.0548. Time: 241451.3343 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #119: GFLOPs: 1141.7019. Time: 141071.2177 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #120: GFLOPs: 465.5530. Time: 345956.9090 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #121: GFLOPs: 417.2835. Time: 385975.6263 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #122: GFLOPs: 305.0064. Time: 528058.6750 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #123: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(160, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(192, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 4, 1, 16):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused * 24 + i_2_j_2_fused // 16 * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(1024, i_2_j_2_fused % 16 * 64 + j_3_init * 16 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(100):
                            for ax0_ax1_fused_1 in T.thread_binding(192, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + (ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1) // 5)
                                    v1 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1) % 5)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(192, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 1536 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(1024, (ax0_ax1_fused_0 * 1536 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 1024)
                                        T.where((ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 5120)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 4, 5, 1, 16):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused * 24 + i_2_j_2_fused // 16 * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(1024, i_2_j_2_fused % 16 * 64 + j_3 * 16 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 5 + k_1 * 5 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 64):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused * 24 + i_2_j_2_fused // 16 * 2 + ax0)
                            v1 = T.axis.spatial(1024, i_2_j_2_fused % 16 * 64 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 160, 12, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 16, 4, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 1, 5])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 192], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 192, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #124: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(12, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(256, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(10, 8, 8, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused // 2 * 3840 + i_1_j_1_fused // 4 * 1280 + i_2_j_2_fused // 16 * 80 + i_3_init * 8 + i_4_init)
                            v_j = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + i_1_j_1_fused % 4 * 128 + i_2_j_2_fused % 16 * 8 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(19):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(15360, i_0_j_0_fused // 2 * 3840 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 5)
                                        v1 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 5)
                                        T.where((ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 19200)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(10):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1) // 512)
                                    v1 = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1) % 512)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(5, 10, 8, 1, 8, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused // 2 * 3840 + i_1_j_1_fused // 4 * 1280 + i_2_j_2_fused // 16 * 80 + i_3 * 8 + i_4)
                                v_j = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + i_1_j_1_fused % 4 * 128 + i_2_j_2_fused % 16 * 8 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 5 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(80, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused // 2 * 3840 + i_1_j_1_fused // 4 * 1280 + i_2_j_2_fused // 16 * 80 + ax0)
                            v1 = T.axis.spatial(1024, i_0_j_0_fused % 2 * 512 + i_1_j_1_fused % 4 * 128 + i_2_j_2_fused % 16 * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 3, 16, 10, 8])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 4, 16, 8, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 5, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 256, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 256], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #125: GFLOPs: 512.1601. Time: 314474.4667 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #126: GFLOPs: 7302.0549. Time: 22056.9792 us. Best GFLOPs: 60927.7814
2025-10-01 12:21:19 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #127: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((15360, 5120), "float16"), B: T.Buffer((5120, 1024), "float16"), C: T.Buffer((15360, 1024), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((15360, 1024), "float16", scope="local")
        A_shared = T.alloc_buffer((15360, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 1024), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(48, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(256, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(10, 4, 2, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused * 80 + i_2_j_2_fused // 64 * 20 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(1024, i_2_j_2_fused % 64 * 16 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(10):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + (ax0_ax1_fused_0 * 2048 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 5)
                                        v1 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 2048 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 5)
                                        T.where((ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 19200)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(5):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(1024, (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 1024)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(5, 10, 4, 1, 2, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused * 80 + i_2_j_2_fused // 64 * 20 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(1024, i_2_j_2_fused % 64 * 16 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 5 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(20, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(15360, i_0_j_0_fused * 3840 + i_1_j_1_fused * 80 + i_2_j_2_fused // 64 * 20 + ax0)
                            v1 = T.axis.spatial(1024, i_2_j_2_fused % 64 * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 48, 4, 10, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 64, 4, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 5, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 256, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 256, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:21:19 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-01 12:21:19 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2025-10-01 12:21:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 402 failure(s)
2025-10-01 12:21:21 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 803 failure(s)
2025-10-01 12:21:22 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 1202 failure(s)
2025-10-01 12:21:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 1600 failure(s)
2025-10-01 12:21:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 1998 failure(s)
2025-10-01 12:21:24 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2025-10-01 12:21:27 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 117 failure(s)
2025-10-01 12:21:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 78 failure(s)
2025-10-01 12:21:34 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 99 failure(s)
2025-10-01 12:21:37 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x20ccecf8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x20dd9f58)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x20dd9f28)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x20babaf8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x20cf4fd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x20dc8908)]: 81 failure(s)
2025-10-01 12:21:39 [INFO] [evolutionary_search.cc:649] Scores of the best 1 candidates:
[1 : 1]:	0.9851
2025-10-01 12:21:39 [INFO] [evolutionary_search.cc:727] Got 1 candidate(s) with evolutionary search
2025-10-01 12:21:39 [INFO] [evolutionary_search.cc:730] Sending 1 candidates(s) for measurement
2025-10-01 12:22:32 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #128: GFLOPs: 64986.5894. Time: 2478.3771 us. Best GFLOPs: 64986.5894
