2025-10-01 23:14:22 [INFO] [task_scheduler.cc:160] Initializing Task #0: "mm"
2025-10-01 23:14:22 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        for i, j, k in T.grid(642, 8192, 8192):
            with T.block("C"):
                v_i, v_j, v_k = T.axis.remap("SSR", [i, j, k])
                T.reads(A[v_i, v_k], B[v_k, v_j])
                T.writes(C[v_i, v_j])
                with T.init():
                    C[v_i, v_j] = T.float16(0.0)
                C[v_i, v_j] = C[v_i, v_j] + A[v_i, v_k] * B[v_k, v_j]
2025-10-01 23:14:22 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2025-10-01 23:14:22 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
            A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
            B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
            for i_0_j_0_fused in T.thread_binding(32, thread="blockIdx.x"):
                for i_1_j_1_fused in T.thread_binding(4, thread="vthread.x"):
                    for i_2_j_2_fused in T.thread_binding(2, thread="threadIdx.x"):
                        for k_0 in range(64):
                            for ax0_ax1_fused in range(82176):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, ax0_ax1_fused // 128)
                                    v1 = T.axis.spatial(8192, k_0 * 128 + ax0_ax1_fused % 128)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    A_shared[v0, v1] = A[v0, v1]
                            for ax0_ax1_fused in range(32768):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0 * 128 + ax0_ax1_fused // 256)
                                    v1 = T.axis.spatial(8192, i_0_j_0_fused * 256 + ax0_ax1_fused % 256)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    B_shared[v0, v1] = B[v0, v1]
                            for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(32, 107, 8, 4, 3, 8):
                                with T.block("C"):
                                    v_i = T.axis.spatial(642, i_2_j_2_fused * 321 + i_3 * 3 + i_4)
                                    v_j = T.axis.spatial(8192, i_0_j_0_fused * 256 + i_1_j_1_fused * 64 + j_3 * 8 + j_4)
                                    v_k = T.axis.reduce(8192, k_0 * 128 + k_1 * 4 + k_2)
                                    T.reads(A_shared[v_i, v_k], B_shared[v_k, v_j])
                                    T.writes(C_local[v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        C_local[v_i, v_j] = T.float16(0.0)
                                    C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                        for ax0, ax1 in T.grid(321, 64):
                            with T.block("C_local"):
                                v0 = T.axis.spatial(642, i_2_j_2_fused * 321 + ax0)
                                v1 = T.axis.spatial(8192, i_0_j_0_fused * 256 + i_1_j_1_fused * 64 + ax1)
                                T.reads(C_local[v0, v1])
                                T.writes(C[v0, v1])
                                C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 2, 107, 3])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[32, 4, 1, 8, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[64, 32, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
2025-10-01 23:14:22 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-01 23:14:22 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2025-10-01 23:14:23 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x136c8908)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x134e07e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x136ec0f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1358cc88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x135fbfd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x136ebdf8)]: 492 failure(s)
2025-10-01 23:14:24 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x136c8908)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x134e07e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x136ec0f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1358cc88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x135fbfd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x136ebdf8)]: 980 failure(s)
2025-10-01 23:14:25 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x136c8908)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x134e07e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x136ec0f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1358cc88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x135fbfd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x136ebdf8)]: 1474 failure(s)
2025-10-01 23:14:25 [INFO] [evolutionary_search.cc:723] Sampled 62 candidate(s)
2025-10-01 23:14:28 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x136c8908)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x134e07e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x136ec0f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1358cc88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x135fbfd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x136ebdf8)]: 102 failure(s)
2025-10-01 23:14:30 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x136c8908)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x134e07e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x136ec0f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1358cc88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x135fbfd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x136ebdf8)]: 91 failure(s)
2025-10-01 23:14:32 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x136c8908)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x134e07e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x136ec0f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1358cc88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x135fbfd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x136ebdf8)]: 108 failure(s)
2025-10-01 23:14:34 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x136c8908)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x134e07e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x136ec0f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1358cc88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x135fbfd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x136ebdf8)]: 70 failure(s)
2025-10-01 23:14:34 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9984  0.9981  0.9979  0.9968  0.9963  0.9956  0.9947  0.9945  0.9944  0.9938  0.9925  0.9908  0.9884  0.9880  0.9869  0.9864
[17 : 32]:	0.9864  0.9863  0.9861  0.9854  0.9843  0.9826  0.9824  0.9819  0.9811  0.9807  0.9799  0.9799  0.9796  0.9793  0.9789  0.9784
[33 : 48]:	0.9770  0.9757  0.9742  0.9739  0.9726  0.9725  0.9713  0.9699  0.9690  0.9688  0.9682  0.9682  0.9677  0.9675  0.9673  0.9673
[49 : 64]:	0.9664  0.9655  0.9648  0.9616  0.9615  0.9606  0.9597  0.9595  0.9593  0.9587  0.9581  0.9578  0.9574  0.9574  0.9559  0.9559
2025-10-01 23:14:34 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-01 23:14:34 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #1: GFLOPs: 25404.8751. Time: 3391.7813 us. Best GFLOPs: 25404.8751
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #2: GFLOPs: 8195.5305. Time: 10513.9968 us. Best GFLOPs: 25404.8751
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #3: GFLOPs: 97.3119. Time: 885480.4687 us. Best GFLOPs: 25404.8751
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #4: GFLOPs: 204.1485. Time: 422083.7400 us. Best GFLOPs: 25404.8751
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #5: GFLOPs: 1483.2501. Time: 58093.8973 us. Best GFLOPs: 25404.8751
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #6: GFLOPs: 5556.6634. Time: 15507.1083 us. Best GFLOPs: 25404.8751
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #7: GFLOPs: 31267.9632. Time: 2755.7849 us. Best GFLOPs: 31267.9632
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #8: GFLOPs: 31.7296. Time: 2715689.7783 us. Best GFLOPs: 31267.9632
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #9: GFLOPs: 8326.2193. Time: 10348.9685 us. Best GFLOPs: 31267.9632
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #10: GFLOPs: 16904.3414. Time: 5097.3759 us. Best GFLOPs: 31267.9632
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #11: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(384, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(107, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 2, 1, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 64 * 107 + i_2_j_2_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused % 64 * 16 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(12):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(8192, k_0 * 8 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 8)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(39):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 8 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 1024)
                                        T.where((ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 8192)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 2, 4, 1, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 64 * 107 + i_2_j_2_fused + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused % 64 * 16 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 8 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 64 * 107 + i_2_j_2_fused + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused % 64 * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 6, 107, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 64, 1, 2, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 2, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 107, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 107, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #12: GFLOPs: 3860.2191. Time: 22321.9924 us. Best GFLOPs: 31267.9632
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #13: GFLOPs: 49.6300. Time: 1736205.2407 us. Best GFLOPs: 31267.9632
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #14: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(16, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(642, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 4, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 2 + i_2_j_2_fused // 32 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused % 2 * 256 + i_2_j_2_fused % 32 * 8 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(8192):
                        for ax0_ax1_fused_0 in range(11):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1)
                                    v1 = T.axis.spatial(8192, k_0)
                                    T.where(ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1 < 642)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 512 + ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 4, 1, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 2 + i_2_j_2_fused // 32 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused % 2 * 256 + i_2_j_2_fused % 32 * 8 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(8192, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 2 * 2 + i_2_j_2_fused // 32 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused % 2 * 256 + i_2_j_2_fused % 32 * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 321, 2, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[16, 2, 32, 4, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[8192, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #15: GFLOPs: 8373.0710. Time: 10291.0606 us. Best GFLOPs: 31267.9632
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #16: GFLOPs: 10440.9231. Time: 8252.8892 us. Best GFLOPs: 31267.9632
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #17: GFLOPs: 46.7006. Time: 1845110.3513 us. Best GFLOPs: 31267.9632
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #18: GFLOPs: 37.8191. Time: 2278422.2003 us. Best GFLOPs: 31267.9632
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #19: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1712, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(768, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 2, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 8 * 3 + i_2_j_2_fused // 256 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 8 * 512 + i_2_j_2_fused % 256 * 2 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2048):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(768, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 1536 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(8192, k_0 * 4 + (ax0_ax1_fused_0 * 1536 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 768 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 2568)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(22):
                            for ax0_ax1_fused_1 in T.thread_binding(768, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0 * 4 + (ax0_ax1_fused_0 * 768 + ax0_ax1_fused_1) // 4096)
                                    v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + (ax0_ax1_fused_0 * 768 + ax0_ax1_fused_1) % 4096)
                                    T.where(ax0_ax1_fused_0 * 768 + ax0_ax1_fused_1 < 16384)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 2, 4, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 8 * 3 + i_2_j_2_fused // 256 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 8 * 512 + i_2_j_2_fused % 256 * 2 + j_3 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 4 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 2):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 8 * 3 + i_2_j_2_fused // 256 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 8 * 512 + i_2_j_2_fused % 256 * 2 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 214, 3, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 8, 256, 2, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2048, 1, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 768, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 768], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #20: GFLOPs: 20217.4769. Time: 4262.0443 us. Best GFLOPs: 31267.9632
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #21: GFLOPs: 266.8597. Time: 322895.4670 us. Best GFLOPs: 31267.9632
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #22: GFLOPs: 8221.0792. Time: 10481.3224 us. Best GFLOPs: 31267.9632
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #23: GFLOPs: 1813.5088. Time: 47514.3990 us. Best GFLOPs: 31267.9632
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #24: GFLOPs: 43.2610. Time: 1991814.1273 us. Best GFLOPs: 31267.9632
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #25: GFLOPs: 2554.8243. Time: 33727.4780 us. Best GFLOPs: 31267.9632
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #26: GFLOPs: 33970.1923. Time: 2536.5703 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #27: GFLOPs: 1047.6632. Time: 82247.5990 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #28: GFLOPs: 8721.4733. Time: 9879.9570 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #29: GFLOPs: 22412.0967. Time: 3844.6997 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #30: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(64, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(107, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 16, 6, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_2_j_2_fused * 6 + i_3_init * 6 + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 32 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(8192):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1)
                                    v1 = T.axis.spatial(8192, k_0)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(20):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0)
                                    v1 = T.axis.spatial(8192, i_0_j_0_fused * 2048 + (ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1 < 2048)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 16, 1, 6, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_2_j_2_fused * 6 + i_3 * 6 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 32 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(8192, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(6, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_2_j_2_fused * 6 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 107, 1, 6])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 64, 1, 16, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[8192, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 107], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 107], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #31: GFLOPs: 3015.7667. Time: 28572.4295 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #32: GFLOPs: 9027.8855. Time: 9544.6250 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #33: GFLOPs: 9561.5730. Time: 9011.8834 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #34: GFLOPs: 150.1254. Time: 573972.1270 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #35: GFLOPs: 121.5124. Time: 709127.6853 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #36: GFLOPs: 1047.0416. Time: 82296.4273 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #37: GFLOPs: 32053.8952. Time: 2688.2156 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #38: GFLOPs: 48.4311. Time: 1779181.4777 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #39: GFLOPs: 32.8398. Time: 2623885.2537 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #40: GFLOPs: 3899.6891. Time: 22096.0646 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #41: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1284, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 4, 2, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 4 * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 4 * 1024 + i_2_j_2_fused * 8 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(11):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) // 2)
                                    v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) % 2)
                                    T.where(ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 < 1284)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 4, 2, 2, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 4 * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 4 * 1024 + i_2_j_2_fused * 8 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 4 * 2 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 4 * 1024 + i_2_j_2_fused * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 321, 1, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 4, 128, 4, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 128, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #42: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(16, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(642, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 2, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 2 + i_2_j_2_fused // 64 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused % 2 * 256 + i_2_j_2_fused % 64 * 4 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(11):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) // 2)
                                    v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) % 2)
                                    T.where(ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 < 1284)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) // 512)
                                    v1 = T.axis.spatial(8192, i_0_j_0_fused * 512 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) % 512)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 2, 2, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 2 + i_2_j_2_fused // 64 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused % 2 * 256 + i_2_j_2_fused % 64 * 4 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 2 * 2 + i_2_j_2_fused // 64 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused % 2 * 256 + i_2_j_2_fused % 64 * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 321, 2, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[16, 2, 64, 2, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #43: GFLOPs: 64.4474. Time: 1337025.8787 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #44: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(32, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(321, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 4, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused * 2 + i_2_j_2_fused // 32 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 256 + i_2_j_2_fused % 32 * 8 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(8192):
                        for ax0_ax1_fused_0 in range(11):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1)
                                    v1 = T.axis.spatial(8192, k_0)
                                    T.where(ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1 < 642)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 256 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2))
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 256)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 4, 1, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused * 2 + i_2_j_2_fused // 32 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 256 + i_2_j_2_fused % 32 * 8 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(8192, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused * 2 + i_2_j_2_fused // 32 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 256 + i_2_j_2_fused % 32 * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 321, 2, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[32, 1, 32, 4, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[8192, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #45: GFLOPs: 716.3650. Time: 120284.7493 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #46: GFLOPs: 10579.4680. Time: 8144.8123 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #47: GFLOPs: 26248.8662. Time: 3282.7239 us. Best GFLOPs: 33970.1923
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #48: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(428, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(256, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(3, 4, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 3 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 8 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 1284)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 3, 4, 2, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 3 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 8 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(3, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 2 * 3 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 214, 1, 3, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 2, 256, 4, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 256, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 256, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #49: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(428, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(256, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(3, 4, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused * 321 + i_1_j_1_fused // 4 * 3 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_1_j_1_fused % 4 * 2048 + i_2_j_2_fused * 8 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, i_0_j_0_fused * 321 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 642)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 2048 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 8192)
                                        v1 = T.axis.spatial(8192, (ax0_ax1_fused_0 * 2048 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 8192)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 3, 4, 2, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused * 321 + i_1_j_1_fused // 4 * 3 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_1_j_1_fused % 4 * 2048 + i_2_j_2_fused * 8 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(3, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused * 321 + i_1_j_1_fused // 4 * 3 + ax0)
                            v1 = T.axis.spatial(8192, i_1_j_1_fused % 4 * 2048 + i_2_j_2_fused * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 107, 1, 3, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 4, 256, 4, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 256, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 256, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #50: GFLOPs: 41732.8842. Time: 2064.7454 us. Best GFLOPs: 41732.8842
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #51: GFLOPs: 18245.3916. Time: 4722.7148 us. Best GFLOPs: 41732.8842
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #52: GFLOPs: 11246.3048. Time: 7661.8750 us. Best GFLOPs: 41732.8842
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #53: GFLOPs: 452.1507. Time: 190573.1607 us. Best GFLOPs: 41732.8842
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #54: GFLOPs: 42925.8030. Time: 2007.3656 us. Best GFLOPs: 42925.8030
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #55: GFLOPs: 3668.2945. Time: 23489.8756 us. Best GFLOPs: 42925.8030
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #56: GFLOPs: 464.7793. Time: 185395.0600 us. Best GFLOPs: 42925.8030
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #57: GFLOPs: 364.5513. Time: 236366.6990 us. Best GFLOPs: 42925.8030
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #58: GFLOPs: 2249.5976. Time: 38303.6420 us. Best GFLOPs: 42925.8030
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #59: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(8, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(321, 1, 1, 16):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_2_j_2_fused // 32 * 321 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused * 512 + i_2_j_2_fused % 32 * 16 + j_3_init * 16 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2048):
                        for ax0_ax1_fused_0 in range(41):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) // 4)
                                    v1 = T.axis.spatial(8192, k_0 * 4 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) % 4)
                                    T.where(ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1 < 2568)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(32):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 4 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 321, 1, 1, 1, 16):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_2_j_2_fused // 32 * 321 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused * 512 + i_2_j_2_fused % 32 * 16 + j_3 * 16 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 4 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(321, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_2_j_2_fused // 32 * 321 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused * 512 + i_2_j_2_fused % 32 * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 2, 321, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 8, 32, 1, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2048, 4, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #60: GFLOPs: 9934.5741. Time: 8673.5254 us. Best GFLOPs: 42925.8030
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #61: GFLOPs: 30347.5755. Time: 2839.3629 us. Best GFLOPs: 42925.8030
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #62: GFLOPs: 11110.2020. Time: 7755.7349 us. Best GFLOPs: 42925.8030
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #63: GFLOPs: 6629.0116. Time: 12998.5866 us. Best GFLOPs: 42925.8030
2025-10-01 23:25:03 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #64: GFLOPs: 31649.9386. Time: 2722.5260 us. Best GFLOPs: 42925.8030
2025-10-01 23:25:03 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-01 23:25:03 [INFO] [evolutionary_search.cc:715] Picked top 54 candidate(s) from database
2025-10-01 23:25:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x136c8908)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x134e07e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x136ec0f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1358cc88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x135fbfd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x136ebdf8)]: 447 failure(s)
2025-10-01 23:25:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x136c8908)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x134e07e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x136ec0f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1358cc88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x135fbfd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x136ebdf8)]: 887 failure(s)
2025-10-01 23:25:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x136c8908)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x134e07e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x136ec0f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1358cc88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x135fbfd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x136ebdf8)]: 1328 failure(s)
2025-10-01 23:25:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x136c8908)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x134e07e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x136ec0f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1358cc88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x135fbfd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x136ebdf8)]: 1763 failure(s)
2025-10-01 23:25:08 [INFO] [evolutionary_search.cc:723] Sampled 69 candidate(s)
2025-10-01 23:25:10 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x136c8908)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x134e07e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x136ec0f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1358cc88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x135fbfd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x136ebdf8)]: 74 failure(s)
2025-10-01 23:25:12 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x136c8908)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x134e07e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x136ec0f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1358cc88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x135fbfd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x136ebdf8)]: 85 failure(s)
2025-10-01 23:25:14 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x136c8908)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x134e07e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x136ec0f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1358cc88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x135fbfd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x136ebdf8)]: 95 failure(s)
2025-10-01 23:25:16 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x136c8908)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x134e07e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x136ec0f8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x1358cc88)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x135fbfd8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x136ebdf8)]: 83 failure(s)
2025-10-01 23:25:16 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9988  0.9982  0.9981  0.9959  0.9953  0.9950  0.9941  0.9933  0.9933  0.9929  0.9926  0.9921  0.9916  0.9914  0.9903  0.9891
[17 : 32]:	0.9887  0.9881  0.9878  0.9876  0.9873  0.9861  0.9849  0.9847  0.9824  0.9824  0.9820  0.9815  0.9814  0.9811  0.9811  0.9805
[33 : 48]:	0.9804  0.9802  0.9800  0.9797  0.9790  0.9772  0.9767  0.9760  0.9754  0.9743  0.9743  0.9719  0.9710  0.9706  0.9705  0.9703
[49 : 64]:	0.9702  0.9699  0.9694  0.9686  0.9650  0.9622  0.9618  0.9614  0.9609  0.9609  0.9601  0.9601  0.9590  0.9582  0.9580  0.9580
2025-10-01 23:25:16 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-01 23:25:16 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #65: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(32, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(214, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 16, 6, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_2_j_2_fused // 2 * 6 + i_3_init * 6 + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused * 32 + i_2_j_2_fused % 2 * 16 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(214, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(8192, k_0 * 8 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 8)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(39):
                            for ax0_ax1_fused_1 in T.thread_binding(214, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0 * 8 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1) // 1024)
                                    v1 = T.axis.spatial(8192, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1) % 1024)
                                    T.where(ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 < 8192)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(8, 1, 16, 1, 6, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_2_j_2_fused // 2 * 6 + i_3 * 6 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused * 32 + i_2_j_2_fused % 2 * 16 + j_3 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 8 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(6, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_2_j_2_fused // 2 * 6 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused * 32 + i_2_j_2_fused % 2 * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 107, 1, 6])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 32, 2, 16, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 8, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 214, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 214], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #66: GFLOPs: 3748.6810. Time: 22986.1602 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #67: GFLOPs: 96.8528. Time: 889678.1410 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #68: GFLOPs: 67.1484. Time: 1283244.3847 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #69: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(48, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(107, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 512, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 8 * 107 + i_2_j_2_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_1_j_1_fused % 8 * 1024 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(8192):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1)
                                    v1 = T.axis.spatial(8192, k_0)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(20):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0)
                                        v1 = T.axis.spatial(8192, ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2)
                                        T.where((ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 8192)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 512, 1, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 8 * 107 + i_2_j_2_fused + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_1_j_1_fused % 8 * 1024 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(8192, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 1024):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 8 * 107 + i_2_j_2_fused + ax0)
                            v1 = T.axis.spatial(8192, i_1_j_1_fused % 8 * 1024 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 6, 107, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 8, 1, 512, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[8192, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 107], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 107, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #70: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(16, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(768, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(107, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 2, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused // 8 * 321 + i_1_j_1_fused // 256 * 107 + i_2_j_2_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused % 8 * 1024 + i_1_j_1_fused % 256 * 4 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2048):
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, i_0_j_0_fused // 8 * 321 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(8192, k_0 * 4 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(39):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0 * 4 + (ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) // 1024)
                                    v1 = T.axis.spatial(8192, i_0_j_0_fused % 8 * 1024 + (ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) % 1024)
                                    T.where(ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1 < 4096)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 2, 2, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused // 8 * 321 + i_1_j_1_fused // 256 * 107 + i_2_j_2_fused + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused % 8 * 1024 + i_1_j_1_fused % 256 * 4 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 4 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused // 8 * 321 + i_1_j_1_fused // 256 * 107 + i_2_j_2_fused + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused % 8 * 1024 + i_1_j_1_fused % 256 * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 3, 107, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 256, 1, 2, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2048, 2, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 107, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 107], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #71: GFLOPs: 7352.2592. Time: 11719.9053 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #72: GFLOPs: 12578.4182. Time: 6850.4465 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #73: GFLOPs: 744.9072. Time: 115675.8623 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #74: GFLOPs: 62.3416. Time: 1382187.0117 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #75: GFLOPs: 11072.6663. Time: 7782.0264 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #76: GFLOPs: 49.9954. Time: 1723512.6950 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #77: GFLOPs: 38255.4292. Time: 2252.4327 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #78: GFLOPs: 32.6217. Time: 2641423.3397 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #79: GFLOPs: 3517.3299. Time: 24498.0666 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #80: GFLOPs: 43.2767. Time: 1991088.8670 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #81: GFLOPs: 591.1842. Time: 145754.5367 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #82: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(16, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(384, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(107, 4, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 8 * 321 + i_2_j_2_fused // 128 * 107 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 8 * 512 + i_2_j_2_fused % 128 * 4 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(384, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 768 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 768 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 1284)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(22):
                            for ax0_ax1_fused_1 in T.thread_binding(384, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1) // 4096)
                                    v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1) % 4096)
                                    T.where(ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1 < 8192)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 107, 4, 2, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 8 * 321 + i_2_j_2_fused // 128 * 107 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 8 * 512 + i_2_j_2_fused % 128 * 4 + j_3 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(107, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 8 * 321 + i_2_j_2_fused // 128 * 107 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 8 * 512 + i_2_j_2_fused % 128 * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 2, 3, 107, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 8, 128, 4, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 384, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 384], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #83: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(3, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(428, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 2, 1, 16):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused * 214 + i_1_j_1_fused // 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_1_j_1_fused % 2 * 4096 + i_2_j_2_fused * 32 + j_3_init * 16 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, i_0_j_0_fused * 214 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 428)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 8192)
                                        v1 = T.axis.spatial(8192, (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 8192)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 2, 2, 1, 16):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused * 214 + i_1_j_1_fused // 2 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_1_j_1_fused % 2 * 4096 + i_2_j_2_fused * 32 + j_3 * 16 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused * 214 + i_1_j_1_fused // 2 + ax0)
                            v1 = T.axis.spatial(8192, i_1_j_1_fused % 2 * 4096 + i_2_j_2_fused * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[3, 214, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 2, 128, 2, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 128, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #84: GFLOPs: 4831.6891. Time: 17833.8838 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #85: GFLOPs: 447.2175. Time: 192675.3130 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #86: GFLOPs: 118.6051. Time: 726510.1723 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #87: GFLOPs: 120.1810. Time: 716983.3170 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #88: GFLOPs: 17923.9480. Time: 4807.4108 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #89: GFLOPs: 16404.3324. Time: 5252.7454 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #90: GFLOPs: 608.7495. Time: 141548.8380 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #91: GFLOPs: 140.2674. Time: 614310.9537 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #92: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(6, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(214, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 16, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused * 107 + i_1_j_1_fused // 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_1_j_1_fused % 2 * 4096 + i_2_j_2_fused * 32 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, i_0_j_0_fused * 107 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) // 2)
                                    v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) % 2)
                                    T.where(ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 < 214)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(128):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) // 8192)
                                    v1 = T.axis.spatial(8192, (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) % 8192)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 16, 2, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused * 107 + i_1_j_1_fused // 2 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_1_j_1_fused % 2 * 4096 + i_2_j_2_fused * 32 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused * 107 + i_1_j_1_fused // 2 + ax0)
                            v1 = T.axis.spatial(8192, i_1_j_1_fused % 2 * 4096 + i_2_j_2_fused * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[6, 107, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 2, 128, 16, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #93: GFLOPs: 488.6355. Time: 176343.6887 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #94: GFLOPs: 40.2556. Time: 2140517.2523 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #95: GFLOPs: 1040.5928. Time: 82806.4370 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #96: GFLOPs: 648.7330. Time: 132824.7273 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #97: GFLOPs: 29741.7645. Time: 2897.1980 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #98: GFLOPs: 3778.8772. Time: 22802.4826 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #99: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1712, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(256, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(3, 2, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 8 * 3 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 8 * 512 + i_2_j_2_fused * 2 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(8192):
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1)
                                    v1 = T.axis.spatial(8192, k_0)
                                    T.where(ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 < 642)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 3, 2, 1, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 8 * 3 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 8 * 512 + i_2_j_2_fused * 2 + j_3 + j_4)
                                v_k = T.axis.reduce(8192, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(3, 2):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 8 * 3 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 8 * 512 + i_2_j_2_fused * 2 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 214, 1, 3, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 8, 256, 2, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[8192, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 256], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 256, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #100: GFLOPs: 14434.8373. Time: 5969.4321 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #101: GFLOPs: 11138.4348. Time: 7736.0763 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #102: GFLOPs: 16164.6518. Time: 5330.6302 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #103: GFLOPs: 10767.5650. Time: 8002.5318 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #104: GFLOPs: 9546.4437. Time: 9026.1656 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #105: GFLOPs: 3657.1337. Time: 23561.5614 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #106: GFLOPs: 33138.8357. Time: 2600.2055 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #107: GFLOPs: 26241.9628. Time: 3283.5875 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #108: GFLOPs: 1293.4216. Time: 66620.0253 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #109: GFLOPs: 19673.0069. Time: 4380.0006 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #110: GFLOPs: 328.0328. Time: 262680.3993 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #111: GFLOPs: 29782.1343. Time: 2893.2709 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #112: GFLOPs: 194.4686. Time: 443093.5057 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #113: GFLOPs: 4013.6499. Time: 21468.6842 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #114: GFLOPs: 32.3140. Time: 2666576.9857 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #115: GFLOPs: 23236.4629. Time: 3708.3003 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #116: GFLOPs: 439.7525. Time: 195946.0650 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #117: GFLOPs: 771.6014. Time: 111673.9603 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #118: GFLOPs: 30091.5690. Time: 2863.5191 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #119: GFLOPs: 368.1556. Time: 234052.6323 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #120: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(6, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(214, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 16, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused * 107 + i_1_j_1_fused // 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_1_j_1_fused % 2 * 4096 + i_2_j_2_fused * 32 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, i_0_j_0_fused * 107 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) // 2)
                                    v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) % 2)
                                    T.where(ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 < 214)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 8192)
                                        v1 = T.axis.spatial(8192, (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 8192)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 16, 2, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused * 107 + i_1_j_1_fused // 2 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_1_j_1_fused % 2 * 4096 + i_2_j_2_fused * 32 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused * 107 + i_1_j_1_fused // 2 + ax0)
                            v1 = T.axis.spatial(8192, i_1_j_1_fused % 2 * 4096 + i_2_j_2_fused * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[6, 107, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 2, 128, 16, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 128, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #121: GFLOPs: 162.6546. Time: 529759.3180 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #122: GFLOPs: 186.4697. Time: 462100.7080 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #123: GFLOPs: 27730.9012. Time: 3107.2838 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #124: GFLOPs: 3538.8732. Time: 24348.9318 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #125: GFLOPs: 27360.1954. Time: 3149.3847 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #126: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 8192), "float16"), B: T.Buffer((8192, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(3, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(256, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(107, 16, 1, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused * 214 + i_2_j_2_fused // 128 * 107 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_2_j_2_fused % 128 * 64 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 1284)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 2048 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 8192)
                                        v1 = T.axis.spatial(8192, (ax0_ax1_fused_0 * 2048 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 8192)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 107, 16, 2, 1, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused * 214 + i_2_j_2_fused // 128 * 107 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_2_j_2_fused % 128 * 64 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(107, 64):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused * 214 + i_2_j_2_fused // 128 * 107 + ax0)
                            v1 = T.axis.spatial(8192, i_2_j_2_fused % 128 * 64 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 3, 2, 107, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 128, 16, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 256, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 256, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #127: GFLOPs: 25802.7929. Time: 3339.4750 us. Best GFLOPs: 42925.8030
2025-10-01 23:35:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #128: GFLOPs: 17491.9184. Time: 4926.1481 us. Best GFLOPs: 42925.8030
