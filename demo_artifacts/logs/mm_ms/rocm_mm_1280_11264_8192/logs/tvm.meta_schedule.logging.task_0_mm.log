2025-10-01 10:59:54 [INFO] [task_scheduler.cc:160] Initializing Task #0: "mm"
2025-10-01 10:59:54 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        for i, j, k in T.grid(1280, 11264, 8192):
            with T.block("C"):
                v_i, v_j, v_k = T.axis.remap("SSR", [i, j, k])
                T.reads(A[v_i, v_k], B[v_k, v_j])
                T.writes(C[v_i, v_j])
                with T.init():
                    C[v_i, v_j] = T.float16(0.0)
                C[v_i, v_j] = C[v_i, v_j] + A[v_i, v_k] * B[v_k, v_j]
2025-10-01 10:59:54 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2025-10-01 10:59:54 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 16})
            C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
            A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
            B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
            for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x"):
                for i_1_j_1_fused in T.thread_binding(1024, thread="vthread.x"):
                    for i_2_j_2_fused in T.thread_binding(16, thread="threadIdx.x"):
                        for k_0 in range(16):
                            for ax0_ax1_fused in range(163840):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(1280, i_0_j_0_fused * 320 + ax0_ax1_fused // 512)
                                    v1 = T.axis.spatial(8192, k_0 * 512 + ax0_ax1_fused % 512)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    A_shared[v0, v1] = A[v0, v1]
                            for ax0_ax1_fused in range(5767168):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0 * 512 + ax0_ax1_fused // 11264)
                                    v1 = T.axis.spatial(11264, ax0_ax1_fused % 11264)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    B_shared[v0, v1] = B[v0, v1]
                            for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(128, 4, 1, 4, 5, 11):
                                with T.block("C"):
                                    v_i = T.axis.spatial(1280, i_0_j_0_fused * 320 + i_1_j_1_fused // 256 * 80 + i_2_j_2_fused // 4 * 20 + i_3 * 5 + i_4)
                                    v_j = T.axis.spatial(11264, i_1_j_1_fused % 256 * 44 + i_2_j_2_fused % 4 * 11 + j_3 * 11 + j_4)
                                    v_k = T.axis.reduce(8192, k_0 * 512 + k_1 * 4 + k_2)
                                    T.reads(A_shared[v_i, v_k], B_shared[v_k, v_j])
                                    T.writes(C_local[v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        C_local[v_i, v_j] = T.float16(0.0)
                                    C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                        for ax0, ax1 in T.grid(20, 11):
                            with T.block("C_local"):
                                v0 = T.axis.spatial(1280, i_0_j_0_fused * 320 + i_1_j_1_fused // 256 * 80 + i_2_j_2_fused // 4 * 20 + ax0)
                                v1 = T.axis.spatial(11264, i_1_j_1_fused % 256 * 44 + i_2_j_2_fused % 4 * 11 + ax1)
                                T.reads(C_local[v0, v1])
                                T.writes(C[v0, v1])
                                C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 4, 4, 4, 5])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 256, 4, 1, 11])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[16, 128, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
2025-10-01 10:59:54 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-01 10:59:54 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2025-10-01 10:59:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 498 failure(s)
2025-10-01 10:59:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 994 failure(s)
2025-10-01 10:59:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 1489 failure(s)
2025-10-01 10:59:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 1981 failure(s)
2025-10-01 10:59:59 [INFO] [evolutionary_search.cc:723] Sampled 67 candidate(s)
2025-10-01 11:00:02 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 93 failure(s)
2025-10-01 11:00:04 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 107 failure(s)
2025-10-01 11:00:06 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 101 failure(s)
2025-10-01 11:00:08 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 110 failure(s)
2025-10-01 11:00:08 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9990  0.9987  0.9982  0.9980  0.9977  0.9962  0.9951  0.9937  0.9916  0.9915  0.9908  0.9904  0.9901  0.9880  0.9874
[17 : 32]:	0.9870  0.9869  0.9867  0.9832  0.9818  0.9817  0.9816  0.9811  0.9804  0.9793  0.9789  0.9777  0.9777  0.9770  0.9769  0.9766
[33 : 48]:	0.9764  0.9759  0.9753  0.9751  0.9742  0.9741  0.9739  0.9738  0.9730  0.9728  0.9717  0.9710  0.9705  0.9703  0.9701  0.9695
[49 : 64]:	0.9695  0.9695  0.9687  0.9666  0.9665  0.9664  0.9655  0.9650  0.9649  0.9641  0.9637  0.9637  0.9631  0.9631  0.9627  0.9621
2025-10-01 11:00:08 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-01 11:00:08 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #1: Error in building:
LocalBuilder: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(4, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(80, 176, 2, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_1_j_1_fused // 2 * 640 + i_2_j_2_fused // 16 * 160 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused * 5632 + i_1_j_1_fused % 2 * 2816 + i_2_j_2_fused % 16 * 176 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(40):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(1280, (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) // 2)
                                    v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) % 2)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(44):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 5632)
                                        v1 = T.axis.spatial(11264, i_0_j_0_fused * 5632 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 5632)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 80, 176, 2, 2, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_1_j_1_fused // 2 * 640 + i_2_j_2_fused // 16 * 160 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused * 5632 + i_1_j_1_fused % 2 * 2816 + i_2_j_2_fused % 16 * 176 + j_3 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(160, 176):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_1_j_1_fused // 2 * 640 + i_2_j_2_fused // 16 * 160 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused * 5632 + i_1_j_1_fused % 2 * 2816 + i_2_j_2_fused % 16 * 176 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 2, 4, 80, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 2, 16, 176, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #2: GFLOPs: 185.8569. Time: 1270995.3610 us. Best GFLOPs: 185.8569
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #3: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(5, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(8, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(176, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(4, 1, 32, 16):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_0_j_0_fused * 256 + i_1_j_1_fused // 4 * 128 + i_3_init * 32 + i_4_init)
                            v_j = T.axis.spatial(11264, i_1_j_1_fused % 4 * 2816 + i_2_j_2_fused * 16 + j_3_init * 16 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(176, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, i_0_j_0_fused * 256 + (ax0_ax1_fused_0 * 1408 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 1408 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 176 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 512)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(176, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 1408 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 11264)
                                        v1 = T.axis.spatial(11264, (ax0_ax1_fused_0 * 1408 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 11264)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 4, 1, 2, 32, 16):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_0_j_0_fused * 256 + i_1_j_1_fused // 4 * 128 + i_3 * 32 + i_4)
                                v_j = T.axis.spatial(11264, i_1_j_1_fused % 4 * 2816 + i_2_j_2_fused * 16 + j_3 * 16 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(128, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_0_j_0_fused * 256 + i_1_j_1_fused // 4 * 128 + ax0)
                            v1 = T.axis.spatial(11264, i_1_j_1_fused % 4 * 2816 + i_2_j_2_fused * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[5, 2, 1, 4, 32])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 4, 176, 1, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 176, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 176, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #4: GFLOPs: 12108.8764. Time: 19508.2677 us. Best GFLOPs: 12108.8764
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #5: GFLOPs: 572.3085. Time: 412755.0047 us. Best GFLOPs: 12108.8764
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #6: GFLOPs: 984.3424. Time: 239980.7127 us. Best GFLOPs: 12108.8764
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #7: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(5, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(4, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(352, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(4, 1, 32, 16):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_0_j_0_fused * 256 + i_2_j_2_fused // 176 * 128 + i_3_init * 32 + i_4_init)
                            v_j = T.axis.spatial(11264, i_1_j_1_fused * 2816 + i_2_j_2_fused % 176 * 16 + j_3_init * 16 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(8192):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(352, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, i_0_j_0_fused * 256 + (ax0_ax1_fused_0 * 1408 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2))
                                        v1 = T.axis.spatial(8192, k_0)
                                        T.where((ax0_ax1_fused_0 * 352 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 256)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(32):
                            for ax0_ax1_fused_1 in T.thread_binding(352, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0)
                                    v1 = T.axis.spatial(11264, ax0_ax1_fused_0 * 352 + ax0_ax1_fused_1)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 4, 1, 1, 32, 16):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_0_j_0_fused * 256 + i_2_j_2_fused // 176 * 128 + i_3 * 32 + i_4)
                                v_j = T.axis.spatial(11264, i_1_j_1_fused * 2816 + i_2_j_2_fused % 176 * 16 + j_3 * 16 + j_4)
                                v_k = T.axis.reduce(8192, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(128, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_0_j_0_fused * 256 + i_2_j_2_fused // 176 * 128 + ax0)
                            v1 = T.axis.spatial(11264, i_1_j_1_fused * 2816 + i_2_j_2_fused % 176 * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[5, 1, 2, 4, 32])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 4, 176, 1, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[8192, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 352, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 352], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #8: GFLOPs: 4641.6914. Time: 50891.6217 us. Best GFLOPs: 12108.8764
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #9: GFLOPs: 8224.6029. Time: 28721.5328 us. Best GFLOPs: 12108.8764
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #10: GFLOPs: 14385.6819. Time: 16420.7163 us. Best GFLOPs: 14385.6819
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #11: GFLOPs: 258.7112. Time: 913076.8227 us. Best GFLOPs: 14385.6819
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #12: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(16, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(320, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 11, 2, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_0_j_0_fused // 4 * 320 + i_1_j_1_fused // 64 * 64 + i_2_j_2_fused // 4 * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + i_1_j_1_fused % 64 * 44 + i_2_j_2_fused % 4 * 11 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, i_0_j_0_fused // 4 * 320 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 640)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(11):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2816)
                                        v1 = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2816)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 11, 1, 2, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_0_j_0_fused // 4 * 320 + i_1_j_1_fused // 64 * 64 + i_2_j_2_fused // 4 * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + i_1_j_1_fused % 64 * 44 + i_2_j_2_fused % 4 * 11 + j_3 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 11):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_0_j_0_fused // 4 * 320 + i_1_j_1_fused // 64 * 64 + i_2_j_2_fused // 4 * 2 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + i_1_j_1_fused % 64 * 44 + i_2_j_2_fused % 4 * 11 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 5, 32, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 64, 4, 11, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 128, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #13: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(64, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(80, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 11, 4, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_0_j_0_fused // 16 * 320 + i_1_j_1_fused // 16 * 64 + i_2_j_2_fused // 4 * 4 + i_3_init * 4 + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused % 16 * 704 + i_1_j_1_fused % 16 * 44 + i_2_j_2_fused % 4 * 11 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, i_0_j_0_fused // 16 * 320 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 640)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(22):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) // 704)
                                    v1 = T.axis.spatial(11264, i_0_j_0_fused % 16 * 704 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) % 704)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 11, 2, 4, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_0_j_0_fused // 16 * 320 + i_1_j_1_fused // 16 * 64 + i_2_j_2_fused // 4 * 4 + i_3 * 4 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused % 16 * 704 + i_1_j_1_fused % 16 * 44 + i_2_j_2_fused % 4 * 11 + j_3 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(4, 11):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_0_j_0_fused // 16 * 320 + i_1_j_1_fused // 16 * 64 + i_2_j_2_fused // 4 * 4 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused % 16 * 704 + i_1_j_1_fused % 16 * 44 + i_2_j_2_fused % 4 * 11 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 5, 16, 1, 4])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[16, 16, 4, 11, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #14: GFLOPs: 1160.3551. Time: 203578.3690 us. Best GFLOPs: 14385.6819
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #15: GFLOPs: 14334.8508. Time: 16478.9439 us. Best GFLOPs: 14385.6819
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #16: GFLOPs: 2494.3581. Time: 94703.0027 us. Best GFLOPs: 14385.6819
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #17: GFLOPs: 13750.7022. Time: 17178.9918 us. Best GFLOPs: 14385.6819
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #18: GFLOPs: 1098.0810. Time: 215123.6570 us. Best GFLOPs: 14385.6819
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #19: GFLOPs: 3896.5070. Time: 60624.3487 us. Best GFLOPs: 14385.6819
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #20: GFLOPs: 6416.6068. Time: 36814.3487 us. Best GFLOPs: 14385.6819
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #21: GFLOPs: 264.8138. Time: 892034.9933 us. Best GFLOPs: 14385.6819
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #22: GFLOPs: 1150.8420. Time: 205261.1897 us. Best GFLOPs: 14385.6819
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #23: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(4, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(80, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(4, 8, 4, 44):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_2_j_2_fused * 16 + i_3_init * 4 + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused * 1408 + i_1_j_1_fused * 352 + j_3_init * 44 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2048):
                        for ax0_ax1_fused_0 in range(32):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, (ax0_ax1_fused_0 * 160 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(8192, k_0 * 4 + (ax0_ax1_fused_0 * 160 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(71):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0 * 4 + (ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1) // 1408)
                                    v1 = T.axis.spatial(11264, i_0_j_0_fused * 1408 + (ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1) % 1408)
                                    T.where(ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1 < 5632)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 4, 8, 4, 4, 44):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_2_j_2_fused * 16 + i_3 * 4 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused * 1408 + i_1_j_1_fused * 352 + j_3 * 44 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 4 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(16, 352):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_2_j_2_fused * 16 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused * 1408 + i_1_j_1_fused * 352 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 80, 4, 4])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 4, 1, 8, 44])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2048, 1, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 80, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 80], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #24: GFLOPs: 38456.3890. Time: 6142.6256 us. Best GFLOPs: 38456.3890
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #25: GFLOPs: 2354.9920. Time: 100307.4340 us. Best GFLOPs: 38456.3890
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #26: GFLOPs: 1673.7705. Time: 141132.3750 us. Best GFLOPs: 38456.3890
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #27: GFLOPs: 99.2405. Time: 2380311.1977 us. Best GFLOPs: 38456.3890
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #28: GFLOPs: 6194.1025. Time: 38136.7923 us. Best GFLOPs: 38456.3890
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #29: GFLOPs: 16453.3548. Time: 14357.1450 us. Best GFLOPs: 38456.3890
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #30: GFLOPs: 130.6528. Time: 1808022.1353 us. Best GFLOPs: 38456.3890
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #31: GFLOPs: 43413.2786. Time: 5441.2661 us. Best GFLOPs: 43413.2786
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #32: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(4, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(5, 88, 1, 16):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_1_j_1_fused * 320 + i_2_j_2_fused // 2 * 5 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused * 2816 + i_2_j_2_fused % 2 * 1408 + j_3_init * 16 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2048):
                        for ax0_ax1_fused_0 in range(10):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(8192, k_0 * 4 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(44):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 4 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2816)
                                        v1 = T.axis.spatial(11264, i_0_j_0_fused * 2816 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2816)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 5, 88, 2, 1, 16):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_1_j_1_fused * 320 + i_2_j_2_fused // 2 * 5 + i_3 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused * 2816 + i_2_j_2_fused % 2 * 1408 + j_3 * 16 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 4 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(5, 1408):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_1_j_1_fused * 320 + i_2_j_2_fused // 2 * 5 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused * 2816 + i_2_j_2_fused % 2 * 1408 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 4, 64, 5, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 1, 2, 88, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2048, 2, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 128, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #33: GFLOPs: 1243.0576. Time: 190033.9963 us. Best GFLOPs: 43413.2786
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #34: GFLOPs: 744.9721. Time: 317090.0063 us. Best GFLOPs: 43413.2786
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #35: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(16, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(320, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 11, 2, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_0_j_0_fused // 4 * 320 + i_1_j_1_fused // 64 * 64 + i_2_j_2_fused // 4 * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + i_1_j_1_fused % 64 * 44 + i_2_j_2_fused % 4 * 11 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, i_0_j_0_fused // 4 * 320 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 640)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(44):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) // 2816)
                                    v1 = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) % 2816)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 11, 1, 2, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_0_j_0_fused // 4 * 320 + i_1_j_1_fused // 64 * 64 + i_2_j_2_fused // 4 * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + i_1_j_1_fused % 64 * 44 + i_2_j_2_fused % 4 * 11 + j_3 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 11):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_0_j_0_fused // 4 * 320 + i_1_j_1_fused // 64 * 64 + i_2_j_2_fused // 4 * 2 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + i_1_j_1_fused % 64 * 44 + i_2_j_2_fused % 4 * 11 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 5, 32, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 64, 4, 11, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #36: GFLOPs: 4430.6597. Time: 53315.5820 us. Best GFLOPs: 43413.2786
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #37: GFLOPs: 415.6607. Time: 568307.7797 us. Best GFLOPs: 43413.2786
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #38: GFLOPs: 118.6883. Time: 1990282.8773 us. Best GFLOPs: 43413.2786
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #39: GFLOPs: 3072.5737. Time: 76881.2153 us. Best GFLOPs: 43413.2786
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #40: GFLOPs: 491.1321. Time: 480976.8880 us. Best GFLOPs: 43413.2786
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #41: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(11, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(320, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(256, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 1, 8, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_1_j_1_fused // 16 * 64 + i_2_j_2_fused // 64 * 16 + i_3_init * 8 + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused * 1024 + i_1_j_1_fused % 16 * 64 + i_2_j_2_fused % 64 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2048):
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, (ax0_ax1_fused_0 * 2048 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(8192, k_0 * 4 + (ax0_ax1_fused_0 * 2048 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 5120)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 4 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(11264, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 1024)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 1, 4, 8, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_1_j_1_fused // 16 * 64 + i_2_j_2_fused // 64 * 16 + i_3 * 8 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused * 1024 + i_1_j_1_fused % 16 * 64 + i_2_j_2_fused % 64 + j_3 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 4 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(16, 1):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_1_j_1_fused // 16 * 64 + i_2_j_2_fused // 64 * 16 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused * 1024 + i_1_j_1_fused % 16 * 64 + i_2_j_2_fused % 64 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 20, 4, 2, 8])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[11, 16, 64, 1, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2048, 1, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 256, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 256, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #42: GFLOPs: 47296.4079. Time: 4994.5273 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #43: GFLOPs: 492.6041. Time: 479539.6727 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #44: GFLOPs: 262.3734. Time: 900332.1940 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #45: GFLOPs: 763.1437. Time: 309539.6117 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #46: GFLOPs: 15061.6724. Time: 15683.7299 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #47: GFLOPs: 2161.3768. Time: 109292.9280 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #48: GFLOPs: 1752.6523. Time: 134780.4157 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #49: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(4, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(80, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(4, 8, 4, 44):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_2_j_2_fused * 16 + i_3_init * 4 + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused * 1408 + i_1_j_1_fused * 352 + j_3_init * 44 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, (ax0_ax1_fused_0 * 320 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 320 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(36):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1) // 1408)
                                    v1 = T.axis.spatial(11264, i_0_j_0_fused * 1408 + (ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1) % 1408)
                                    T.where(ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1 < 2816)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 4, 8, 2, 4, 44):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_2_j_2_fused * 16 + i_3 * 4 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused * 1408 + i_1_j_1_fused * 352 + j_3 * 44 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(16, 352):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_2_j_2_fused * 16 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused * 1408 + i_1_j_1_fused * 352 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 80, 4, 4])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 4, 1, 8, 44])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 80, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 80], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #50: GFLOPs: 578.1177. Time: 408607.4217 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #51: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(16, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(320, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 11, 2, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_0_j_0_fused // 4 * 320 + i_1_j_1_fused // 64 * 64 + i_2_j_2_fused // 4 * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + i_1_j_1_fused % 64 * 44 + i_2_j_2_fused % 4 * 11 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(5):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(1280, i_0_j_0_fused // 4 * 320 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) // 2)
                                    v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) % 2)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(11):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2816)
                                        v1 = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2816)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 11, 1, 2, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_0_j_0_fused // 4 * 320 + i_1_j_1_fused // 64 * 64 + i_2_j_2_fused // 4 * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + i_1_j_1_fused % 64 * 44 + i_2_j_2_fused % 4 * 11 + j_3 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 11):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_0_j_0_fused // 4 * 320 + i_1_j_1_fused // 64 * 64 + i_2_j_2_fused // 4 * 2 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + i_1_j_1_fused % 64 * 44 + i_2_j_2_fused % 4 * 11 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 5, 32, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 64, 4, 11, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 128, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #52: GFLOPs: 44818.4868. Time: 5270.6644 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #53: GFLOPs: 407.0278. Time: 580361.3280 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #54: GFLOPs: 341.3016. Time: 692124.4303 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #55: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(11, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(4, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(512, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 32, 20, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_1_j_1_fused * 320 + i_2_j_2_fused // 32 * 20 + i_3_init * 20 + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused * 1024 + i_2_j_2_fused % 32 * 32 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(10):
                            for ax0_ax1_fused_1 in T.thread_binding(512, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(8192, k_0 * 8 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 8)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(512, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0 * 8 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1) // 1024)
                                    v1 = T.axis.spatial(11264, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1) % 1024)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 1, 32, 2, 20, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_1_j_1_fused * 320 + i_2_j_2_fused // 32 * 20 + i_3 * 20 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused * 1024 + i_2_j_2_fused % 32 * 32 + j_3 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 8 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(20, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_1_j_1_fused * 320 + i_2_j_2_fused // 32 * 20 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused * 1024 + i_2_j_2_fused % 32 * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 4, 16, 1, 20])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[11, 1, 32, 32, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 4, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 512, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 512], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #56: GFLOPs: 251.4935. Time: 939281.4940 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #57: GFLOPs: 254.8169. Time: 927031.2500 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #58: GFLOPs: 546.7625. Time: 432039.8760 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #59: GFLOPs: 174.2106. Time: 1355963.2160 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #60: GFLOPs: 2488.6007. Time: 94922.0987 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #61: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(20, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(64, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(88, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 16, 2, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_0_j_0_fused * 64 + i_1_j_1_fused // 2 * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(11264, i_1_j_1_fused % 2 * 5632 + i_2_j_2_fused * 64 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(88, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, i_0_j_0_fused * 64 + (ax0_ax1_fused_0 * 352 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 352 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 88 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 128)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(32):
                            for ax0_ax1_fused_1 in T.thread_binding(88, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 704 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 11264)
                                        v1 = T.axis.spatial(11264, (ax0_ax1_fused_0 * 704 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 11264)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 16, 1, 2, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_0_j_0_fused * 64 + i_1_j_1_fused // 2 * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(11264, i_1_j_1_fused % 2 * 5632 + i_2_j_2_fused * 64 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 64):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_0_j_0_fused * 64 + i_1_j_1_fused // 2 * 2 + ax0)
                            v1 = T.axis.spatial(11264, i_1_j_1_fused % 2 * 5632 + i_2_j_2_fused * 64 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[20, 32, 1, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 2, 88, 16, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 88, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 88, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #62: GFLOPs: 43485.1680. Time: 5432.2706 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #63: GFLOPs: 867.6482. Time: 272256.8763 us. Best GFLOPs: 47296.4079
2025-10-01 11:12:28 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #64: GFLOPs: 48311.9967. Time: 4889.5350 us. Best GFLOPs: 48311.9967
2025-10-01 11:12:28 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-01 11:12:28 [INFO] [evolutionary_search.cc:715] Picked top 51 candidate(s) from database
2025-10-01 11:12:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 444 failure(s)
2025-10-01 11:12:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 887 failure(s)
2025-10-01 11:12:32 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 1331 failure(s)
2025-10-01 11:12:32 [INFO] [evolutionary_search.cc:723] Sampled 52 candidate(s)
2025-10-01 11:12:34 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 107 failure(s)
2025-10-01 11:12:36 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 97 failure(s)
2025-10-01 11:12:39 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 117 failure(s)
2025-10-01 11:12:41 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 87 failure(s)
2025-10-01 11:12:41 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9993  0.9986  0.9984  0.9965  0.9965  0.9958  0.9933  0.9911  0.9906  0.9900  0.9896  0.9889  0.9887  0.9879  0.9872
[17 : 32]:	0.9869  0.9868  0.9860  0.9855  0.9848  0.9841  0.9838  0.9837  0.9824  0.9813  0.9807  0.9805  0.9802  0.9801  0.9799  0.9799
[33 : 48]:	0.9791  0.9782  0.9780  0.9763  0.9745  0.9744  0.9742  0.9741  0.9724  0.9724  0.9712  0.9707  0.9686  0.9676  0.9675  0.9675
[49 : 64]:	0.9667  0.9663  0.9657  0.9653  0.9649  0.9649  0.9647  0.9647  0.9646  0.9641  0.9640  0.9639  0.9635  0.9633  0.9625  0.9622
2025-10-01 11:12:41 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-01 11:12:41 [INFO] [evolutionary_search.cc:730] Sending 63 candidates(s) for measurement
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #65: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(32, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(10, 176, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_0_j_0_fused // 2 * 640 + i_1_j_1_fused // 8 * 160 + i_2_j_2_fused // 4 * 10 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused % 2 * 5632 + i_1_j_1_fused % 8 * 704 + i_2_j_2_fused % 4 * 176 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, i_0_j_0_fused // 2 * 640 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 1280)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(88):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 5632)
                                        v1 = T.axis.spatial(11264, i_0_j_0_fused % 2 * 5632 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 5632)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 10, 176, 1, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_0_j_0_fused // 2 * 640 + i_1_j_1_fused // 8 * 160 + i_2_j_2_fused // 4 * 10 + i_3 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused % 2 * 5632 + i_1_j_1_fused % 8 * 704 + i_2_j_2_fused % 4 * 176 + j_3 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(10, 176):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_0_j_0_fused // 2 * 640 + i_1_j_1_fused // 8 * 160 + i_2_j_2_fused // 4 * 10 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused % 2 * 5632 + i_1_j_1_fused % 8 * 704 + i_2_j_2_fused % 4 * 176 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 4, 16, 10, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 8, 4, 176, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #66: GFLOPs: 299.2084. Time: 789493.8150 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #67: GFLOPs: 2373.6121. Time: 99520.5587 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #68: GFLOPs: 118.3722. Time: 1995596.8423 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #69: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(176, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(1024, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(10, 1, 4, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_1_j_1_fused // 44 * 320 + i_2_j_2_fused // 128 * 40 + i_3_init * 4 + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused * 5632 + i_1_j_1_fused % 44 * 128 + i_2_j_2_fused % 128 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(1024, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, (ax0_ax1_fused_0 * 8192 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 8192 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 2560)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(1024, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 8192 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 5632)
                                        v1 = T.axis.spatial(11264, i_0_j_0_fused * 5632 + (ax0_ax1_fused_0 * 8192 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 5632)
                                        T.where((ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 11264)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 10, 1, 1, 4, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_1_j_1_fused // 44 * 320 + i_2_j_2_fused // 128 * 40 + i_3 * 4 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused * 5632 + i_1_j_1_fused % 44 * 128 + i_2_j_2_fused % 128 + j_3 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(40, 1):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_1_j_1_fused // 44 * 320 + i_2_j_2_fused // 128 * 40 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused * 5632 + i_1_j_1_fused % 44 * 128 + i_2_j_2_fused % 128 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 4, 8, 10, 4])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 44, 128, 1, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 1024, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 1024, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #70: GFLOPs: 1462.1684. Time: 161556.7727 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #71: GFLOPs: 127.4963. Time: 1852784.8307 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #72: GFLOPs: 38568.6782. Time: 6124.7419 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #73: GFLOPs: 1472.6456. Time: 160407.3687 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #74: GFLOPs: 214.6956. Time: 1100270.1007 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #75: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(64, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(80, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 22, 4, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_1_j_1_fused // 4 * 80 + i_2_j_2_fused // 4 * 4 + i_3_init * 4 + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused * 2816 + i_1_j_1_fused % 4 * 704 + i_2_j_2_fused % 4 * 176 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2048):
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, (ax0_ax1_fused_0 * 320 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(8192, k_0 * 4 + (ax0_ax1_fused_0 * 320 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(141):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0 * 4 + (ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1) // 2816)
                                    v1 = T.axis.spatial(11264, i_0_j_0_fused * 2816 + (ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1) % 2816)
                                    T.where(ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1 < 11264)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 1, 22, 1, 4, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_1_j_1_fused // 4 * 80 + i_2_j_2_fused // 4 * 4 + i_3 * 4 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused * 2816 + i_1_j_1_fused % 4 * 704 + i_2_j_2_fused % 4 * 176 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 4 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(4, 176):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_1_j_1_fused // 4 * 80 + i_2_j_2_fused // 4 * 4 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused * 2816 + i_1_j_1_fused % 4 * 704 + i_2_j_2_fused % 4 * 176 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 16, 20, 1, 4])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 4, 4, 22, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2048, 4, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 80, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 80], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #76: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(80, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(176, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(4, 8, 1, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_0_j_0_fused // 4 * 640 + i_1_j_1_fused // 2 * 16 + i_2_j_2_fused // 44 * 4 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + i_1_j_1_fused % 2 * 1408 + i_2_j_2_fused % 44 * 32 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(8192):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(176, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, i_0_j_0_fused // 4 * 640 + (ax0_ax1_fused_0 * 704 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2))
                                        v1 = T.axis.spatial(8192, k_0)
                                        T.where((ax0_ax1_fused_0 * 176 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 640)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(176, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0)
                                        v1 = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + ax0_ax1_fused_0 * 704 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 4, 8, 1, 1, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_0_j_0_fused // 4 * 640 + i_1_j_1_fused // 2 * 16 + i_2_j_2_fused // 44 * 4 + i_3 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + i_1_j_1_fused % 2 * 1408 + i_2_j_2_fused % 44 * 32 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(8192, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(4, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_0_j_0_fused // 4 * 640 + i_1_j_1_fused // 2 * 16 + i_2_j_2_fused // 44 * 4 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + i_1_j_1_fused % 2 * 1408 + i_2_j_2_fused % 44 * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 40, 4, 4, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 2, 44, 8, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[8192, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 176, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 176, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #77: GFLOPs: 118.8303. Time: 1987903.3200 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #78: GFLOPs: 25549.3391. Time: 9245.7656 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #79: GFLOPs: 120.1956. Time: 1965322.9167 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #80: GFLOPs: 493.3393. Time: 478825.0323 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #81: GFLOPs: 555.0908. Time: 425557.7797 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #82: GFLOPs: 246.8081. Time: 957112.7927 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #83: GFLOPs: 1983.5724. Time: 119089.7827 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #84: GFLOPs: 1695.2553. Time: 139343.7293 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #85: GFLOPs: 15519.8958. Time: 15220.6693 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #86: GFLOPs: 19230.4386. Time: 12283.8177 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #87: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(20, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(2816, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 1, 2, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_0_j_0_fused // 2 * 128 + i_1_j_1_fused // 352 * 16 + i_2_j_2_fused // 16 * 4 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused % 2 * 5632 + i_1_j_1_fused % 352 * 16 + i_2_j_2_fused % 16 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(8192):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(1280, i_0_j_0_fused // 2 * 128 + ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1)
                                    v1 = T.axis.spatial(8192, k_0)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(44):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0)
                                        v1 = T.axis.spatial(11264, i_0_j_0_fused % 2 * 5632 + ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 1, 1, 2, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_0_j_0_fused // 2 * 128 + i_1_j_1_fused // 352 * 16 + i_2_j_2_fused // 16 * 4 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused % 2 * 5632 + i_1_j_1_fused % 352 * 16 + i_2_j_2_fused % 16 + j_3 + j_4)
                                v_k = T.axis.reduce(8192, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(4, 1):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_0_j_0_fused // 2 * 128 + i_1_j_1_fused // 352 * 16 + i_2_j_2_fused // 16 * 4 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused % 2 * 5632 + i_1_j_1_fused % 352 * 16 + i_2_j_2_fused % 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[10, 8, 4, 2, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 352, 16, 1, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[8192, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 64, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #88: GFLOPs: 2358.7749. Time: 100146.5657 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #89: GFLOPs: 257.6101. Time: 916979.7360 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #90: GFLOPs: 18525.0210. Time: 12751.5754 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #91: GFLOPs: 5959.3870. Time: 39638.8420 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #92: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(40, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(1024, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 22, 4, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_0_j_0_fused * 640 + i_1_j_1_fused // 4 * 64 + i_2_j_2_fused // 64 * 4 + i_3_init * 4 + i_4_init)
                            v_j = T.axis.spatial(11264, i_1_j_1_fused % 4 * 2816 + i_2_j_2_fused % 64 * 44 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(8192):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(1024, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(1280, i_0_j_0_fused * 640 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1))
                                    v1 = T.axis.spatial(8192, k_0)
                                    T.where(ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 < 640)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(11):
                            for ax0_ax1_fused_1 in T.thread_binding(1024, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0)
                                    v1 = T.axis.spatial(11264, ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 22, 1, 4, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_0_j_0_fused * 640 + i_1_j_1_fused // 4 * 64 + i_2_j_2_fused // 64 * 4 + i_3 * 4 + i_4)
                                v_j = T.axis.spatial(11264, i_1_j_1_fused % 4 * 2816 + i_2_j_2_fused % 64 * 44 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(8192, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(4, 44):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_0_j_0_fused * 640 + i_1_j_1_fused // 4 * 64 + i_2_j_2_fused // 64 * 4 + ax0)
                            v1 = T.axis.spatial(11264, i_1_j_1_fused % 4 * 2816 + i_2_j_2_fused % 64 * 44 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 10, 16, 1, 4])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 4, 64, 22, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[8192, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 1024], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 1024], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #93: GFLOPs: 8163.5641. Time: 28936.2830 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #94: GFLOPs: 8133.4711. Time: 29043.3443 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #95: GFLOPs: 869.5085. Time: 271674.3977 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #96: GFLOPs: 7042.1064. Time: 33544.3953 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #97: GFLOPs: 897.3391. Time: 263248.5350 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #98: GFLOPs: 494.9781. Time: 477239.7460 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #99: GFLOPs: 2605.5807. Time: 90660.4817 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #100: GFLOPs: 1042.6542. Time: 226559.4887 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #101: GFLOPs: 363.4885. Time: 649878.1330 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #102: GFLOPs: 2512.6422. Time: 94013.8650 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #103: GFLOPs: 1317.4239. Time: 179306.9050 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #104: GFLOPs: 185.3950. Time: 1274161.5397 us. Best GFLOPs: 48311.9967
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #105: GFLOPs: 63890.7431. Time: 3697.2993 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #106: GFLOPs: 492.9477. Time: 479205.4033 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #107: GFLOPs: 45312.2430. Time: 5213.2313 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #108: GFLOPs: 1838.9110. Time: 128458.2010 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #109: GFLOPs: 2584.1177. Time: 91413.4823 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #110: GFLOPs: 4873.6399. Time: 48469.5637 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #111: GFLOPs: 6499.7567. Time: 36343.3913 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #112: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(4, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(5, 1408, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_0_j_0_fused // 2 * 320 + i_1_j_1_fused * 80 + i_2_j_2_fused // 4 * 5 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused % 2 * 5632 + i_2_j_2_fused % 4 * 1408 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, i_0_j_0_fused // 2 * 320 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 640)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(88):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 5632)
                                        v1 = T.axis.spatial(11264, i_0_j_0_fused % 2 * 5632 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 5632)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 5, 1408, 1, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_0_j_0_fused // 2 * 320 + i_1_j_1_fused * 80 + i_2_j_2_fused // 4 * 5 + i_3 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused % 2 * 5632 + i_2_j_2_fused % 4 * 1408 + j_3 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(5, 1408):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_0_j_0_fused // 2 * 320 + i_1_j_1_fused * 80 + i_2_j_2_fused // 4 * 5 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused % 2 * 5632 + i_2_j_2_fused % 4 * 1408 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 4, 16, 5, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 1, 4, 1408, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #113: GFLOPs: 129.9406. Time: 1817932.1287 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #114: GFLOPs: 325.3619. Time: 726032.0637 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #115: GFLOPs: 17039.5845. Time: 13863.2020 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #116: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(8, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(440, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(4, 8, 4, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_1_j_1_fused * 160 + i_2_j_2_fused // 44 * 16 + i_3_init * 4 + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused * 1408 + i_2_j_2_fused % 44 * 32 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2048):
                        for ax0_ax1_fused_0 in range(12):
                            for ax0_ax1_fused_1 in T.thread_binding(440, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(1280, (ax0_ax1_fused_0 * 440 + ax0_ax1_fused_1) // 4)
                                    v1 = T.axis.spatial(8192, k_0 * 4 + (ax0_ax1_fused_0 * 440 + ax0_ax1_fused_1) % 4)
                                    T.where(ax0_ax1_fused_0 * 440 + ax0_ax1_fused_1 < 5120)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(440, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 4 + (ax0_ax1_fused_0 * 3520 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 1408)
                                        v1 = T.axis.spatial(11264, i_0_j_0_fused * 1408 + (ax0_ax1_fused_0 * 3520 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 1408)
                                        T.where((ax0_ax1_fused_0 * 440 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 5632)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 4, 8, 4, 4, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_1_j_1_fused * 160 + i_2_j_2_fused // 44 * 16 + i_3 * 4 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused * 1408 + i_2_j_2_fused % 44 * 32 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 4 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(16, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_1_j_1_fused * 160 + i_2_j_2_fused // 44 * 16 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused * 1408 + i_2_j_2_fused % 44 * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 8, 10, 4, 4])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 1, 44, 8, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2048, 1, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 440], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 440, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #117: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(8, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(880, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 2, 4, 32):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_0_j_0_fused * 320 + i_1_j_1_fused // 4 * 160 + i_2_j_2_fused // 44 * 8 + i_3_init * 4 + i_4_init)
                            v_j = T.axis.spatial(11264, i_1_j_1_fused % 4 * 2816 + i_2_j_2_fused % 44 * 64 + j_3_init * 32 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(8192):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(880, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(1280, i_0_j_0_fused * 320 + (ax0_ax1_fused_0 * 880 + ax0_ax1_fused_1))
                                    v1 = T.axis.spatial(8192, k_0)
                                    T.where(ax0_ax1_fused_0 * 880 + ax0_ax1_fused_1 < 320)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(880, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0)
                                        v1 = T.axis.spatial(11264, ax0_ax1_fused_0 * 7040 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2)
                                        T.where((ax0_ax1_fused_0 * 880 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 11264)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 2, 1, 4, 32):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_0_j_0_fused * 320 + i_1_j_1_fused // 4 * 160 + i_2_j_2_fused // 44 * 8 + i_3 * 4 + i_4)
                                v_j = T.axis.spatial(11264, i_1_j_1_fused % 4 * 2816 + i_2_j_2_fused % 44 * 64 + j_3 * 32 + j_4)
                                v_k = T.axis.reduce(8192, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(8, 64):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_0_j_0_fused * 320 + i_1_j_1_fused // 4 * 160 + i_2_j_2_fused // 44 * 8 + ax0)
                            v1 = T.axis.spatial(11264, i_1_j_1_fused % 4 * 2816 + i_2_j_2_fused % 44 * 64 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 2, 20, 2, 4])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 4, 44, 2, 32])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[8192, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 880], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 880, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #118: GFLOPs: 50378.5809. Time: 4688.9610 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #119: GFLOPs: 319.0730. Time: 740342.2850 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #120: GFLOPs: 305.2713. Time: 773814.0460 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #121: GFLOPs: 9667.7585. Time: 24434.1232 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #122: GFLOPs: 250.7608. Time: 942026.2043 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #123: GFLOPs: 27280.9654. Time: 8658.9018 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #124: GFLOPs: 838.7891. Time: 281624.0640 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #125: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(20, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(1024, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 22, 4, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_1_j_1_fused // 2 * 128 + i_2_j_2_fused // 64 * 8 + i_3_init * 4 + i_4_init)
                            v_j = T.axis.spatial(11264, i_1_j_1_fused % 2 * 5632 + i_2_j_2_fused % 64 * 88 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(8192):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(1024, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, ax0_ax1_fused_0 * 4096 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2)
                                        v1 = T.axis.spatial(8192, k_0)
                                        T.where((ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 1280)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(11):
                            for ax0_ax1_fused_1 in T.thread_binding(1024, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(8192, k_0)
                                    v1 = T.axis.spatial(11264, ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 22, 1, 4, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_1_j_1_fused // 2 * 128 + i_2_j_2_fused // 64 * 8 + i_3 * 4 + i_4)
                                v_j = T.axis.spatial(11264, i_1_j_1_fused % 2 * 5632 + i_2_j_2_fused % 64 * 88 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(8192, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(8, 88):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_1_j_1_fused // 2 * 128 + i_2_j_2_fused // 64 * 8 + ax0)
                            v1 = T.axis.spatial(11264, i_1_j_1_fused % 2 * 5632 + i_2_j_2_fused % 64 * 88 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 10, 16, 2, 4])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 2, 64, 22, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[8192, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 1024, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 1024], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #126: GFLOPs: 338.1036. Time: 698671.0610 us. Best GFLOPs: 63890.7431
2025-10-01 11:24:08 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #127: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1280, 8192), "float16"), B: T.Buffer((8192, 11264), "float16"), C: T.Buffer((1280, 11264), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1280, 11264), "float16", scope="local")
        A_shared = T.alloc_buffer((1280, 8192), "float16", scope="shared")
        B_shared = T.alloc_buffer((8192, 11264), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(20, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(44, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 1, 32, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1280, i_0_j_0_fused // 4 * 256 + i_1_j_1_fused // 11 * 64 + i_2_j_2_fused // 32 * 32 + i_3_init * 32 + i_4_init)
                            v_j = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + i_1_j_1_fused % 11 * 256 + i_2_j_2_fused % 32 * 8 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1280, i_0_j_0_fused // 4 * 256 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(11):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(8192, k_0 * 2 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 2816)
                                        v1 = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 2816)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 1, 2, 32, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1280, i_0_j_0_fused // 4 * 256 + i_1_j_1_fused // 11 * 64 + i_2_j_2_fused // 32 * 32 + i_3 * 32 + i_4)
                                v_j = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + i_1_j_1_fused % 11 * 256 + i_2_j_2_fused % 32 * 8 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(8192, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(32, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1280, i_0_j_0_fused // 4 * 256 + i_1_j_1_fused // 11 * 64 + i_2_j_2_fused // 32 * 32 + ax0)
                            v1 = T.axis.spatial(11264, i_0_j_0_fused % 4 * 2816 + i_1_j_1_fused % 11 * 256 + i_2_j_2_fused % 32 * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[5, 4, 2, 1, 32])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 11, 32, 1, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 11:24:08 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-01 11:24:09 [INFO] [evolutionary_search.cc:715] Picked top 102 candidate(s) from database
2025-10-01 11:24:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 402 failure(s)
2025-10-01 11:24:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 795 failure(s)
2025-10-01 11:24:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 1187 failure(s)
2025-10-01 11:24:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 1587 failure(s)
2025-10-01 11:24:13 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2025-10-01 11:24:15 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 102 failure(s)
2025-10-01 11:24:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 101 failure(s)
2025-10-01 11:24:22 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 95 failure(s)
2025-10-01 11:24:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x3edca938)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3efeb6f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3efeb658)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x3ef62af8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3edaebb8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3efeb3b8)]: 100 failure(s)
2025-10-01 11:24:26 [INFO] [evolutionary_search.cc:649] Scores of the best 1 candidates:
[1 : 1]:	0.9821
2025-10-01 11:24:26 [INFO] [evolutionary_search.cc:727] Got 1 candidate(s) with evolutionary search
2025-10-01 11:24:26 [INFO] [evolutionary_search.cc:730] Sending 1 candidates(s) for measurement
2025-10-01 11:24:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #128: GFLOPs: 65369.8447. Time: 3613.6418 us. Best GFLOPs: 65369.8447
