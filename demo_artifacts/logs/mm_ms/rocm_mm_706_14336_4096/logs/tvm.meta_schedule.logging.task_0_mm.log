2025-10-02 01:11:43 [INFO] [task_scheduler.cc:160] Initializing Task #0: "mm"
2025-10-02 01:11:43 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        for i, j, k in T.grid(706, 14336, 4096):
            with T.block("C"):
                v_i, v_j, v_k = T.axis.remap("SSR", [i, j, k])
                T.reads(A[v_i, v_k], B[v_k, v_j])
                T.writes(C[v_i, v_j])
                with T.init():
                    C[v_i, v_j] = T.float16(0.0)
                C[v_i, v_j] = C[v_i, v_j] + A[v_i, v_k] * B[v_k, v_j]
2025-10-02 01:11:43 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2025-10-02 01:11:43 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
            A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
            B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
            for i_0_j_0_fused in T.thread_binding(448, thread="blockIdx.x"):
                for i_1_j_1_fused in T.thread_binding(706, thread="vthread.x"):
                    for i_2_j_2_fused in T.thread_binding(8, thread="threadIdx.x"):
                        for k_0 in range(32):
                            for ax0_ax1_fused in range(90368):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, ax0_ax1_fused // 128)
                                    v1 = T.axis.spatial(4096, k_0 * 128 + ax0_ax1_fused % 128)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 8})
                                    A_shared[v0, v1] = A[v0, v1]
                            for ax0_ax1_fused in range(4096):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(4096, k_0 * 128 + ax0_ax1_fused // 32)
                                    v1 = T.axis.spatial(14336, i_0_j_0_fused * 32 + ax0_ax1_fused % 32)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    B_shared[v0, v1] = B[v0, v1]
                            for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(32, 1, 1, 4, 1, 4):
                                with T.block("C"):
                                    v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_2_j_2_fused // 4 + i_3 + i_4)
                                    v_j = T.axis.spatial(14336, i_0_j_0_fused * 32 + i_1_j_1_fused % 2 * 16 + i_2_j_2_fused % 4 * 4 + j_3 * 4 + j_4)
                                    v_k = T.axis.reduce(4096, k_0 * 128 + k_1 * 4 + k_2)
                                    T.reads(A_shared[v_i, v_k], B_shared[v_k, v_j])
                                    T.writes(C_local[v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        C_local[v_i, v_j] = T.float16(0.0)
                                    C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                        for ax0, ax1 in T.grid(1, 4):
                            with T.block("C_local"):
                                v0 = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_2_j_2_fused // 4 + ax0)
                                v1 = T.axis.spatial(14336, i_0_j_0_fused * 32 + i_1_j_1_fused % 2 * 16 + i_2_j_2_fused % 4 * 4 + ax1)
                                T.reads(C_local[v0, v1])
                                T.writes(C[v0, v1])
                                C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 2, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[448, 2, 4, 1, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[32, 32, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
2025-10-02 01:11:43 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-02 01:11:43 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2025-10-02 01:11:44 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 500 failure(s)
2025-10-02 01:11:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 994 failure(s)
2025-10-02 01:11:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 1499 failure(s)
2025-10-02 01:11:47 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 2001 failure(s)
2025-10-02 01:11:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 2496 failure(s)
2025-10-02 01:11:48 [INFO] [evolutionary_search.cc:723] Sampled 64 candidate(s)
2025-10-02 01:11:50 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 146 failure(s)
2025-10-02 01:11:52 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 126 failure(s)
2025-10-02 01:11:54 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 112 failure(s)
2025-10-02 01:11:56 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 103 failure(s)
2025-10-02 01:11:57 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9985  0.9983  0.9980  0.9979  0.9979  0.9977  0.9956  0.9940  0.9937  0.9928  0.9927  0.9922  0.9911  0.9883  0.9880  0.9879
[17 : 32]:	0.9878  0.9877  0.9875  0.9868  0.9855  0.9853  0.9851  0.9850  0.9842  0.9836  0.9834  0.9831  0.9819  0.9815  0.9812  0.9804
[33 : 48]:	0.9803  0.9800  0.9794  0.9787  0.9786  0.9780  0.9779  0.9772  0.9771  0.9765  0.9765  0.9765  0.9762  0.9747  0.9737  0.9731
[49 : 64]:	0.9728  0.9716  0.9712  0.9700  0.9689  0.9682  0.9677  0.9667  0.9637  0.9635  0.9620  0.9616  0.9611  0.9570  0.9569  0.9558
2025-10-02 01:11:57 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-02 01:11:57 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #1: GFLOPs: 48.4701. Time: 1710602.7017 us. Best GFLOPs: 48.4701
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #2: GFLOPs: 190.2739. Time: 435755.9407 us. Best GFLOPs: 190.2739
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #3: GFLOPs: 51.4445. Time: 1611698.0793 us. Best GFLOPs: 190.2739
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #4: GFLOPs: 118.1831. Time: 701563.8020 us. Best GFLOPs: 190.2739
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #5: GFLOPs: 172.5828. Time: 480424.4383 us. Best GFLOPs: 190.2739
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #6: GFLOPs: 112.2806. Time: 738444.3357 us. Best GFLOPs: 190.2739
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #7: GFLOPs: 63.0681. Time: 1314658.5283 us. Best GFLOPs: 190.2739
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #8: GFLOPs: 237.0089. Time: 349830.7697 us. Best GFLOPs: 237.0089
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #9: GFLOPs: 431.7241. Time: 192050.9030 us. Best GFLOPs: 431.7241
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #10: GFLOPs: 8899.6063. Time: 9316.4797 us. Best GFLOPs: 8899.6063
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #11: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(14, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(706, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 1, 1, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 1024 + i_1_j_1_fused % 2 * 512 + i_2_j_2_fused * 8 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 2824)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(64):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) // 1024)
                                    v1 = T.axis.spatial(14336, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) % 1024)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 2, 1, 1, 1, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 1024 + i_1_j_1_fused % 2 * 512 + i_2_j_2_fused * 8 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 4 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 1024 + i_1_j_1_fused % 2 * 512 + i_2_j_2_fused * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 1, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[14, 2, 64, 1, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 4, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #12: GFLOPs: 1366.4035. Time: 60679.7330 us. Best GFLOPs: 8899.6063
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #13: GFLOPs: 8496.0147. Time: 9759.0464 us. Best GFLOPs: 8899.6063
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #14: GFLOPs: 59.3149. Time: 1397843.5870 us. Best GFLOPs: 8899.6063
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #15: GFLOPs: 15684.0736. Time: 5286.4456 us. Best GFLOPs: 15684.0736
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #16: GFLOPs: 17423.9811. Time: 4758.5567 us. Best GFLOPs: 17423.9811
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #17: GFLOPs: 1787.8373. Time: 46376.1443 us. Best GFLOPs: 17423.9811
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #18: GFLOPs: 12566.8435. Time: 6597.7587 us. Best GFLOPs: 17423.9811
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #19: GFLOPs: 247.8314. Time: 334554.0567 us. Best GFLOPs: 17423.9811
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #20: GFLOPs: 31.7807. Time: 2608912.4347 us. Best GFLOPs: 17423.9811
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #21: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(14, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(512, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(353, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 2, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused // 256 * 353 + i_2_j_2_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 1024 + i_1_j_1_fused % 256 * 4 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(512):
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(353, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1) // 8)
                                    v1 = T.axis.spatial(4096, k_0 * 8 + (ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1) % 8)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(353, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0 * 8 + (ax0_ax1_fused_0 * 2824 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(14336, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 2824 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 1024)
                                        T.where((ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 8192)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(8, 1, 2, 1, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused // 256 * 353 + i_2_j_2_fused + i_3 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 1024 + i_1_j_1_fused % 256 * 4 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 8 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused // 256 * 353 + i_2_j_2_fused + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 1024 + i_1_j_1_fused % 256 * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 2, 353, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[14, 256, 1, 2, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[512, 8, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 353], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 353, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #22: GFLOPs: 12712.2435. Time: 6522.2949 us. Best GFLOPs: 17423.9811
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #23: GFLOPs: 62.7743. Time: 1320811.0350 us. Best GFLOPs: 17423.9811
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #24: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(14, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(706, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 2, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 1024 + i_1_j_1_fused % 2 * 512 + i_2_j_2_fused * 4 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(12):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 2824)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(32):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) // 1024)
                                    v1 = T.axis.spatial(14336, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) % 1024)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 2, 2, 1, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 1024 + i_1_j_1_fused % 2 * 512 + i_2_j_2_fused * 4 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 4 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 1024 + i_1_j_1_fused % 2 * 512 + i_2_j_2_fused * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 1, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[14, 2, 128, 2, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 4, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #25: GFLOPs: 4739.6081. Time: 17493.6408 us. Best GFLOPs: 17423.9811
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #26: GFLOPs: 189.7643. Time: 436926.2693 us. Best GFLOPs: 17423.9811
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #27: GFLOPs: 8034.0211. Time: 10320.2369 us. Best GFLOPs: 17423.9811
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #28: GFLOPs: 488.8032. Time: 169624.4913 us. Best GFLOPs: 17423.9811
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #29: GFLOPs: 25823.4628. Time: 3210.7623 us. Best GFLOPs: 25823.4628
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #30: GFLOPs: 244.1643. Time: 339578.6943 us. Best GFLOPs: 25823.4628
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #31: GFLOPs: 125.8181. Time: 658990.8447 us. Best GFLOPs: 25823.4628
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #32: GFLOPs: 12329.0168. Time: 6725.0295 us. Best GFLOPs: 25823.4628
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #33: GFLOPs: 8519.5968. Time: 9732.0335 us. Best GFLOPs: 25823.4628
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #34: GFLOPs: 64.6696. Time: 1282100.9927 us. Best GFLOPs: 25823.4628
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #35: GFLOPs: 63.0484. Time: 1315069.9053 us. Best GFLOPs: 25823.4628
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #36: GFLOPs: 190.7149. Time: 434748.3317 us. Best GFLOPs: 25823.4628
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #37: GFLOPs: 8215.3909. Time: 10092.3988 us. Best GFLOPs: 25823.4628
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #38: GFLOPs: 4741.5178. Time: 17486.5950 us. Best GFLOPs: 25823.4628
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #39: GFLOPs: 91.3319. Time: 907820.4750 us. Best GFLOPs: 25823.4628
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #40: GFLOPs: 31545.2752. Time: 2628.3810 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #41: GFLOPs: 2451.6705. Time: 33818.9823 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #42: Error in building:
LocalBuilder: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(8, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(353, 2, 1, 14):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused // 4 * 353 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 7168 + i_1_j_1_fused % 4 * 1792 + i_2_j_2_fused * 28 + j_3_init * 14 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2048):
                        for ax0_ax1_fused_0 in range(23):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) // 2)
                                    v1 = T.axis.spatial(4096, k_0 * 2 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) % 2)
                                    T.where(ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1 < 1412)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(224):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(4096, k_0 * 2 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) // 7168)
                                    v1 = T.axis.spatial(14336, i_0_j_0_fused * 7168 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) % 7168)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 353, 2, 2, 1, 14):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused // 4 * 353 + i_3 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 7168 + i_1_j_1_fused % 4 * 1792 + i_2_j_2_fused * 28 + j_3 * 14 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(353, 28):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused // 4 * 353 + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 7168 + i_1_j_1_fused % 4 * 1792 + i_2_j_2_fused * 28 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 2, 1, 353, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 4, 64, 2, 14])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2048, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #43: GFLOPs: 178.8170. Time: 463675.1707 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #44: GFLOPs: 244.7457. Time: 338772.0540 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #45: GFLOPs: 108.2978. Time: 765601.8880 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #46: GFLOPs: 1390.7006. Time: 59619.5930 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #47: GFLOPs: 241.2092. Time: 343738.9320 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #48: GFLOPs: 44.0021. Time: 1884297.2003 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #49: Error in building:
LocalBuilder: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(8, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(353, 1, 2, 14):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 7168 + i_1_j_1_fused * 896 + i_2_j_2_fused * 14 + j_3_init * 14 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2048):
                        for ax0_ax1_fused_0 in range(12):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(4096, k_0 * 2 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 1412)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(56):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0 * 2 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 7168)
                                        v1 = T.axis.spatial(14336, i_0_j_0_fused * 7168 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 7168)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 353, 1, 2, 2, 14):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_3 * 2 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 7168 + i_1_j_1_fused * 896 + i_2_j_2_fused * 14 + j_3 * 14 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(706, 14):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 7168 + i_1_j_1_fused * 896 + i_2_j_2_fused * 14 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 1, 353, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 8, 64, 1, 14])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2048, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #50: GFLOPs: 62.7760. Time: 1320774.9023 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #51: GFLOPs: 1050.7745. Time: 78906.5600 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #52: GFLOPs: 11829.2294. Time: 7009.1634 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #53: GFLOPs: 7426.3111. Time: 11164.7627 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #54: GFLOPs: 8341.3113. Time: 9940.0440 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #55: GFLOPs: 30.7737. Time: 2694277.8320 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #56: GFLOPs: 12639.9702. Time: 6559.5884 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #57: GFLOPs: 207.9249. Time: 398764.1600 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #58: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(4, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(353, 2, 1, 14):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 353 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 7168 + i_1_j_1_fused % 2 * 3584 + i_2_j_2_fused * 28 + j_3_init * 14 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2048):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(4096, k_0 * 2 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 1412)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(56):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0 * 2 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 7168)
                                        v1 = T.axis.spatial(14336, i_0_j_0_fused * 7168 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 7168)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 353, 2, 1, 1, 14):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 353 + i_3 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 7168 + i_1_j_1_fused % 2 * 3584 + i_2_j_2_fused * 28 + j_3 * 14 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(353, 28):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused // 2 * 353 + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 7168 + i_1_j_1_fused % 2 * 3584 + i_2_j_2_fused * 28 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 2, 1, 353, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 2, 128, 2, 14])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2048, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 128, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #59: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(14, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(706, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 2, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 1024 + i_1_j_1_fused % 2 * 512 + i_2_j_2_fused * 4 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 2824)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(14336, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 1024)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 2, 2, 1, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 1024 + i_1_j_1_fused % 2 * 512 + i_2_j_2_fused * 4 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 4 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 1024 + i_1_j_1_fused % 2 * 512 + i_2_j_2_fused * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 1, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[14, 2, 128, 2, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 4, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 128, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #60: GFLOPs: 248.8298. Time: 333211.6493 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #61: GFLOPs: 7279.8425. Time: 11389.3949 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #62: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(128, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(706, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 2, 1, 14):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused // 64 * 353 + i_2_j_2_fused // 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 3584 + i_1_j_1_fused % 64 * 56 + i_2_j_2_fused % 2 * 28 + j_3_init * 14 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(706, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, ax0_ax1_fused_0 * 1412 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2)
                                        v1 = T.axis.spatial(4096, k_0)
                                        T.where((ax0_ax1_fused_0 * 706 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 706)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(706, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0)
                                        v1 = T.axis.spatial(14336, i_0_j_0_fused * 3584 + (ax0_ax1_fused_0 * 1412 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2))
                                        T.where((ax0_ax1_fused_0 * 706 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 3584)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 2, 1, 1, 14):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused // 64 * 353 + i_2_j_2_fused // 2 + i_3 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 3584 + i_1_j_1_fused % 64 * 56 + i_2_j_2_fused % 2 * 28 + j_3 * 14 + j_4)
                                v_k = T.axis.reduce(4096, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 28):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused // 64 * 353 + i_2_j_2_fused // 2 + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 3584 + i_1_j_1_fused % 64 * 56 + i_2_j_2_fused % 2 * 28 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 2, 353, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 64, 2, 2, 14])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 706, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 706, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #63: GFLOPs: 135.2119. Time: 613207.7637 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #64: GFLOPs: 168.9651. Time: 490710.8967 us. Best GFLOPs: 31545.2752
2025-10-02 01:21:33 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-02 01:21:33 [INFO] [evolutionary_search.cc:715] Picked top 56 candidate(s) from database
2025-10-02 01:21:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 446 failure(s)
2025-10-02 01:21:35 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 892 failure(s)
2025-10-02 01:21:36 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 1343 failure(s)
2025-10-02 01:21:37 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 1789 failure(s)
2025-10-02 01:21:38 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 2234 failure(s)
2025-10-02 01:21:39 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 2682 failure(s)
2025-10-02 01:21:39 [INFO] [evolutionary_search.cc:723] Sampled 54 candidate(s)
2025-10-02 01:21:41 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 121 failure(s)
2025-10-02 01:21:43 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 123 failure(s)
2025-10-02 01:21:45 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 113 failure(s)
2025-10-02 01:21:47 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2f17bd48)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2f3556d8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2f3556a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2f2437b8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2f301348)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2f34c8a8)]: 112 failure(s)
2025-10-02 01:21:47 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9990  0.9988  0.9968  0.9962  0.9958  0.9943  0.9939  0.9936  0.9929  0.9927  0.9925  0.9916  0.9914  0.9910  0.9908  0.9907
[17 : 32]:	0.9903  0.9891  0.9884  0.9883  0.9878  0.9878  0.9875  0.9872  0.9867  0.9865  0.9860  0.9855  0.9852  0.9842  0.9836  0.9832
[33 : 48]:	0.9831  0.9829  0.9824  0.9822  0.9822  0.9814  0.9812  0.9808  0.9805  0.9798  0.9781  0.9776  0.9771  0.9765  0.9762  0.9758
[49 : 64]:	0.9757  0.9757  0.9753  0.9739  0.9737  0.9735  0.9728  0.9725  0.9701  0.9684  0.9679  0.9676  0.9667  0.9666  0.9664  0.9658
2025-10-02 01:21:47 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-02 01:21:47 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #65: GFLOPs: 253.5524. Time: 327005.4117 us. Best GFLOPs: 31545.2752
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #66: GFLOPs: 41.5513. Time: 1995437.9880 us. Best GFLOPs: 31545.2752
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #67: GFLOPs: 328.4408. Time: 252444.3153 us. Best GFLOPs: 31545.2752
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #68: GFLOPs: 3415.0655. Time: 24278.5980 us. Best GFLOPs: 31545.2752
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #69: GFLOPs: 336.7012. Time: 246250.9560 us. Best GFLOPs: 31545.2752
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #70: GFLOPs: 108.9725. Time: 760861.9790 us. Best GFLOPs: 31545.2752
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #71: GFLOPs: 125.6913. Time: 659655.7617 us. Best GFLOPs: 31545.2752
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #72: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(2824, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(112, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 2, 1, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_0_j_0_fused // 2 * 353 + i_1_j_1_fused // 8 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused % 2 * 7168 + i_1_j_1_fused % 8 * 896 + i_2_j_2_fused * 8 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(112, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, i_0_j_0_fused // 2 * 353 + (ax0_ax1_fused_0 * 112 + ax0_ax1_fused_1))
                                    v1 = T.axis.spatial(4096, k_0)
                                    T.where(ax0_ax1_fused_0 * 112 + ax0_ax1_fused_1 < 353)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(112, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0)
                                        v1 = T.axis.spatial(14336, i_0_j_0_fused % 2 * 7168 + ax0_ax1_fused_0 * 448 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 2, 1, 1, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_0_j_0_fused // 2 * 353 + i_1_j_1_fused // 8 + i_3 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused % 2 * 7168 + i_1_j_1_fused % 8 * 896 + i_2_j_2_fused * 8 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(4096, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_0_j_0_fused // 2 * 353 + i_1_j_1_fused // 8 + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused % 2 * 7168 + i_1_j_1_fused % 8 * 896 + i_2_j_2_fused * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 353, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 8, 112, 2, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 112], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 112, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #73: GFLOPs: 428.1051. Time: 193674.4180 us. Best GFLOPs: 31545.2752
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #74: GFLOPs: 22055.3689. Time: 3759.3115 us. Best GFLOPs: 31545.2752
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #75: GFLOPs: 14212.4265. Time: 5833.8386 us. Best GFLOPs: 31545.2752
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #76: GFLOPs: 2178.0151. Time: 38068.1480 us. Best GFLOPs: 31545.2752
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #77: GFLOPs: 92.3067. Time: 898233.3983 us. Best GFLOPs: 31545.2752
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #78: GFLOPs: 33565.1993. Time: 2470.2073 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #79: GFLOPs: 245.5194. Time: 337704.4880 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #80: GFLOPs: 11836.3438. Time: 7004.9504 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #81: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(8, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(706, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 56, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_2_j_2_fused // 2 * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 1792 + i_1_j_1_fused * 224 + i_2_j_2_fused % 2 * 112 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2048):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(706, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 706 + ax0_ax1_fused_1) // 2)
                                    v1 = T.axis.spatial(4096, k_0 * 2 + (ax0_ax1_fused_0 * 706 + ax0_ax1_fused_1) % 2)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(706, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(4096, k_0 * 2 + (ax0_ax1_fused_0 * 706 + ax0_ax1_fused_1) // 1792)
                                    v1 = T.axis.spatial(14336, i_0_j_0_fused * 1792 + (ax0_ax1_fused_0 * 706 + ax0_ax1_fused_1) % 1792)
                                    T.where(ax0_ax1_fused_0 * 706 + ax0_ax1_fused_1 < 3584)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 2, 56, 1, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_2_j_2_fused // 2 * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 1792 + i_1_j_1_fused * 224 + i_2_j_2_fused % 2 * 112 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 112):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_2_j_2_fused // 2 * 2 + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 1792 + i_1_j_1_fused * 224 + i_2_j_2_fused % 2 * 112 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 353, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 8, 2, 56, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2048, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 706], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 706], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #82: GFLOPs: 5432.0773. Time: 15263.5900 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #83: GFLOPs: 64.1666. Time: 1292152.0180 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #84: GFLOPs: 1793.5420. Time: 46228.6377 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #85: GFLOPs: 2279.5578. Time: 36372.4060 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #86: GFLOPs: 128.8386. Time: 643541.7073 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #87: GFLOPs: 61.7868. Time: 1341921.9563 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #88: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(2, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(353, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 16, 2, 56):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_2_j_2_fused * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 1792 + i_1_j_1_fused * 896 + j_3_init * 56 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(512):
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(353, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 1412 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(4096, k_0 * 8 + (ax0_ax1_fused_0 * 1412 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 8)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(41):
                            for ax0_ax1_fused_1 in T.thread_binding(353, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(4096, k_0 * 8 + (ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1) // 1792)
                                    v1 = T.axis.spatial(14336, i_0_j_0_fused * 1792 + (ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1) % 1792)
                                    T.where(ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1 < 14336)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(8, 1, 16, 1, 2, 56):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_2_j_2_fused * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 1792 + i_1_j_1_fused * 896 + j_3 * 56 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 8 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 896):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_2_j_2_fused * 2 + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 1792 + i_1_j_1_fused * 896 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 353, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 2, 1, 16, 56])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[512, 8, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 353, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 353], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #89: GFLOPs: 8150.3371. Time: 10172.9537 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #90: GFLOPs: 98.3000. Time: 843469.4010 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #91: GFLOPs: 24465.1385. Time: 3389.0265 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #92: GFLOPs: 4887.3560. Time: 16964.7967 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #93: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(706, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(112, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 2, 1, 16):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 3584 + i_2_j_2_fused * 32 + j_3_init * 16 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(26):
                            for ax0_ax1_fused_1 in T.thread_binding(112, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 112 + ax0_ax1_fused_1) // 4)
                                    v1 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 112 + ax0_ax1_fused_1) % 4)
                                    T.where(ax0_ax1_fused_0 * 112 + ax0_ax1_fused_1 < 2824)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(128):
                            for ax0_ax1_fused_1 in T.thread_binding(112, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 112 + ax0_ax1_fused_1) // 3584)
                                    v1 = T.axis.spatial(14336, i_0_j_0_fused * 3584 + (ax0_ax1_fused_0 * 112 + ax0_ax1_fused_1) % 3584)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 2, 2, 1, 16):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused + i_3 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 3584 + i_2_j_2_fused * 32 + j_3 * 16 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 4 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 3584 + i_2_j_2_fused * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 706, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 1, 112, 2, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 2, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 112], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 112], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #94: GFLOPs: 5766.0817. Time: 14379.4359 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #95: GFLOPs: 110.5508. Time: 749999.3487 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #96: GFLOPs: 2732.1594. Time: 30347.0590 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #97: GFLOPs: 24040.4771. Time: 3448.8917 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #98: GFLOPs: 30067.9380. Time: 2757.5220 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #99: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(353, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 14, 2, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 1792 + i_2_j_2_fused * 14 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(512):
                        for ax0_ax1_fused_0 in range(12):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(4096, k_0 * 8 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 8)
                                        T.where((ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 5648)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(56):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0 * 8 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 1792)
                                        v1 = T.axis.spatial(14336, i_0_j_0_fused * 1792 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 1792)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 14, 8, 2, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 1792 + i_2_j_2_fused * 14 + j_3 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 8 + k_1 * 8 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 14):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused * 2 + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 1792 + i_2_j_2_fused * 14 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 1, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 1, 128, 14, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[512, 1, 8])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 128, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #100: GFLOPs: 1388.3667. Time: 59719.8130 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #101: GFLOPs: 1367.6571. Time: 60624.1147 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #102: GFLOPs: 54.3620. Time: 1525201.8227 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #103: GFLOPs: 4288.8670. Time: 19332.1457 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #104: GFLOPs: 100.3586. Time: 826167.3990 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #105: GFLOPs: 64.2287. Time: 1290903.4830 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #106: GFLOPs: 9686.6867. Time: 8559.4800 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #107: GFLOPs: 91.4873. Time: 906278.3200 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #108: GFLOPs: 278.4738. Time: 297740.7837 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #109: GFLOPs: 117.0512. Time: 708348.3887 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #110: GFLOPs: 118.0346. Time: 702446.5330 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #111: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(353, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(112, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 32, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_0_j_0_fused // 4 * 353 + i_1_j_1_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused % 4 * 3584 + i_2_j_2_fused * 32 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(112, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, i_0_j_0_fused // 4 * 353 + (ax0_ax1_fused_0 * 112 + ax0_ax1_fused_1))
                                    v1 = T.axis.spatial(4096, k_0)
                                    T.where(ax0_ax1_fused_0 * 112 + ax0_ax1_fused_1 < 353)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(112, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0)
                                        v1 = T.axis.spatial(14336, i_0_j_0_fused % 4 * 3584 + ax0_ax1_fused_0 * 896 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 32, 1, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_0_j_0_fused // 4 * 353 + i_1_j_1_fused + i_3 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused % 4 * 3584 + i_2_j_2_fused * 32 + j_3 + j_4)
                                v_k = T.axis.reduce(4096, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_0_j_0_fused // 4 * 353 + i_1_j_1_fused + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused % 4 * 3584 + i_2_j_2_fused * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 353, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 1, 112, 32, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 112], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 112, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #112: GFLOPs: 291.8257. Time: 284118.2453 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #113: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(353, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(112, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 32, 2, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 3584 + i_2_j_2_fused * 32 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(7):
                            for ax0_ax1_fused_1 in T.thread_binding(112, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 448 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 448 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 112 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 2824)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(112, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 896 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 3584)
                                        v1 = T.axis.spatial(14336, i_0_j_0_fused * 3584 + (ax0_ax1_fused_0 * 896 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 3584)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 1, 32, 1, 2, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 3584 + i_2_j_2_fused * 32 + j_3 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 4 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused * 2 + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 3584 + i_2_j_2_fused * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 1, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 1, 112, 32, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 4, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 112, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 112, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #114: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(14, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(706, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 2, 1, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 1024 + i_2_j_2_fused * 16 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(512):
                        for ax0_ax1_fused_0 in range(45):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(4096, k_0 * 8 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 8)
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 5648)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(32):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0 * 8 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(14336, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 1024)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 2, 4, 1, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused + i_3 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 1024 + i_2_j_2_fused * 16 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 8 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 1024 + i_2_j_2_fused * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 706, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[14, 1, 64, 2, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[512, 2, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #115: GFLOPs: 7829.2653. Time: 10590.1382 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #116: GFLOPs: 1021.8010. Time: 81143.9817 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #117: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((706, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(353, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(256, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 14, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused * 2 + i_2_j_2_fused // 128 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 1792 + i_2_j_2_fused % 128 * 14 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(512):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(4096, k_0 * 8 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 8)
                                        T.where((ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 5648)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(56):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(4096, k_0 * 8 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1) // 1792)
                                    v1 = T.axis.spatial(14336, i_0_j_0_fused * 1792 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1) % 1792)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 14, 8, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused * 2 + i_2_j_2_fused // 128 + i_3 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 1792 + i_2_j_2_fused % 128 * 14 + j_3 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 8 + k_1 * 8 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 14):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused * 2 + i_2_j_2_fused // 128 + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 1792 + i_2_j_2_fused % 128 * 14 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 2, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 1, 128, 14, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[512, 1, 8])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 256, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 256], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #118: GFLOPs: 10266.9098. Time: 8075.7505 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #119: GFLOPs: 2423.4788. Time: 34212.3893 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #120: GFLOPs: 32.2916. Time: 2567633.1380 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #121: GFLOPs: 13678.1769. Time: 6061.6998 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #122: GFLOPs: 62.7766. Time: 1320762.3697 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #123: GFLOPs: 245.5874. Time: 337610.9820 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #124: GFLOPs: 3724.7036. Time: 22260.2950 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #125: GFLOPs: 3397.2228. Time: 24406.1126 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #126: GFLOPs: 249.7347. Time: 332004.3130 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #127: GFLOPs: 30.8577. Time: 2686949.7070 us. Best GFLOPs: 33565.1993
2025-10-02 01:31:50 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #128: GFLOPs: 64.5358. Time: 1284759.9283 us. Best GFLOPs: 33565.1993
