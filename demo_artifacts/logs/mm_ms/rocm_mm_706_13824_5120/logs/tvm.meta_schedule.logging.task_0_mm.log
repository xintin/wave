2025-10-01 22:04:04 [INFO] [task_scheduler.cc:160] Initializing Task #0: "mm"
2025-10-01 22:04:04 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 13824), "float16"), C: T.Buffer((706, 13824), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        for i, j, k in T.grid(706, 13824, 5120):
            with T.block("C"):
                v_i, v_j, v_k = T.axis.remap("SSR", [i, j, k])
                T.reads(A[v_i, v_k], B[v_k, v_j])
                T.writes(C[v_i, v_j])
                with T.init():
                    C[v_i, v_j] = T.float16(0.0)
                C[v_i, v_j] = C[v_i, v_j] + A[v_i, v_k] * B[v_k, v_j]
2025-10-01 22:04:04 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2025-10-01 22:04:04 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 13824), "float16"), C: T.Buffer((706, 13824), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            C_local = T.alloc_buffer((706, 13824), "float16", scope="local")
            A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
            B_shared = T.alloc_buffer((5120, 13824), "float16", scope="shared")
            for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x"):
                for i_1_j_1_fused in T.thread_binding(353, thread="vthread.x"):
                    for i_2_j_2_fused in T.thread_binding(36, thread="threadIdx.x"):
                        for k_0 in range(2):
                            for ax0_ax1_fused in range(1807360):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, ax0_ax1_fused // 2560)
                                    v1 = T.axis.spatial(5120, k_0 * 2560 + ax0_ax1_fused % 2560)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    A_shared[v0, v1] = A[v0, v1]
                            for ax0_ax1_fused in range(8847360):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0 * 2560 + ax0_ax1_fused // 3456)
                                    v1 = T.axis.spatial(13824, i_0_j_0_fused * 3456 + ax0_ax1_fused % 3456)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    B_shared[v0, v1] = B[v0, v1]
                            for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(80, 2, 6, 32, 1, 16):
                                with T.block("C"):
                                    v_i = T.axis.spatial(706, i_1_j_1_fused * 2 + i_3 + i_4)
                                    v_j = T.axis.spatial(13824, i_0_j_0_fused * 3456 + i_2_j_2_fused * 96 + j_3 * 16 + j_4)
                                    v_k = T.axis.reduce(5120, k_0 * 2560 + k_1 * 32 + k_2)
                                    T.reads(A_shared[v_i, v_k], B_shared[v_k, v_j])
                                    T.writes(C_local[v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        C_local[v_i, v_j] = T.float16(0.0)
                                    C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                        for ax0, ax1 in T.grid(2, 96):
                            with T.block("C_local"):
                                v0 = T.axis.spatial(706, i_1_j_1_fused * 2 + ax0)
                                v1 = T.axis.spatial(13824, i_0_j_0_fused * 3456 + i_2_j_2_fused * 96 + ax1)
                                T.reads(C_local[v0, v1])
                                T.writes(C[v0, v1])
                                C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 1, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 1, 36, 6, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2, 80, 32])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
2025-10-01 22:04:04 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-01 22:04:04 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2025-10-01 22:04:05 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 502 failure(s)
2025-10-01 22:04:06 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 1005 failure(s)
2025-10-01 22:04:07 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 1508 failure(s)
2025-10-01 22:04:08 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 2013 failure(s)
2025-10-01 22:04:09 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 2520 failure(s)
2025-10-01 22:04:10 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 3024 failure(s)
2025-10-01 22:04:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 3529 failure(s)
2025-10-01 22:04:12 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2025-10-01 22:04:14 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 124 failure(s)
2025-10-01 22:04:16 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 123 failure(s)
2025-10-01 22:04:18 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 116 failure(s)
2025-10-01 22:04:20 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 117 failure(s)
2025-10-01 22:04:20 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9997  0.9989  0.9986  0.9964  0.9957  0.9954  0.9942  0.9940  0.9940  0.9939  0.9935  0.9931  0.9928  0.9926  0.9919  0.9899
[17 : 32]:	0.9898  0.9888  0.9887  0.9865  0.9856  0.9849  0.9834  0.9833  0.9820  0.9816  0.9815  0.9806  0.9804  0.9800  0.9797  0.9794
[33 : 48]:	0.9794  0.9793  0.9792  0.9790  0.9787  0.9769  0.9751  0.9750  0.9747  0.9742  0.9734  0.9694  0.9688  0.9688  0.9678  0.9671
[49 : 64]:	0.9665  0.9661  0.9660  0.9658  0.9646  0.9617  0.9606  0.9603  0.9589  0.9587  0.9580  0.9579  0.9572  0.9563  0.9557  0.9550
2025-10-01 22:04:20 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-01 22:04:20 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #1: GFLOPs: 38423.7503. Time: 2600.9897 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #2: GFLOPs: 28406.8366. Time: 3518.1594 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #3: GFLOPs: 1931.3640. Time: 51745.6970 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #4: GFLOPs: 85.7720. Time: 1165178.8737 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #5: GFLOPs: 1946.0657. Time: 51354.7820 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #6: GFLOPs: 1770.9435. Time: 56433.0697 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #7: GFLOPs: 28709.9608. Time: 3481.0141 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #8: GFLOPs: 15006.4104. Time: 6659.8058 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #9: GFLOPs: 7529.2724. Time: 13273.4975 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #10: GFLOPs: 224.6479. Time: 444872.8840 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #11: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 13824), "float16"), C: T.Buffer((706, 13824), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 13824), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 13824), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(24, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(144, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(706, 2, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_3_init + i_4_init)
                            v_j = T.axis.spatial(13824, i_0_j_0_fused * 6912 + i_1_j_1_fused * 288 + i_2_j_2_fused * 2 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2560):
                        for ax0_ax1_fused_0 in range(10):
                            for ax0_ax1_fused_1 in T.thread_binding(144, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 144 + ax0_ax1_fused_1) // 2)
                                    v1 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 144 + ax0_ax1_fused_1) % 2)
                                    T.where(ax0_ax1_fused_0 * 144 + ax0_ax1_fused_1 < 1412)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(12):
                            for ax0_ax1_fused_1 in T.thread_binding(144, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 1152 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 6912)
                                        v1 = T.axis.spatial(13824, i_0_j_0_fused * 6912 + (ax0_ax1_fused_0 * 1152 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 6912)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 706, 2, 2, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_3 + i_4)
                                v_j = T.axis.spatial(13824, i_0_j_0_fused * 6912 + i_1_j_1_fused * 288 + i_2_j_2_fused * 2 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(706, 2):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, ax0)
                            v1 = T.axis.spatial(13824, i_0_j_0_fused * 6912 + i_1_j_1_fused * 288 + i_2_j_2_fused * 2 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 1, 706, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 24, 144, 2, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2560, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 144], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 144, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #12: GFLOPs: 6181.4116. Time: 16167.7921 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #13: GFLOPs: 9057.7923. Time: 11033.5693 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #14: GFLOPs: 10213.6923. Time: 9784.8825 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #15: GFLOPs: 670.8321. Time: 148978.8207 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #16: GFLOPs: 3236.1105. Time: 30882.6845 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #17: GFLOPs: 62.3854. Time: 1601973.1443 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #18: GFLOPs: 37576.7302. Time: 2659.6188 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #19: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 13824), "float16"), C: T.Buffer((706, 13824), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 13824), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 13824), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(706, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(108, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 4, 1, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(13824, i_0_j_0_fused * 3456 + i_1_j_1_fused % 2 * 1728 + i_2_j_2_fused * 16 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(5120):
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(108, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, ax0_ax1_fused_0 * 216 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2)
                                        v1 = T.axis.spatial(5120, k_0)
                                        T.where((ax0_ax1_fused_0 * 108 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 706)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(108, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0)
                                        v1 = T.axis.spatial(13824, i_0_j_0_fused * 3456 + ax0_ax1_fused_0 * 216 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 4, 1, 1, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(13824, i_0_j_0_fused * 3456 + i_1_j_1_fused % 2 * 1728 + i_2_j_2_fused * 16 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(5120, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + ax0)
                            v1 = T.axis.spatial(13824, i_0_j_0_fused * 3456 + i_1_j_1_fused % 2 * 1728 + i_2_j_2_fused * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 1, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 2, 108, 4, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[5120, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 108, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 108, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #20: GFLOPs: 67.0338. Time: 1490887.2070 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #21: Error in building:
LocalBuilder: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 13824), "float16"), C: T.Buffer((706, 13824), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 13824), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 13824), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1059, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 36, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused // 3 * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(13824, i_0_j_0_fused * 6912 + i_1_j_1_fused % 3 * 2304 + i_2_j_2_fused * 36 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(5120):
                        for ax0_ax1_fused_0 in range(12):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1)
                                    v1 = T.axis.spatial(5120, k_0)
                                    T.where(ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1 < 706)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(27):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0)
                                        v1 = T.axis.spatial(13824, i_0_j_0_fused * 6912 + ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 36, 1, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused // 3 * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(13824, i_0_j_0_fused * 6912 + i_1_j_1_fused % 3 * 2304 + i_2_j_2_fused * 36 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 36):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused // 3 * 2 + ax0)
                            v1 = T.axis.spatial(13824, i_0_j_0_fused * 6912 + i_1_j_1_fused % 3 * 2304 + i_2_j_2_fused * 36 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 1, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 3, 64, 36, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[5120, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #22: GFLOPs: 144.6063. Time: 691116.2107 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #23: GFLOPs: 3248.7175. Time: 30762.8403 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #24: GFLOPs: 1266.3196. Time: 78921.4477 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #25: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 13824), "float16"), C: T.Buffer((706, 13824), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 13824), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 13824), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(706, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(108, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 2, 1, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(13824, i_0_j_0_fused * 1728 + i_1_j_1_fused % 2 * 864 + i_2_j_2_fused * 8 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(33):
                            for ax0_ax1_fused_1 in T.thread_binding(108, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 108 + ax0_ax1_fused_1) // 5)
                                    v1 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 108 + ax0_ax1_fused_1) % 5)
                                    T.where(ax0_ax1_fused_0 * 108 + ax0_ax1_fused_1 < 3530)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(80):
                            for ax0_ax1_fused_1 in T.thread_binding(108, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 108 + ax0_ax1_fused_1) // 1728)
                                    v1 = T.axis.spatial(13824, i_0_j_0_fused * 1728 + (ax0_ax1_fused_0 * 108 + ax0_ax1_fused_1) % 1728)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(5, 2, 2, 1, 1, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(13824, i_0_j_0_fused * 1728 + i_1_j_1_fused % 2 * 864 + i_2_j_2_fused * 8 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 5 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + ax0)
                            v1 = T.axis.spatial(13824, i_0_j_0_fused * 1728 + i_1_j_1_fused % 2 * 864 + i_2_j_2_fused * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 1, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 2, 108, 2, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 5, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 108], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 108], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #26: GFLOPs: 81.6223. Time: 1224418.2940 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #27: GFLOPs: 182.6929. Time: 547036.8650 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #28: GFLOPs: 29481.8774. Time: 3389.8716 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #29: GFLOPs: 10775.9646. Time: 9274.3232 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #30: GFLOPs: 1186.5991. Time: 84223.7090 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #31: GFLOPs: 82.2073. Time: 1215704.5083 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #32: GFLOPs: 67.2880. Time: 1485254.5570 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #33: GFLOPs: 14130.7700. Time: 7072.4935 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #34: GFLOPs: 114.8763. Time: 869977.4577 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #35: GFLOPs: 33475.1223. Time: 2985.4941 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #36: GFLOPs: 5614.0628. Time: 17801.6852 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #37: GFLOPs: 10176.9638. Time: 9820.1959 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #38: GFLOPs: 160.2041. Time: 623827.9213 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #39: GFLOPs: 125.7207. Time: 794935.0583 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #40: GFLOPs: 180.2427. Time: 554473.3477 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #41: GFLOPs: 9657.5536. Time: 10348.3535 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #42: GFLOPs: 107.1582. Time: 932637.6950 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #43: GFLOPs: 2795.8053. Time: 35746.3300 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #44: GFLOPs: 135.9134. Time: 735319.3357 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #45: GFLOPs: 54.4098. Time: 1836796.3867 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #46: GFLOPs: 3538.0178. Time: 28247.3925 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #47: GFLOPs: 15581.0587. Time: 6414.1841 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #48: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 13824), "float16"), C: T.Buffer((706, 13824), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 13824), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 13824), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(706, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(108, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 4, 1, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(13824, i_0_j_0_fused * 3456 + i_1_j_1_fused % 2 * 1728 + i_2_j_2_fused * 16 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(17):
                            for ax0_ax1_fused_1 in T.thread_binding(108, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 216 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 5)
                                        v1 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 216 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 5)
                                        T.where((ax0_ax1_fused_0 * 108 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 3530)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(20):
                            for ax0_ax1_fused_1 in T.thread_binding(108, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 864 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 3456)
                                        v1 = T.axis.spatial(13824, i_0_j_0_fused * 3456 + (ax0_ax1_fused_0 * 864 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 3456)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 4, 5, 1, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(13824, i_0_j_0_fused * 3456 + i_1_j_1_fused % 2 * 1728 + i_2_j_2_fused * 16 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 5 + k_1 * 5 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + ax0)
                            v1 = T.axis.spatial(13824, i_0_j_0_fused * 3456 + i_1_j_1_fused % 2 * 1728 + i_2_j_2_fused * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 1, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 2, 108, 4, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 1, 5])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 108, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 108, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #49: GFLOPs: 4208.3508. Time: 23747.9674 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #50: GFLOPs: 1169.0236. Time: 85489.9597 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #51: GFLOPs: 106.7985. Time: 935779.0527 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #52: GFLOPs: 717.8165. Time: 139227.4677 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #53: GFLOPs: 402.8597. Time: 248075.9073 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #54: GFLOPs: 81.7636. Time: 1222301.3507 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #55: GFLOPs: 82.5451. Time: 1210728.7597 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #56: GFLOPs: 88.5653. Time: 1128430.0130 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #57: GFLOPs: 2116.1053. Time: 47228.1697 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #58: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 13824), "float16"), C: T.Buffer((706, 13824), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 13824), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 13824), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(12, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(2118, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 1, 1, 6):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused // 3 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(13824, i_0_j_0_fused * 1152 + i_1_j_1_fused % 3 * 384 + i_2_j_2_fused * 6 + j_3_init * 6 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1280):
                        for ax0_ax1_fused_0 in range(12):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(5120, k_0 * 4 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 2824)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(9):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 4 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 1152)
                                        v1 = T.axis.spatial(13824, i_0_j_0_fused * 1152 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 1152)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 1, 2, 1, 6):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused // 3 + i_3 + i_4)
                                v_j = T.axis.spatial(13824, i_0_j_0_fused * 1152 + i_1_j_1_fused % 3 * 384 + i_2_j_2_fused * 6 + j_3 * 6 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 4 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 6):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused // 3 + ax0)
                            v1 = T.axis.spatial(13824, i_0_j_0_fused * 1152 + i_1_j_1_fused % 3 * 384 + i_2_j_2_fused * 6 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 706, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[12, 3, 64, 1, 6])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1280, 2, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #59: GFLOPs: 323.1976. Time: 309221.8627 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #60: GFLOPs: 28094.5957. Time: 3557.2599 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #61: GFLOPs: 200.9502. Time: 497336.1000 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #62: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 13824), "float16"), C: T.Buffer((706, 13824), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 13824), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 13824), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(706, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(108, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 4, 1, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(13824, i_0_j_0_fused * 3456 + i_1_j_1_fused % 2 * 1728 + i_2_j_2_fused * 16 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(33):
                            for ax0_ax1_fused_1 in T.thread_binding(108, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 108 + ax0_ax1_fused_1) // 5)
                                    v1 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 108 + ax0_ax1_fused_1) % 5)
                                    T.where(ax0_ax1_fused_0 * 108 + ax0_ax1_fused_1 < 3530)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(160):
                            for ax0_ax1_fused_1 in T.thread_binding(108, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 108 + ax0_ax1_fused_1) // 3456)
                                    v1 = T.axis.spatial(13824, i_0_j_0_fused * 3456 + (ax0_ax1_fused_0 * 108 + ax0_ax1_fused_1) % 3456)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 4, 5, 1, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(13824, i_0_j_0_fused * 3456 + i_1_j_1_fused % 2 * 1728 + i_2_j_2_fused * 16 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 5 + k_1 * 5 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + ax0)
                            v1 = T.axis.spatial(13824, i_0_j_0_fused * 3456 + i_1_j_1_fused % 2 * 1728 + i_2_j_2_fused * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 1, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 2, 108, 4, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 1, 5])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 108], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 108], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #63: GFLOPs: 3371.7858. Time: 29640.0145 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #64: GFLOPs: 144.4026. Time: 692091.4713 us. Best GFLOPs: 38423.7503
2025-10-01 22:13:52 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-01 22:13:53 [INFO] [evolutionary_search.cc:715] Picked top 57 candidate(s) from database
2025-10-01 22:13:53 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 447 failure(s)
2025-10-01 22:13:54 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 891 failure(s)
2025-10-01 22:13:55 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 1340 failure(s)
2025-10-01 22:13:56 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 1785 failure(s)
2025-10-01 22:13:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 2235 failure(s)
2025-10-01 22:13:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 2685 failure(s)
2025-10-01 22:13:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 3132 failure(s)
2025-10-01 22:13:59 [INFO] [evolutionary_search.cc:723] Sampled 53 candidate(s)
2025-10-01 22:14:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 123 failure(s)
2025-10-01 22:14:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 133 failure(s)
2025-10-01 22:14:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 100 failure(s)
2025-10-01 22:14:07 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x2c2d9388)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x2c351a28)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x2c3627c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x2c2200c8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x2c2b1548)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x2c351668)]: 124 failure(s)
2025-10-01 22:14:07 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9984  0.9983  0.9967  0.9943  0.9935  0.9932  0.9930  0.9926  0.9917  0.9916  0.9914  0.9892  0.9890  0.9889  0.9889
[17 : 32]:	0.9889  0.9888  0.9886  0.9880  0.9873  0.9849  0.9849  0.9843  0.9840  0.9827  0.9821  0.9798  0.9791  0.9791  0.9782  0.9764
[33 : 48]:	0.9756  0.9746  0.9742  0.9733  0.9732  0.9729  0.9727  0.9720  0.9719  0.9717  0.9683  0.9683  0.9678  0.9670  0.9648  0.9644
[49 : 64]:	0.9641  0.9629  0.9617  0.9613  0.9613  0.9609  0.9608  0.9606  0.9590  0.9582  0.9573  0.9573  0.9567  0.9562  0.9561  0.9549
2025-10-01 22:14:07 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-01 22:14:07 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #65: GFLOPs: 286.6416. Time: 348657.6333 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #66: GFLOPs: 1399.0563. Time: 71433.7053 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #67: GFLOPs: 117.8249. Time: 848206.1360 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #68: GFLOPs: 3330.9751. Time: 30003.1603 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #69: GFLOPs: 71.9762. Time: 1388512.0440 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #70: GFLOPs: 715.4274. Time: 139692.4130 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #71: GFLOPs: 6658.2808. Time: 15009.8473 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #72: GFLOPs: 26842.8770. Time: 3723.1396 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #73: GFLOPs: 8233.1207. Time: 12138.7481 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #74: GFLOPs: 119.9676. Time: 833056.5590 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #75: GFLOPs: 5073.6067. Time: 19697.9750 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #76: GFLOPs: 349.1432. Time: 286242.9603 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #77: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 13824), "float16"), C: T.Buffer((706, 13824), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 13824), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 13824), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(18, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(353, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 24, 1, 32):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_2_j_2_fused * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(13824, i_0_j_0_fused * 768 + j_3_init * 32 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(320):
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(353, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 2824 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 16)
                                        v1 = T.axis.spatial(5120, k_0 * 16 + (ax0_ax1_fused_0 * 2824 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 16)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(18):
                            for ax0_ax1_fused_1 in T.thread_binding(353, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 16 + (ax0_ax1_fused_0 * 706 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 768)
                                        v1 = T.axis.spatial(13824, i_0_j_0_fused * 768 + (ax0_ax1_fused_0 * 706 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 768)
                                        T.where((ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 12288)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(16, 2, 24, 1, 1, 32):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_2_j_2_fused * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(13824, i_0_j_0_fused * 768 + j_3 * 32 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 16 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 768):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_2_j_2_fused * 2 + ax0)
                            v1 = T.axis.spatial(13824, i_0_j_0_fused * 768 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 353, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[18, 1, 1, 24, 32])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[320, 16, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 353, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 353, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #78: GFLOPs: 476.8901. Time: 209565.6330 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #79: GFLOPs: 6083.3740. Time: 16428.3469 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #80: GFLOPs: 6284.2347. Time: 15903.2537 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #81: GFLOPs: 243.0551. Time: 411181.5590 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #82: GFLOPs: 4989.2090. Time: 20031.1870 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #83: GFLOPs: 59.7653. Time: 1672205.0780 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #84: GFLOPs: 9384.8135. Time: 10649.0959 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #85: GFLOPs: 638.1858. Time: 156599.8127 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #86: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 13824), "float16"), C: T.Buffer((706, 13824), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 13824), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 13824), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(6, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(706, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 9, 2, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(13824, i_0_j_0_fused * 2304 + i_1_j_1_fused % 2 * 1152 + i_2_j_2_fused * 9 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(640):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(5120, k_0 * 8 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 8)
                                        T.where((ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 5648)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(144):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0 * 8 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) // 2304)
                                    v1 = T.axis.spatial(13824, i_0_j_0_fused * 2304 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) % 2304)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 9, 4, 2, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(13824, i_0_j_0_fused * 2304 + i_1_j_1_fused % 2 * 1152 + i_2_j_2_fused * 9 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 8 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 9):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + ax0)
                            v1 = T.axis.spatial(13824, i_0_j_0_fused * 2304 + i_1_j_1_fused % 2 * 1152 + i_2_j_2_fused * 9 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 1, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[6, 2, 128, 9, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[640, 2, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #87: GFLOPs: 722.8529. Time: 138257.4257 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #88: GFLOPs: 282.0244. Time: 354365.7633 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #89: GFLOPs: 179.9229. Time: 555458.9027 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #90: GFLOPs: 3858.0540. Time: 25904.1938 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #91: GFLOPs: 5356.2453. Time: 18658.5515 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #92: GFLOPs: 12639.7910. Time: 7906.7588 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #93: GFLOPs: 71.7193. Time: 1393485.3513 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #94: GFLOPs: 62.5099. Time: 1598782.2263 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #95: GFLOPs: 50.3460. Time: 1985059.4073 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #96: GFLOPs: 1355.4128. Time: 73733.8307 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #97: GFLOPs: 126.5029. Time: 790019.9380 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #98: GFLOPs: 277.8149. Time: 359735.1480 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #99: GFLOPs: 82.5917. Time: 1210045.5727 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #100: GFLOPs: 136.2439. Time: 733535.9700 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #101: GFLOPs: 91.0230. Time: 1097961.4257 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #102: GFLOPs: 2394.3465. Time: 41739.8987 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #103: GFLOPs: 115.4213. Time: 865869.7100 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #104: GFLOPs: 4758.9669. Time: 21000.3096 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #105: GFLOPs: 1485.6667. Time: 67269.3123 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #106: GFLOPs: 13272.5515. Time: 7529.8091 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #107: GFLOPs: 9597.4336. Time: 10413.1774 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #108: GFLOPs: 9706.5328. Time: 10296.1357 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #109: GFLOPs: 324.0459. Time: 308412.4550 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #110: GFLOPs: 10566.6599. Time: 9458.0293 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #111: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 13824), "float16"), C: T.Buffer((706, 13824), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 13824), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 13824), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(18, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(768, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(353, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 1, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_2_j_2_fused * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(13824, i_0_j_0_fused * 768 + i_1_j_1_fused + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(640):
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(353, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1) // 8)
                                    v1 = T.axis.spatial(5120, k_0 * 8 + (ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1) % 8)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(5):
                            for ax0_ax1_fused_1 in T.thread_binding(353, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 8 + (ax0_ax1_fused_0 * 1412 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 768)
                                        v1 = T.axis.spatial(13824, i_0_j_0_fused * 768 + (ax0_ax1_fused_0 * 1412 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 768)
                                        T.where((ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 6144)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 2, 1, 2, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_2_j_2_fused * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(13824, i_0_j_0_fused * 768 + i_1_j_1_fused + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 8 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 1):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_2_j_2_fused * 2 + ax0)
                            v1 = T.axis.spatial(13824, i_0_j_0_fused * 768 + i_1_j_1_fused + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 353, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[18, 768, 1, 1, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[640, 4, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 353], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 353, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #112: GFLOPs: 14409.8425. Time: 6935.5219 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #113: GFLOPs: 25397.1099. Time: 3935.0847 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #114: GFLOPs: 16442.9641. Time: 6077.9661 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #115: GFLOPs: 119.7297. Time: 834711.8327 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #116: GFLOPs: 62.5128. Time: 1598708.0077 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #117: GFLOPs: 268.9211. Time: 371632.3240 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #118: GFLOPs: 128.4760. Time: 777887.0440 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #119: GFLOPs: 18950.5692. Time: 5273.7085 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #120: GFLOPs: 15701.3384. Time: 6365.0484 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #121: GFLOPs: 11414.8704. Time: 8755.2267 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #122: GFLOPs: 57.4504. Time: 1739582.8450 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #123: GFLOPs: 37679.7328. Time: 2652.3484 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #124: GFLOPs: 116.1443. Time: 860479.1667 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #125: GFLOPs: 1207.5620. Time: 82761.6117 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #126: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 13824), "float16"), C: T.Buffer((706, 13824), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 13824), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 13824), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1728, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(353, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 2, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_2_j_2_fused * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(13824, i_0_j_0_fused * 3456 + i_1_j_1_fused * 2 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(5120):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(353, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1)
                                    v1 = T.axis.spatial(5120, k_0)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(353, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0)
                                        v1 = T.axis.spatial(13824, i_0_j_0_fused * 3456 + (ax0_ax1_fused_0 * 2824 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2))
                                        T.where((ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 3456)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 2, 1, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_2_j_2_fused * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(13824, i_0_j_0_fused * 3456 + i_1_j_1_fused * 2 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 2):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_2_j_2_fused * 2 + ax0)
                            v1 = T.axis.spatial(13824, i_0_j_0_fused * 3456 + i_1_j_1_fused * 2 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 353, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 1728, 1, 2, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[5120, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 353], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 353, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #127: GFLOPs: 7394.2719. Time: 13515.8376 us. Best GFLOPs: 38423.7503
2025-10-01 22:22:33 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #128: GFLOPs: 377.8109. Time: 264523.2543 us. Best GFLOPs: 38423.7503
