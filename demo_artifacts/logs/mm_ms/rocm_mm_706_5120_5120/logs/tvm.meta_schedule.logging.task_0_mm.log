2025-10-01 21:50:26 [INFO] [task_scheduler.cc:160] Initializing Task #0: "mm"
2025-10-01 21:50:26 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 5120), "float16"), C: T.Buffer((706, 5120), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        for i, j, k in T.grid(706, 5120, 5120):
            with T.block("C"):
                v_i, v_j, v_k = T.axis.remap("SSR", [i, j, k])
                T.reads(A[v_i, v_k], B[v_k, v_j])
                T.writes(C[v_i, v_j])
                with T.init():
                    C[v_i, v_j] = T.float16(0.0)
                C[v_i, v_j] = C[v_i, v_j] + A[v_i, v_k] * B[v_k, v_j]
2025-10-01 21:50:26 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2025-10-01 21:50:26 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 5120), "float16"), C: T.Buffer((706, 5120), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            C_local = T.alloc_buffer((706, 5120), "float16", scope="local")
            A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
            B_shared = T.alloc_buffer((5120, 5120), "float16", scope="shared")
            for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x"):
                for i_1_j_1_fused in T.thread_binding(20, thread="vthread.x"):
                    for i_2_j_2_fused in T.thread_binding(16, thread="threadIdx.x"):
                        for k_0 in range(8):
                            for ax0_ax1_fused in range(451840):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, ax0_ax1_fused // 640)
                                    v1 = T.axis.spatial(5120, k_0 * 640 + ax0_ax1_fused % 640)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    A_shared[v0, v1] = A[v0, v1]
                            for ax0_ax1_fused in range(3276800):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0 * 640 + ax0_ax1_fused // 5120)
                                    v1 = T.axis.spatial(5120, ax0_ax1_fused % 5120)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    B_shared[v0, v1] = B[v0, v1]
                            for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(64, 353, 32, 10, 1, 1):
                                with T.block("C"):
                                    v_i = T.axis.spatial(706, i_1_j_1_fused // 10 * 353 + i_3 + i_4)
                                    v_j = T.axis.spatial(5120, i_1_j_1_fused % 10 * 512 + i_2_j_2_fused * 32 + j_3 + j_4)
                                    v_k = T.axis.reduce(5120, k_0 * 640 + k_1 * 10 + k_2)
                                    T.reads(A_shared[v_i, v_k], B_shared[v_k, v_j])
                                    T.writes(C_local[v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        C_local[v_i, v_j] = T.float16(0.0)
                                    C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                        for ax0, ax1 in T.grid(353, 32):
                            with T.block("C_local"):
                                v0 = T.axis.spatial(706, i_1_j_1_fused // 10 * 353 + ax0)
                                v1 = T.axis.spatial(5120, i_1_j_1_fused % 10 * 512 + i_2_j_2_fused * 32 + ax1)
                                T.reads(C_local[v0, v1])
                                T.writes(C[v0, v1])
                                C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 2, 1, 353, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 10, 16, 32, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[8, 64, 10])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
2025-10-01 21:50:26 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-01 21:50:26 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2025-10-01 21:50:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 498 failure(s)
2025-10-01 21:50:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 994 failure(s)
2025-10-01 21:50:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 1493 failure(s)
2025-10-01 21:50:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 1993 failure(s)
2025-10-01 21:50:30 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2025-10-01 21:50:32 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 136 failure(s)
2025-10-01 21:50:34 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 111 failure(s)
2025-10-01 21:50:36 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 93 failure(s)
2025-10-01 21:50:38 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 96 failure(s)
2025-10-01 21:50:38 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	1.0000  0.9997  0.9982  0.9962  0.9955  0.9950  0.9942  0.9942  0.9932  0.9931  0.9931  0.9928  0.9924  0.9923  0.9914  0.9913
[17 : 32]:	0.9911  0.9907  0.9889  0.9882  0.9875  0.9863  0.9857  0.9852  0.9851  0.9850  0.9844  0.9841  0.9836  0.9830  0.9811  0.9789
[33 : 48]:	0.9774  0.9766  0.9764  0.9757  0.9753  0.9751  0.9749  0.9742  0.9729  0.9699  0.9699  0.9684  0.9683  0.9676  0.9674  0.9663
[49 : 64]:	0.9662  0.9650  0.9634  0.9620  0.9611  0.9600  0.9581  0.9559  0.9558  0.9550  0.9543  0.9542  0.9538  0.9524  0.9522  0.9512
2025-10-01 21:50:38 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-01 21:50:38 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #1: GFLOPs: 12132.4179. Time: 3050.8950 us. Best GFLOPs: 12132.4179
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #2: GFLOPs: 11859.2640. Time: 3121.1661 us. Best GFLOPs: 12132.4179
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #3: GFLOPs: 1981.2575. Time: 18682.4442 us. Best GFLOPs: 12132.4179
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #4: GFLOPs: 10542.1868. Time: 3511.1058 us. Best GFLOPs: 12132.4179
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #5: GFLOPs: 8480.4288. Time: 4364.7242 us. Best GFLOPs: 12132.4179
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #6: GFLOPs: 15345.4909. Time: 2412.0918 us. Best GFLOPs: 15345.4909
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #7: GFLOPs: 8688.4372. Time: 4260.2291 us. Best GFLOPs: 15345.4909
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #8: GFLOPs: 3018.5790. Time: 12262.3037 us. Best GFLOPs: 15345.4909
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #9: GFLOPs: 119.9970. Time: 308463.8467 us. Best GFLOPs: 15345.4909
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #10: GFLOPs: 12190.2641. Time: 3036.4176 us. Best GFLOPs: 15345.4909
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #11: GFLOPs: 4157.1320. Time: 8903.9109 us. Best GFLOPs: 15345.4909
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #12: GFLOPs: 4482.4702. Time: 8257.6640 us. Best GFLOPs: 15345.4909
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #13: GFLOPs: 3275.0014. Time: 11302.2037 us. Best GFLOPs: 15345.4909
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #14: GFLOPs: 11927.4189. Time: 3103.3313 us. Best GFLOPs: 15345.4909
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #15: GFLOPs: 248.6595. Time: 148857.0860 us. Best GFLOPs: 15345.4909
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #16: GFLOPs: 11869.0474. Time: 3118.5934 us. Best GFLOPs: 15345.4909
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #17: GFLOPs: 490.4021. Time: 75478.3373 us. Best GFLOPs: 15345.4909
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #18: GFLOPs: 14.5644. Time: 2541448.2420 us. Best GFLOPs: 15345.4909
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #19: GFLOPs: 12146.4095. Time: 3047.3806 us. Best GFLOPs: 15345.4909
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #20: GFLOPs: 932.8832. Time: 39677.7773 us. Best GFLOPs: 15345.4909
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #21: GFLOPs: 239.7312. Time: 154401.0110 us. Best GFLOPs: 15345.4909
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #22: GFLOPs: 21332.5394. Time: 1735.1302 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #23: GFLOPs: 16557.7703. Time: 2235.4902 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #24: GFLOPs: 603.4880. Time: 61334.6607 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #25: GFLOPs: 7022.2074. Time: 5271.0965 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #26: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 5120), "float16"), C: T.Buffer((706, 5120), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 5120), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 5120), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(10, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(353, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 128, 1, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_2_j_2_fused * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(5120, i_1_j_1_fused * 512 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2560):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(353, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 706 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 706 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(15):
                            for ax0_ax1_fused_1 in T.thread_binding(353, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 706 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 5120)
                                        v1 = T.axis.spatial(5120, (ax0_ax1_fused_0 * 706 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 5120)
                                        T.where((ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 10240)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 2, 128, 1, 1, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_2_j_2_fused * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(5120, i_1_j_1_fused * 512 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 512):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_2_j_2_fused * 2 + ax0)
                            v1 = T.axis.spatial(5120, i_1_j_1_fused * 512 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 353, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 10, 1, 128, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2560, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 353, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 353, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #27: GFLOPs: 9432.8216. Time: 3924.0362 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #28: GFLOPs: 5940.8959. Time: 6230.4968 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #29: GFLOPs: 1080.5864. Time: 34254.3027 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #30: GFLOPs: 11419.6020. Time: 3241.3330 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #31: GFLOPs: 31.4439. Time: 1177167.5617 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #32: GFLOPs: 743.2640. Time: 49800.2470 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #33: GFLOPs: 490.5433. Time: 75456.6140 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #34: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 5120), "float16"), C: T.Buffer((706, 5120), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 5120), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 5120), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1280, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(353, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 1, 1, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_2_j_2_fused * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(5120, i_1_j_1_fused * 4 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1280):
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(353, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 706 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(5120, k_0 * 4 + (ax0_ax1_fused_0 * 706 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(30):
                            for ax0_ax1_fused_1 in T.thread_binding(353, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 4 + (ax0_ax1_fused_0 * 706 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 5120)
                                        v1 = T.axis.spatial(5120, (ax0_ax1_fused_0 * 706 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 5120)
                                        T.where((ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 20480)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 1, 4, 1, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_2_j_2_fused * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(5120, i_1_j_1_fused * 4 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 4 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_2_j_2_fused * 2 + ax0)
                            v1 = T.axis.spatial(5120, i_1_j_1_fused * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 353, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1280, 1, 1, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1280, 1, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 353, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 353, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #35: GFLOPs: 858.5681. Time: 43112.1673 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #36: GFLOPs: 1121.8722. Time: 32993.7170 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #37: GFLOPs: 1431.4746. Time: 25857.7650 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #38: GFLOPs: 10349.1122. Time: 3576.6095 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #39: GFLOPs: 340.9131. Time: 108575.2767 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #40: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 5120), "float16"), C: T.Buffer((706, 5120), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 5120), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 5120), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(353, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(320, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 4, 2, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(5120, i_0_j_0_fused * 1280 + i_2_j_2_fused * 4 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(5120):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(320, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, ax0_ax1_fused_0 * 640 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2)
                                        v1 = T.axis.spatial(5120, k_0)
                                        T.where((ax0_ax1_fused_0 * 320 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 706)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(320, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0)
                                        v1 = T.axis.spatial(5120, i_0_j_0_fused * 1280 + ax0_ax1_fused_0 * 1280 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 4, 1, 2, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(5120, i_0_j_0_fused * 1280 + i_2_j_2_fused * 4 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused * 2 + ax0)
                            v1 = T.axis.spatial(5120, i_0_j_0_fused * 1280 + i_2_j_2_fused * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 1, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 1, 320, 4, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[5120, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 320, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 320, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #41: GFLOPs: 4548.7081. Time: 8137.4165 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #42: GFLOPs: 8441.1776. Time: 4385.0200 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #43: GFLOPs: 167.2405. Time: 221326.3343 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #44: GFLOPs: 15.2667. Time: 2424541.1783 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #45: GFLOPs: 11692.6235. Time: 3165.6482 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #46: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 5120), "float16"), C: T.Buffer((706, 5120), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 5120), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 5120), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1412, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(80, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 8, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_0_j_0_fused // 2 * 353 + i_1_j_1_fused // 4 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(5120, i_0_j_0_fused % 2 * 2560 + i_1_j_1_fused % 4 * 640 + i_2_j_2_fused * 8 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(5120):
                        for ax0_ax1_fused_0 in range(5):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, i_0_j_0_fused // 2 * 353 + (ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1))
                                    v1 = T.axis.spatial(5120, k_0)
                                    T.where(ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1 < 353)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0)
                                        v1 = T.axis.spatial(5120, i_0_j_0_fused % 2 * 2560 + ax0_ax1_fused_0 * 160 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 8, 1, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_0_j_0_fused // 2 * 353 + i_1_j_1_fused // 4 + i_3 + i_4)
                                v_j = T.axis.spatial(5120, i_0_j_0_fused % 2 * 2560 + i_1_j_1_fused % 4 * 640 + i_2_j_2_fused * 8 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_0_j_0_fused // 2 * 353 + i_1_j_1_fused // 4 + ax0)
                            v1 = T.axis.spatial(5120, i_0_j_0_fused % 2 * 2560 + i_1_j_1_fused % 4 * 640 + i_2_j_2_fused * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 353, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 4, 80, 8, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[5120, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 80], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 80, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #47: GFLOPs: 41.4159. Time: 893731.8520 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #48: GFLOPs: 181.6511. Time: 203768.2900 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #49: GFLOPs: 1996.3427. Time: 18541.2723 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #50: GFLOPs: 11602.1963. Time: 3190.3212 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #51: GFLOPs: 59.0681. Time: 626644.6530 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #52: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 5120), "float16"), C: T.Buffer((706, 5120), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 5120), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 5120), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1412, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(80, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 8, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_0_j_0_fused // 2 * 353 + i_1_j_1_fused // 4 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(5120, i_0_j_0_fused % 2 * 2560 + i_1_j_1_fused % 4 * 640 + i_2_j_2_fused * 8 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(23):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, i_0_j_0_fused // 2 * 353 + (ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1) // 5)
                                    v1 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1) % 5)
                                    T.where(ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1 < 1765)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(80):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 160 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2560)
                                        v1 = T.axis.spatial(5120, i_0_j_0_fused % 2 * 2560 + (ax0_ax1_fused_0 * 160 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2560)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 8, 5, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_0_j_0_fused // 2 * 353 + i_1_j_1_fused // 4 + i_3 + i_4)
                                v_j = T.axis.spatial(5120, i_0_j_0_fused % 2 * 2560 + i_1_j_1_fused % 4 * 640 + i_2_j_2_fused * 8 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 5 + k_1 * 5 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_0_j_0_fused // 2 * 353 + i_1_j_1_fused // 4 + ax0)
                            v1 = T.axis.spatial(5120, i_0_j_0_fused % 2 * 2560 + i_1_j_1_fused % 4 * 640 + i_2_j_2_fused * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 353, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 4, 80, 8, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 1, 5])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 80], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 80, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #53: GFLOPs: 233.2536. Time: 158688.8120 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #54: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 5120), "float16"), C: T.Buffer((706, 5120), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 5120), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 5120), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1412, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 1, 1, 20):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused // 4 * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(5120, i_1_j_1_fused % 4 * 1280 + i_2_j_2_fused * 20 + j_3_init * 20 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1280):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(5120, k_0 * 4 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 2824)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(40):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 4 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 5120)
                                        v1 = T.axis.spatial(5120, (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 5120)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 2, 1, 1, 1, 20):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused // 4 * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(5120, i_1_j_1_fused % 4 * 1280 + i_2_j_2_fused * 20 + j_3 * 20 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 4 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 20):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused // 4 * 2 + ax0)
                            v1 = T.axis.spatial(5120, i_1_j_1_fused % 4 * 1280 + i_2_j_2_fused * 20 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 1, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 4, 64, 1, 20])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1280, 4, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #55: GFLOPs: 20.1087. Time: 1840735.3513 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #56: GFLOPs: 16342.9802. Time: 2264.8704 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #57: GFLOPs: 218.0043. Time: 169788.9810 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #58: GFLOPs: 61.2560. Time: 604262.5730 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #59: GFLOPs: 6531.3351. Time: 5667.2537 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #60: GFLOPs: 4995.5291. Time: 7409.5720 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #61: GFLOPs: 982.4844. Time: 37674.6267 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #62: GFLOPs: 13.3944. Time: 2763447.5910 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #63: GFLOPs: 307.4490. Time: 120393.0763 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #64: GFLOPs: 11388.7070. Time: 3250.1260 us. Best GFLOPs: 21332.5394
2025-10-01 21:57:25 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-01 21:57:25 [INFO] [evolutionary_search.cc:715] Picked top 58 candidate(s) from database
2025-10-01 21:57:26 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 448 failure(s)
2025-10-01 21:57:27 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 896 failure(s)
2025-10-01 21:57:28 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 1341 failure(s)
2025-10-01 21:57:29 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 1789 failure(s)
2025-10-01 21:57:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 2232 failure(s)
2025-10-01 21:57:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 2678 failure(s)
2025-10-01 21:57:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 3119 failure(s)
2025-10-01 21:57:31 [INFO] [evolutionary_search.cc:723] Sampled 59 candidate(s)
2025-10-01 21:57:33 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 112 failure(s)
2025-10-01 21:57:35 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 103 failure(s)
2025-10-01 21:57:37 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 111 failure(s)
2025-10-01 21:57:39 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x24669028)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x24728ab8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x247289a8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x24489b08)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x244d7a78)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x24734eb8)]: 107 failure(s)
2025-10-01 21:57:39 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9986  0.9977  0.9977  0.9976  0.9969  0.9967  0.9945  0.9945  0.9944  0.9941  0.9935  0.9926  0.9909  0.9889  0.9886
[17 : 32]:	0.9861  0.9852  0.9834  0.9808  0.9806  0.9801  0.9782  0.9781  0.9779  0.9777  0.9770  0.9764  0.9764  0.9761  0.9759  0.9759
[33 : 48]:	0.9752  0.9751  0.9740  0.9740  0.9736  0.9702  0.9697  0.9695  0.9680  0.9665  0.9651  0.9645  0.9645  0.9641  0.9632  0.9630
[49 : 64]:	0.9623  0.9620  0.9618  0.9611  0.9602  0.9595  0.9595  0.9590  0.9580  0.9569  0.9558  0.9557  0.9556  0.9550  0.9527  0.9526
2025-10-01 21:57:40 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-01 21:57:40 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #65: GFLOPs: 31.4735. Time: 1176060.7910 us. Best GFLOPs: 21332.5394
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #66: GFLOPs: 40.0101. Time: 925134.3587 us. Best GFLOPs: 21332.5394
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #67: GFLOPs: 7789.2527. Time: 4752.0262 us. Best GFLOPs: 21332.5394
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #68: GFLOPs: 9424.8680. Time: 3927.3476 us. Best GFLOPs: 21332.5394
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #69: GFLOPs: 31.3471. Time: 1180803.7920 us. Best GFLOPs: 21332.5394
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #70: GFLOPs: 32497.8835. Time: 1138.9890 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #71: GFLOPs: 7225.1614. Time: 5123.0320 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #72: GFLOPs: 329.1179. Time: 112466.4917 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #73: GFLOPs: 30.6940. Time: 1205925.4557 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #74: GFLOPs: 74.0459. Time: 499888.7530 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #75: GFLOPs: 975.6067. Time: 37940.2210 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #76: GFLOPs: 815.9238. Time: 45365.4273 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #77: GFLOPs: 60.1130. Time: 615752.4820 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #78: GFLOPs: 255.1552. Time: 145067.4947 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #79: GFLOPs: 4030.6828. Time: 9183.2414 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #80: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 5120), "float16"), C: T.Buffer((706, 5120), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 5120), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 5120), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(353, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(80, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 16, 2, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(5120, i_0_j_0_fused * 1280 + i_2_j_2_fused * 16 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(45):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1) // 5)
                                    v1 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1) % 5)
                                    T.where(ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1 < 3530)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(10):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 640 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 1280)
                                        v1 = T.axis.spatial(5120, i_0_j_0_fused * 1280 + (ax0_ax1_fused_0 * 640 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 1280)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(5, 1, 16, 1, 2, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(5120, i_0_j_0_fused * 1280 + i_2_j_2_fused * 16 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 5 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused * 2 + ax0)
                            v1 = T.axis.spatial(5120, i_0_j_0_fused * 1280 + i_2_j_2_fused * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 1, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 1, 80, 16, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 5, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 80], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 80, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #81: GFLOPs: 7810.8464. Time: 4738.8888 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #82: GFLOPs: 30.7273. Time: 1204620.3610 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #83: GFLOPs: 53.2264. Time: 695419.9217 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #84: GFLOPs: 292.7328. Time: 126445.4547 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #85: GFLOPs: 28318.0743. Time: 1307.1063 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #86: GFLOPs: 18972.0752. Time: 1951.0113 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #87: GFLOPs: 1203.8784. Time: 30746.2385 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #88: GFLOPs: 247.1204. Time: 149784.2203 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #89: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 5120), "float16"), C: T.Buffer((706, 5120), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 5120), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 5120), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(64, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(353, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 40, 2, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_2_j_2_fused * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(5120, i_1_j_1_fused * 80 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2560):
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(353, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1) // 2)
                                    v1 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1) % 2)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(30):
                            for ax0_ax1_fused_1 in T.thread_binding(353, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1) // 5120)
                                    v1 = T.axis.spatial(5120, (ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1) % 5120)
                                    T.where(ax0_ax1_fused_0 * 353 + ax0_ax1_fused_1 < 10240)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 40, 2, 2, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_2_j_2_fused * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(5120, i_1_j_1_fused * 80 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 80):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_2_j_2_fused * 2 + ax0)
                            v1 = T.axis.spatial(5120, i_1_j_1_fused * 80 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 353, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 64, 1, 40, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2560, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 353], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 353], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #90: GFLOPs: 9352.1764. Time: 3957.8737 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #91: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 5120), "float16"), C: T.Buffer((706, 5120), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 5120), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 5120), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1412, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 1, 1, 10):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused // 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(5120, i_0_j_0_fused * 1280 + i_1_j_1_fused % 2 * 640 + i_2_j_2_fused * 10 + j_3_init * 10 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(640):
                        for ax0_ax1_fused_0 in range(89):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) // 8)
                                    v1 = T.axis.spatial(5120, k_0 * 8 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) % 8)
                                    T.where(ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1 < 5648)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(160):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0 * 8 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) // 1280)
                                    v1 = T.axis.spatial(5120, i_0_j_0_fused * 1280 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) % 1280)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(8, 1, 1, 1, 1, 10):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused // 2 + i_3 + i_4)
                                v_j = T.axis.spatial(5120, i_0_j_0_fused * 1280 + i_1_j_1_fused % 2 * 640 + i_2_j_2_fused * 10 + j_3 * 10 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 8 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 10):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused // 2 + ax0)
                            v1 = T.axis.spatial(5120, i_0_j_0_fused * 1280 + i_1_j_1_fused % 2 * 640 + i_2_j_2_fused * 10 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 706, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 2, 64, 1, 10])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[640, 8, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #92: GFLOPs: 78.8338. Time: 469528.4830 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #93: GFLOPs: 1666.8431. Time: 22206.4894 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #94: GFLOPs: 2351.5813. Time: 15740.3586 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #95: GFLOPs: 2028.0403. Time: 18251.4775 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #96: GFLOPs: 124.4830. Time: 297347.7577 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #97: GFLOPs: 9309.9328. Time: 3975.8324 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #98: GFLOPs: 7195.8261. Time: 5143.9171 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #99: GFLOPs: 15564.9445. Time: 2378.0832 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #100: GFLOPs: 30.3362. Time: 1220151.4483 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #101: GFLOPs: 2863.6616. Time: 12925.6658 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #102: GFLOPs: 240.5951. Time: 153846.5677 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #103: GFLOPs: 4602.1739. Time: 8042.8801 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #104: GFLOPs: 6577.3544. Time: 5627.6020 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #105: GFLOPs: 8829.0897. Time: 4192.3612 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #106: GFLOPs: 12165.8197. Time: 3042.5186 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #107: GFLOPs: 240.6058. Time: 153839.7623 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #108: GFLOPs: 4965.0979. Time: 7454.9854 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #109: GFLOPs: 239.6107. Time: 154478.6173 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #110: GFLOPs: 5775.9014. Time: 6408.4772 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #111: GFLOPs: 7258.6144. Time: 5099.4213 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #112: GFLOPs: 4019.1750. Time: 9209.5350 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #113: GFLOPs: 15175.3114. Time: 2439.1416 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #114: GFLOPs: 39.6513. Time: 933505.6963 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #115: GFLOPs: 210.2103. Time: 176084.3097 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #116: GFLOPs: 219.9293. Time: 168302.8563 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #117: GFLOPs: 62.6719. Time: 590611.4907 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #118: GFLOPs: 9309.4856. Time: 3976.0234 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #119: GFLOPs: 2553.0995. Time: 14497.9596 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #120: GFLOPs: 1100.3182. Time: 33640.0273 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #121: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((706, 5120), "float16"), B: T.Buffer((5120, 5120), "float16"), C: T.Buffer((706, 5120), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((706, 5120), "float16", scope="local")
        A_shared = T.alloc_buffer((706, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 5120), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(706, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 1, 1, 10):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_2_j_2_fused // 64 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(5120, i_0_j_0_fused * 1280 + i_1_j_1_fused % 2 * 640 + i_2_j_2_fused % 64 * 10 + j_3_init * 10 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(640):
                        for ax0_ax1_fused_0 in range(45):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(706, (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) // 8)
                                    v1 = T.axis.spatial(5120, k_0 * 8 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) % 8)
                                    T.where(ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 < 5648)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(10):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 8 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 1280)
                                        v1 = T.axis.spatial(5120, i_0_j_0_fused * 1280 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 1280)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(8, 1, 1, 1, 1, 10):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_2_j_2_fused // 64 + i_3 + i_4)
                                v_j = T.axis.spatial(5120, i_0_j_0_fused * 1280 + i_1_j_1_fused % 2 * 640 + i_2_j_2_fused % 64 * 10 + j_3 * 10 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 8 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 10):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(706, i_1_j_1_fused // 2 * 2 + i_2_j_2_fused // 64 + ax0)
                            v1 = T.axis.spatial(5120, i_0_j_0_fused * 1280 + i_1_j_1_fused % 2 * 640 + i_2_j_2_fused % 64 * 10 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 353, 2, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 2, 64, 1, 10])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[640, 8, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 128, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #122: GFLOPs: 126.7404. Time: 292051.5543 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #123: GFLOPs: 45.9129. Time: 806193.8473 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #124: GFLOPs: 7479.1315. Time: 4949.0683 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #125: GFLOPs: 8772.0568. Time: 4219.6185 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #126: GFLOPs: 1646.9495. Time: 22474.7222 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #127: GFLOPs: 137.2490. Time: 269690.3887 us. Best GFLOPs: 32497.8835
2025-10-01 22:03:54 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #128: GFLOPs: 3330.2734. Time: 11114.6229 us. Best GFLOPs: 32497.8835
