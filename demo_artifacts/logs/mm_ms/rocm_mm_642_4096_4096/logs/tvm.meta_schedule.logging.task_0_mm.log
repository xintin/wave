2025-10-02 00:57:00 [INFO] [task_scheduler.cc:160] Initializing Task #0: "mm"
2025-10-02 00:57:00 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 4096), "float16"), B: T.Buffer((4096, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        for i, j, k in T.grid(642, 4096, 4096):
            with T.block("C"):
                v_i, v_j, v_k = T.axis.remap("SSR", [i, j, k])
                T.reads(A[v_i, v_k], B[v_k, v_j])
                T.writes(C[v_i, v_j])
                with T.init():
                    C[v_i, v_j] = T.float16(0.0)
                C[v_i, v_j] = C[v_i, v_j] + A[v_i, v_k] * B[v_k, v_j]
2025-10-02 00:57:00 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2025-10-02 00:57:00 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 4096), "float16"), B: T.Buffer((4096, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
            A_shared = T.alloc_buffer((642, 4096), "float16", scope="shared")
            B_shared = T.alloc_buffer((4096, 4096), "float16", scope="shared")
            for i_0_j_0_fused in T.thread_binding(214, thread="blockIdx.x"):
                for i_1_j_1_fused in T.thread_binding(1, thread="vthread.x"):
                    for i_2_j_2_fused in T.thread_binding(4, thread="threadIdx.x"):
                        for k_0 in range(64):
                            for ax0_ax1_fused in range(192):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, i_0_j_0_fused * 3 + ax0_ax1_fused // 64)
                                    v1 = T.axis.spatial(4096, k_0 * 64 + ax0_ax1_fused % 64)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    A_shared[v0, v1] = A[v0, v1]
                            for ax0_ax1_fused in range(262144):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(4096, k_0 * 64 + ax0_ax1_fused // 4096)
                                    v1 = T.axis.spatial(4096, ax0_ax1_fused % 4096)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    B_shared[v0, v1] = B[v0, v1]
                            for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(64, 1, 128, 1, 3, 8):
                                with T.block("C"):
                                    v_i = T.axis.spatial(642, i_0_j_0_fused * 3 + i_3 * 3 + i_4)
                                    v_j = T.axis.spatial(4096, i_2_j_2_fused * 1024 + j_3 * 8 + j_4)
                                    v_k = T.axis.reduce(4096, k_0 * 64 + k_1 + k_2)
                                    T.reads(A_shared[v_i, v_k], B_shared[v_k, v_j])
                                    T.writes(C_local[v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        C_local[v_i, v_j] = T.float16(0.0)
                                    C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                        for ax0, ax1 in T.grid(3, 1024):
                            with T.block("C_local"):
                                v0 = T.axis.spatial(642, i_0_j_0_fused * 3 + ax0)
                                v1 = T.axis.spatial(4096, i_2_j_2_fused * 1024 + ax1)
                                T.reads(C_local[v0, v1])
                                T.writes(C[v0, v1])
                                C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[214, 1, 1, 1, 3])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 4, 128, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[64, 64, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
2025-10-02 00:57:00 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-02 00:57:00 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2025-10-02 00:57:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x38365458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3854c9f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3854b948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x382a4fe8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x384309a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3854bde8)]: 490 failure(s)
2025-10-02 00:57:02 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x38365458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3854c9f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3854b948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x382a4fe8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x384309a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3854bde8)]: 978 failure(s)
2025-10-02 00:57:03 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x38365458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3854c9f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3854b948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x382a4fe8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x384309a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3854bde8)]: 1460 failure(s)
2025-10-02 00:57:03 [INFO] [evolutionary_search.cc:723] Sampled 76 candidate(s)
2025-10-02 00:57:05 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x38365458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3854c9f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3854b948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x382a4fe8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x384309a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3854bde8)]: 101 failure(s)
2025-10-02 00:57:07 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x38365458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3854c9f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3854b948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x382a4fe8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x384309a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3854bde8)]: 94 failure(s)
2025-10-02 00:57:09 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x38365458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3854c9f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3854b948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x382a4fe8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x384309a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3854bde8)]: 80 failure(s)
2025-10-02 00:57:11 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x38365458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3854c9f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3854b948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x382a4fe8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x384309a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3854bde8)]: 85 failure(s)
2025-10-02 00:57:12 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9999  0.9998  0.9995  0.9992  0.9985  0.9985  0.9980  0.9978  0.9975  0.9966  0.9961  0.9958  0.9958  0.9957  0.9955  0.9942
[17 : 32]:	0.9942  0.9941  0.9930  0.9924  0.9917  0.9917  0.9902  0.9901  0.9899  0.9896  0.9888  0.9887  0.9879  0.9878  0.9867  0.9862
[33 : 48]:	0.9861  0.9852  0.9848  0.9842  0.9839  0.9832  0.9827  0.9824  0.9822  0.9822  0.9821  0.9818  0.9801  0.9790  0.9787  0.9777
[49 : 64]:	0.9773  0.9772  0.9751  0.9747  0.9740  0.9739  0.9723  0.9720  0.9717  0.9715  0.9700  0.9693  0.9688  0.9684  0.9669  0.9659
2025-10-02 00:57:12 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-02 00:57:12 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #1: GFLOPs: 17918.3455. Time: 1202.2285 us. Best GFLOPs: 17918.3455
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #2: GFLOPs: 27566.6824. Time: 781.4486 us. Best GFLOPs: 27566.6824
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #3: GFLOPs: 341.8423. Time: 63017.2067 us. Best GFLOPs: 27566.6824
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #4: GFLOPs: 6926.1404. Time: 3110.2380 us. Best GFLOPs: 27566.6824
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #5: GFLOPs: 34.1999. Time: 629882.8123 us. Best GFLOPs: 27566.6824
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #6: GFLOPs: 10607.4239. Time: 2030.8367 us. Best GFLOPs: 27566.6824
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #7: GFLOPs: 954.9987. Time: 22557.0418 us. Best GFLOPs: 27566.6824
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #8: GFLOPs: 27928.2263. Time: 771.3324 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #9: GFLOPs: 218.7626. Time: 98471.7913 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #10: GFLOPs: 9117.7160. Time: 2362.6471 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #11: GFLOPs: 39.0378. Time: 551823.0793 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #12: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 4096), "float16"), B: T.Buffer((4096, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(16, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(321, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 2, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(4096, i_0_j_0_fused * 256 + i_2_j_2_fused * 2 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 2568)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 256)
                                        v1 = T.axis.spatial(4096, i_0_j_0_fused * 256 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 256)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 2, 2, 1, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(4096, i_0_j_0_fused * 256 + i_2_j_2_fused * 2 + j_3 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 4 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 2):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused * 2 + ax0)
                            v1 = T.axis.spatial(4096, i_0_j_0_fused * 256 + i_2_j_2_fused * 2 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 321, 1, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[16, 1, 128, 2, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 4, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 128, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #13: GFLOPs: 22201.5169. Time: 970.2916 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #14: GFLOPs: 16879.1049. Time: 1276.2493 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #15: GFLOPs: 9423.4711. Time: 2285.9884 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #16: GFLOPs: 31.9314. Time: 674632.8937 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #17: GFLOPs: 14889.7093. Time: 1446.7674 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #18: GFLOPs: 45.4151. Time: 474334.8387 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #19: GFLOPs: 34.7817. Time: 619347.9410 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #20: GFLOPs: 3000.4947. Time: 7179.4646 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #21: GFLOPs: 11598.6118. Time: 1857.2865 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #22: GFLOPs: 10544.0408. Time: 2043.0446 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #23: GFLOPs: 170.2712. Time: 126515.5027 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #24: GFLOPs: 19460.4717. Time: 1106.9591 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #25: GFLOPs: 5488.4720. Time: 3924.9440 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #26: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 4096), "float16"), B: T.Buffer((4096, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(32, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(107, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 16, 3, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_2_j_2_fused * 6 + i_3_init * 3 + i_4_init)
                            v_j = T.axis.spatial(4096, i_0_j_0_fused * 2048 + i_1_j_1_fused * 64 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2048):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(4096, k_0 * 2 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(5):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0 * 2 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 2048)
                                        v1 = T.axis.spatial(4096, i_0_j_0_fused * 2048 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 2048)
                                        T.where((ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 16, 2, 3, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_2_j_2_fused * 6 + i_3 * 3 + i_4)
                                v_j = T.axis.spatial(4096, i_0_j_0_fused * 2048 + i_1_j_1_fused * 64 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(6, 64):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_2_j_2_fused * 6 + ax0)
                            v1 = T.axis.spatial(4096, i_0_j_0_fused * 2048 + i_1_j_1_fused * 64 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 107, 2, 3])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 32, 1, 16, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2048, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 107, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 107, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #27: GFLOPs: 3976.0055. Time: 5417.9868 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #28: GFLOPs: 80.5981. Time: 267276.1027 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #29: GFLOPs: 5269.3509. Time: 4088.1592 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #30: GFLOPs: 96.6890. Time: 222796.3257 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #31: GFLOPs: 5406.6318. Time: 3984.3559 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #32: GFLOPs: 17097.4828. Time: 1259.9484 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #33: GFLOPs: 3831.6107. Time: 5622.1644 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #34: GFLOPs: 93.4860. Time: 230429.6060 us. Best GFLOPs: 27928.2263
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #35: GFLOPs: 29099.0340. Time: 740.2976 us. Best GFLOPs: 29099.0340
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #36: GFLOPs: 2898.6703. Time: 7431.6646 us. Best GFLOPs: 29099.0340
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #37: GFLOPs: 9965.5828. Time: 2161.6343 us. Best GFLOPs: 29099.0340
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #38: GFLOPs: 401.7718. Time: 53617.3703 us. Best GFLOPs: 29099.0340
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #39: GFLOPs: 4648.5606. Time: 4634.1109 us. Best GFLOPs: 29099.0340
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #40: GFLOPs: 4104.8640. Time: 5247.9073 us. Best GFLOPs: 29099.0340
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #41: GFLOPs: 11192.3580. Time: 1924.7012 us. Best GFLOPs: 29099.0340
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #42: GFLOPs: 31.7182. Time: 679165.8120 us. Best GFLOPs: 29099.0340
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #43: GFLOPs: 13.3395. Time: 1614901.8553 us. Best GFLOPs: 29099.0340
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #44: GFLOPs: 25.3673. Time: 849201.4160 us. Best GFLOPs: 29099.0340
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #45: GFLOPs: 35936.4477. Time: 599.4456 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #46: GFLOPs: 338.8371. Time: 63576.1157 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #47: GFLOPs: 22.7554. Time: 946675.1300 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #48: GFLOPs: 12665.7459. Time: 1700.8035 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #49: GFLOPs: 28.5862. Time: 753579.2640 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #50: GFLOPs: 25.5314. Time: 843744.3033 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #51: GFLOPs: 15.6448. Time: 1376939.7783 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #52: GFLOPs: 22.7634. Time: 946343.1803 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #53: GFLOPs: 9364.3032. Time: 2300.4323 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #54: GFLOPs: 55.2251. Time: 390075.4800 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #55: GFLOPs: 7617.6597. Time: 2827.8955 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #56: GFLOPs: 54.2410. Time: 397152.3843 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #57: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 4096), "float16"), B: T.Buffer((4096, 4096), "float16"), C: T.Buffer((642, 4096), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 4096), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 4096), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(8, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(214, 4, 3, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_3_init * 3 + i_4_init)
                            v_j = T.axis.spatial(4096, i_0_j_0_fused * 2048 + i_1_j_1_fused * 256 + i_2_j_2_fused * 4 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(11):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 2568)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(128):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) // 2048)
                                    v1 = T.axis.spatial(4096, i_0_j_0_fused * 2048 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) % 2048)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 214, 4, 2, 3, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_3 * 3 + i_4)
                                v_j = T.axis.spatial(4096, i_0_j_0_fused * 2048 + i_1_j_1_fused * 256 + i_2_j_2_fused * 4 + j_3 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 4 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(642, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, ax0)
                            v1 = T.axis.spatial(4096, i_0_j_0_fused * 2048 + i_1_j_1_fused * 256 + i_2_j_2_fused * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 1, 214, 3])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 8, 64, 4, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 2, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #58: GFLOPs: 953.1390. Time: 22601.0542 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #59: GFLOPs: 26149.5911. Time: 823.7966 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #60: GFLOPs: 2612.2606. Time: 8246.4764 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #61: GFLOPs: 22174.9882. Time: 971.4524 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #62: GFLOPs: 10133.9028. Time: 2125.7304 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #63: GFLOPs: 52.5733. Time: 409750.6510 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #64: GFLOPs: 7.4257. Time: 2901009.1143 us. Best GFLOPs: 35936.4477
2025-10-02 01:01:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-02 01:01:56 [INFO] [evolutionary_search.cc:715] Picked top 61 candidate(s) from database
2025-10-02 01:01:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x38365458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3854c9f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3854b948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x382a4fe8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x384309a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3854bde8)]: 434 failure(s)
2025-10-02 01:01:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x38365458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3854c9f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3854b948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x382a4fe8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x384309a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3854bde8)]: 866 failure(s)
2025-10-02 01:01:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x38365458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3854c9f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3854b948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x382a4fe8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x384309a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3854bde8)]: 1293 failure(s)
2025-10-02 01:01:59 [INFO] [evolutionary_search.cc:723] Sampled 60 candidate(s)
2025-10-02 01:02:01 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x38365458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3854c9f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3854b948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x382a4fe8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x384309a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3854bde8)]: 78 failure(s)
2025-10-02 01:02:03 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x38365458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3854c9f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3854b948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x382a4fe8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x384309a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3854bde8)]: 70 failure(s)
2025-10-02 01:02:05 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x38365458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3854c9f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3854b948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x382a4fe8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x384309a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3854bde8)]: 75 failure(s)
2025-10-02 01:02:08 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x38365458)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x3854c9f8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x3854b948)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x382a4fe8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x384309a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x3854bde8)]: 91 failure(s)
2025-10-02 01:02:08 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9992  0.9980  0.9936  0.9928  0.9918  0.9916  0.9912  0.9909  0.9900  0.9889  0.9884  0.9883  0.9880  0.9874  0.9859  0.9837
[17 : 32]:	0.9836  0.9823  0.9821  0.9816  0.9813  0.9802  0.9796  0.9794  0.9793  0.9790  0.9786  0.9782  0.9766  0.9760  0.9760  0.9750
[33 : 48]:	0.9748  0.9731  0.9730  0.9713  0.9712  0.9710  0.9701  0.9697  0.9691  0.9686  0.9684  0.9683  0.9681  0.9677  0.9675  0.9658
[49 : 64]:	0.9657  0.9656  0.9648  0.9643  0.9625  0.9624  0.9623  0.9623  0.9622  0.9620  0.9603  0.9597  0.9594  0.9593  0.9569  0.9557
2025-10-02 01:02:08 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-02 01:02:08 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #65: GFLOPs: 8922.9476. Time: 2414.2185 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #66: GFLOPs: 33.1872. Time: 649103.5560 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #67: GFLOPs: 3511.4141. Time: 6134.8347 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #68: GFLOPs: 737.0712. Time: 29226.4117 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #69: GFLOPs: 14308.4625. Time: 1505.5388 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #70: GFLOPs: 16682.3726. Time: 1291.2999 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #71: GFLOPs: 14.3417. Time: 1502052.8970 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #72: GFLOPs: 32987.6784. Time: 653.0301 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #73: GFLOPs: 29770.6788. Time: 723.5960 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #74: GFLOPs: 268.2728. Time: 80298.6550 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #75: GFLOPs: 15151.8338. Time: 1421.7385 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #76: GFLOPs: 314.7525. Time: 68440.8923 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #77: GFLOPs: 8866.3922. Time: 2429.6179 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #78: GFLOPs: 2916.9407. Time: 7385.1160 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #79: GFLOPs: 21793.5742. Time: 988.4540 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #80: GFLOPs: 5951.4672. Time: 3619.6025 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #81: GFLOPs: 3975.7006. Time: 5418.4024 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #82: GFLOPs: 40.9700. Time: 525798.5023 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #83: GFLOPs: 22320.4936. Time: 965.1196 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #84: GFLOPs: 32.8150. Time: 656466.4713 us. Best GFLOPs: 35936.4477
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #85: GFLOPs: 43074.5113. Time: 500.1089 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #86: GFLOPs: 9437.3018. Time: 2282.6382 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #87: GFLOPs: 25.9890. Time: 828887.7767 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #88: GFLOPs: 148.7219. Time: 144847.1270 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #89: GFLOPs: 15.8550. Time: 1358680.4197 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #90: GFLOPs: 2313.3991. Time: 9311.8154 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #91: GFLOPs: 37.8483. Time: 569166.0560 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #92: GFLOPs: 59.0340. Time: 364907.2670 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #93: GFLOPs: 1120.8856. Time: 19218.6838 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #94: GFLOPs: 5586.9240. Time: 3855.7792 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #95: GFLOPs: 7726.9385. Time: 2787.9017 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #96: GFLOPs: 29.5192. Time: 729760.4167 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #97: GFLOPs: 17191.0343. Time: 1253.0919 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #98: GFLOPs: 22693.6036. Time: 949.2519 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #99: GFLOPs: 888.5159. Time: 24244.8622 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #100: GFLOPs: 54.3155. Time: 396607.5030 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #101: GFLOPs: 8142.2086. Time: 2645.7128 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #102: GFLOPs: 94.2202. Time: 228633.9313 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #103: GFLOPs: 7793.5907. Time: 2764.0591 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #104: GFLOPs: 36.7709. Time: 585841.8780 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #105: GFLOPs: 358.0742. Time: 60160.5580 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #106: GFLOPs: 468.9335. Time: 45938.1713 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #107: GFLOPs: 13665.7814. Time: 1576.3420 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #108: GFLOPs: 15904.4469. Time: 1354.4605 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #109: GFLOPs: 13992.7954. Time: 1539.5026 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #110: GFLOPs: 2033.5587. Time: 10593.2250 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #111: GFLOPs: 13515.5740. Time: 1593.8609 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #112: GFLOPs: 62.6123. Time: 344052.6937 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #113: GFLOPs: 12293.2904. Time: 1752.3336 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #114: GFLOPs: 11505.7419. Time: 1872.2778 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #115: GFLOPs: 7399.8055. Time: 2911.1502 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #116: GFLOPs: 245.8281. Time: 87630.1167 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #117: GFLOPs: 413.5210. Time: 52093.9533 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #118: GFLOPs: 331.4823. Time: 64986.7043 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #119: GFLOPs: 9047.6010. Time: 2380.9566 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #120: GFLOPs: 40574.6962. Time: 530.9207 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #121: GFLOPs: 17971.3523. Time: 1198.6825 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #122: GFLOPs: 9237.7524. Time: 2331.9466 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #123: GFLOPs: 2526.4885. Time: 8526.4371 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #124: GFLOPs: 77.6366. Time: 277471.6797 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #125: GFLOPs: 386.6928. Time: 55708.1653 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #126: GFLOPs: 31.5031. Time: 683804.1990 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #127: GFLOPs: 22964.6367. Time: 938.0486 us. Best GFLOPs: 43074.5113
2025-10-02 01:05:27 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #128: GFLOPs: 1034.8562. Time: 20816.3664 us. Best GFLOPs: 43074.5113
