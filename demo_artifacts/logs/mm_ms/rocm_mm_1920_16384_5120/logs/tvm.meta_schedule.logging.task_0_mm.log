2025-10-01 12:22:44 [INFO] [task_scheduler.cc:160] Initializing Task #0: "mm"
2025-10-01 12:22:44 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        for i, j, k in T.grid(1920, 16384, 5120):
            with T.block("C"):
                v_i, v_j, v_k = T.axis.remap("SSR", [i, j, k])
                T.reads(A[v_i, v_k], B[v_k, v_j])
                T.writes(C[v_i, v_j])
                with T.init():
                    C[v_i, v_j] = T.float16(0.0)
                C[v_i, v_j] = C[v_i, v_j] + A[v_i, v_k] * B[v_k, v_j]
2025-10-01 12:22:44 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2025-10-01 12:22:44 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 64})
            C_local = T.alloc_buffer((1920, 16384), "float16", scope="local")
            A_shared = T.alloc_buffer((1920, 5120), "float16", scope="shared")
            B_shared = T.alloc_buffer((5120, 16384), "float16", scope="shared")
            for i_0_j_0_fused in T.thread_binding(512, thread="blockIdx.x"):
                for i_1_j_1_fused in T.thread_binding(4, thread="vthread.x"):
                    for i_2_j_2_fused in T.thread_binding(8, thread="threadIdx.x"):
                        for k_0 in range(80):
                            for ax0_ax1_fused in range(30720):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(1920, i_0_j_0_fused // 128 * 480 + ax0_ax1_fused // 64)
                                    v1 = T.axis.spatial(5120, k_0 * 64 + ax0_ax1_fused % 64)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    A_shared[v0, v1] = A[v0, v1]
                            for ax0_ax1_fused in range(8192):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0 * 64 + ax0_ax1_fused // 128)
                                    v1 = T.axis.spatial(16384, i_0_j_0_fused % 128 * 128 + ax0_ax1_fused % 128)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    B_shared[v0, v1] = B[v0, v1]
                            for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(8, 5, 2, 8, 48, 4):
                                with T.block("C"):
                                    v_i = T.axis.spatial(1920, i_0_j_0_fused // 128 * 480 + i_1_j_1_fused // 2 * 240 + i_3 * 48 + i_4)
                                    v_j = T.axis.spatial(16384, i_0_j_0_fused % 128 * 128 + i_1_j_1_fused % 2 * 64 + i_2_j_2_fused * 8 + j_3 * 4 + j_4)
                                    v_k = T.axis.reduce(5120, k_0 * 64 + k_1 * 8 + k_2)
                                    T.reads(A_shared[v_i, v_k], B_shared[v_k, v_j])
                                    T.writes(C_local[v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        C_local[v_i, v_j] = T.float16(0.0)
                                    C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                        for ax0, ax1 in T.grid(240, 8):
                            with T.block("C_local"):
                                v0 = T.axis.spatial(1920, i_0_j_0_fused // 128 * 480 + i_1_j_1_fused // 2 * 240 + ax0)
                                v1 = T.axis.spatial(16384, i_0_j_0_fused % 128 * 128 + i_1_j_1_fused % 2 * 64 + i_2_j_2_fused * 8 + ax1)
                                T.reads(C_local[v0, v1])
                                T.writes(C[v0, v1])
                                C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 2, 1, 5, 48])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[128, 2, 8, 2, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[80, 8, 8])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
2025-10-01 12:22:44 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-01 12:22:44 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2025-10-01 12:22:45 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 504 failure(s)
2025-10-01 12:22:46 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 1003 failure(s)
2025-10-01 12:22:48 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 1505 failure(s)
2025-10-01 12:22:49 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 2006 failure(s)
2025-10-01 12:22:50 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 2503 failure(s)
2025-10-01 12:22:50 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2025-10-01 12:22:53 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 136 failure(s)
2025-10-01 12:22:55 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 95 failure(s)
2025-10-01 12:22:57 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 83 failure(s)
2025-10-01 12:22:59 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 85 failure(s)
2025-10-01 12:22:59 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9993  0.9986  0.9963  0.9955  0.9941  0.9941  0.9932  0.9929  0.9927  0.9920  0.9918  0.9916  0.9914  0.9908  0.9902  0.9891
[17 : 32]:	0.9874  0.9867  0.9867  0.9858  0.9851  0.9845  0.9839  0.9832  0.9817  0.9800  0.9794  0.9786  0.9783  0.9778  0.9765  0.9757
[33 : 48]:	0.9735  0.9729  0.9727  0.9726  0.9726  0.9725  0.9720  0.9705  0.9702  0.9693  0.9693  0.9689  0.9679  0.9668  0.9650  0.9648
[49 : 64]:	0.9639  0.9619  0.9617  0.9610  0.9608  0.9608  0.9605  0.9589  0.9587  0.9586  0.9574  0.9561  0.9556  0.9548  0.9533  0.9532
2025-10-01 12:23:00 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-01 12:23:00 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #1: GFLOPs: 356.5459. Time: 903453.1250 us. Best GFLOPs: 356.5459
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #2: GFLOPs: 49157.5344. Time: 6552.8622 us. Best GFLOPs: 49157.5344
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #3: GFLOPs: 533.9724. Time: 603256.8763 us. Best GFLOPs: 49157.5344
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #4: GFLOPs: 32162.3079. Time: 10015.5296 us. Best GFLOPs: 49157.5344
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #5: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1920, 16384), "float16", scope="local")
        A_shared = T.alloc_buffer((1920, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 16384), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(16, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(160, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(3, 8, 8, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1920, i_1_j_1_fused // 4 * 480 + i_2_j_2_fused // 8 * 24 + i_3_init * 8 + i_4_init)
                            v_j = T.axis.spatial(16384, i_0_j_0_fused * 2048 + i_1_j_1_fused % 4 * 512 + i_2_j_2_fused % 8 * 64 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(5120):
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(160, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1920, ax0_ax1_fused_0 * 640 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2)
                                        v1 = T.axis.spatial(5120, k_0)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(7):
                            for ax0_ax1_fused_1 in T.thread_binding(160, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0)
                                        v1 = T.axis.spatial(16384, i_0_j_0_fused * 2048 + (ax0_ax1_fused_0 * 320 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2))
                                        T.where((ax0_ax1_fused_0 * 160 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 2048)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 3, 8, 1, 8, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1920, i_1_j_1_fused // 4 * 480 + i_2_j_2_fused // 8 * 24 + i_3 * 8 + i_4)
                                v_j = T.axis.spatial(16384, i_0_j_0_fused * 2048 + i_1_j_1_fused % 4 * 512 + i_2_j_2_fused % 8 * 64 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(5120, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(24, 64):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1920, i_1_j_1_fused // 4 * 480 + i_2_j_2_fused // 8 * 24 + ax0)
                            v1 = T.axis.spatial(16384, i_0_j_0_fused * 2048 + i_1_j_1_fused % 4 * 512 + i_2_j_2_fused % 8 * 64 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 4, 20, 3, 8])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 4, 8, 8, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[5120, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 160, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 160, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #6: GFLOPs: 530.4925. Time: 607214.1927 us. Best GFLOPs: 49157.5344
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #7: GFLOPs: 234.5126. Time: 1373583.1703 us. Best GFLOPs: 49157.5344
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #8: GFLOPs: 2046.8842. Time: 157372.1413 us. Best GFLOPs: 49157.5344
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #9: GFLOPs: 906.4698. Time: 355359.3750 us. Best GFLOPs: 49157.5344
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #10: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1920, 16384), "float16", scope="local")
        A_shared = T.alloc_buffer((1920, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 16384), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(32, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(256, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(320, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 1, 6, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1920, i_1_j_1_fused // 16 * 120 + i_2_j_2_fused // 32 * 12 + i_3_init * 6 + i_4_init)
                            v_j = T.axis.spatial(16384, i_0_j_0_fused * 512 + i_1_j_1_fused % 16 * 32 + i_2_j_2_fused % 32 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2560):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(320, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1920, (ax0_ax1_fused_0 * 2560 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 2560 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 320 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 3840)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(320, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 320 + ax0_ax1_fused_1) // 512)
                                    v1 = T.axis.spatial(16384, i_0_j_0_fused * 512 + (ax0_ax1_fused_0 * 320 + ax0_ax1_fused_1) % 512)
                                    T.where(ax0_ax1_fused_0 * 320 + ax0_ax1_fused_1 < 1024)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 1, 2, 6, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1920, i_1_j_1_fused // 16 * 120 + i_2_j_2_fused // 32 * 12 + i_3 * 6 + i_4)
                                v_j = T.axis.spatial(16384, i_0_j_0_fused * 512 + i_1_j_1_fused % 16 * 32 + i_2_j_2_fused % 32 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(12, 1):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1920, i_1_j_1_fused // 16 * 120 + i_2_j_2_fused // 32 * 12 + ax0)
                            v1 = T.axis.spatial(16384, i_0_j_0_fused * 512 + i_1_j_1_fused % 16 * 32 + i_2_j_2_fused % 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 16, 10, 2, 6])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[32, 16, 32, 1, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2560, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 320, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 320], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #11: GFLOPs: 52071.3148. Time: 6186.1804 us. Best GFLOPs: 52071.3148
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #12: GFLOPs: 10683.2773. Time: 30152.0347 us. Best GFLOPs: 52071.3148
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #13: GFLOPs: 1178.6632. Time: 273294.8200 us. Best GFLOPs: 52071.3148
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #14: GFLOPs: 631.9316. Time: 509742.7163 us. Best GFLOPs: 52071.3148
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #15: GFLOPs: 209.3348. Time: 1538791.0153 us. Best GFLOPs: 52071.3148
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #16: GFLOPs: 1287.4366. Time: 250204.5897 us. Best GFLOPs: 52071.3148
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #17: GFLOPs: 34127.0066. Time: 9438.9335 us. Best GFLOPs: 52071.3148
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #18: GFLOPs: 20345.0058. Time: 15833.0034 us. Best GFLOPs: 52071.3148
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #19: GFLOPs: 1516.1109. Time: 212466.3490 us. Best GFLOPs: 52071.3148
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #20: GFLOPs: 1110.0297. Time: 290192.7287 us. Best GFLOPs: 52071.3148
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #21: GFLOPs: 3315.7082. Time: 97150.4513 us. Best GFLOPs: 52071.3148
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #22: GFLOPs: 1973.8052. Time: 163198.7507 us. Best GFLOPs: 52071.3148
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #23: GFLOPs: 1008.1408. Time: 319521.4027 us. Best GFLOPs: 52071.3148
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #24: GFLOPs: 55492.0784. Time: 5804.8384 us. Best GFLOPs: 55492.0784
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #25: GFLOPs: 33494.4889. Time: 9617.1805 us. Best GFLOPs: 55492.0784
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #26: GFLOPs: 1252.2359. Time: 257237.9150 us. Best GFLOPs: 55492.0784
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #27: GFLOPs: 9635.3267. Time: 33431.4090 us. Best GFLOPs: 55492.0784
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #28: GFLOPs: 989.5689. Time: 325518.0460 us. Best GFLOPs: 55492.0784
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #29: GFLOPs: 1319.8474. Time: 244060.4450 us. Best GFLOPs: 55492.0784
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #30: GFLOPs: 1370.6559. Time: 235013.4277 us. Best GFLOPs: 55492.0784
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #31: GFLOPs: 656.5161. Time: 490654.4593 us. Best GFLOPs: 55492.0784
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #32: GFLOPs: 625.2745. Time: 515169.8403 us. Best GFLOPs: 55492.0784
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #33: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1920, 16384), "float16", scope="local")
        A_shared = T.alloc_buffer((1920, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 16384), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(20, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(16, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(96, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 8, 1, 64):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1920, i_0_j_0_fused // 4 * 384 + i_1_j_1_fused // 8 * 192 + i_2_j_2_fused * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(16384, i_0_j_0_fused % 4 * 4096 + i_1_j_1_fused % 8 * 512 + j_3_init * 64 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1280):
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(96, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(1920, i_0_j_0_fused // 4 * 384 + (ax0_ax1_fused_0 * 96 + ax0_ax1_fused_1) // 4)
                                    v1 = T.axis.spatial(5120, k_0 * 4 + (ax0_ax1_fused_0 * 96 + ax0_ax1_fused_1) % 4)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(43):
                            for ax0_ax1_fused_1 in T.thread_binding(96, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 4 + (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(16384, i_0_j_0_fused % 4 * 4096 + (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4096)
                                        T.where((ax0_ax1_fused_0 * 96 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 16384)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 2, 8, 1, 1, 64):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1920, i_0_j_0_fused // 4 * 384 + i_1_j_1_fused // 8 * 192 + i_2_j_2_fused * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(16384, i_0_j_0_fused % 4 * 4096 + i_1_j_1_fused % 8 * 512 + j_3 * 64 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 4 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 512):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1920, i_0_j_0_fused // 4 * 384 + i_1_j_1_fused // 8 * 192 + i_2_j_2_fused * 2 + ax0)
                            v1 = T.axis.spatial(16384, i_0_j_0_fused % 4 * 4096 + i_1_j_1_fused % 8 * 512 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[5, 2, 96, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 8, 1, 8, 64])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1280, 4, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 96], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 96, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #34: GFLOPs: 472.2674. Time: 682076.5380 us. Best GFLOPs: 55492.0784
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #35: GFLOPs: 6898.7267. Time: 46693.0440 us. Best GFLOPs: 55492.0784
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #36: Error in building:
LocalBuilder: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1920, 16384), "float16", scope="local")
        A_shared = T.alloc_buffer((1920, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 16384), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(960, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 8, 1, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1920, i_1_j_1_fused * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(16384, i_0_j_0_fused * 4096 + i_2_j_2_fused * 64 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2560):
                        for ax0_ax1_fused_0 in range(30):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1920, (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(32):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(16384, i_0_j_0_fused * 4096 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 2, 8, 1, 1, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1920, i_1_j_1_fused * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(16384, i_0_j_0_fused * 4096 + i_2_j_2_fused * 64 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 64):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1920, i_1_j_1_fused * 2 + ax0)
                            v1 = T.axis.spatial(16384, i_0_j_0_fused * 4096 + i_2_j_2_fused * 64 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 960, 1, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 1, 64, 8, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2560, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #37: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1920, 16384), "float16", scope="local")
        A_shared = T.alloc_buffer((1920, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 16384), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(128, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(5, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(4, 4, 48, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1920, i_0_j_0_fused // 64 * 960 + i_1_j_1_fused * 192 + i_3_init * 48 + i_4_init)
                            v_j = T.axis.spatial(16384, i_0_j_0_fused % 64 * 256 + i_2_j_2_fused * 4 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(512):
                        for ax0_ax1_fused_0 in range(19):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1920, i_0_j_0_fused // 64 * 960 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 10)
                                        v1 = T.axis.spatial(5120, k_0 * 10 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 10)
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 9600)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(5):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 10 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 256)
                                        v1 = T.axis.spatial(16384, i_0_j_0_fused % 64 * 256 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 256)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(5, 4, 4, 2, 48, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1920, i_0_j_0_fused // 64 * 960 + i_1_j_1_fused * 192 + i_3 * 48 + i_4)
                                v_j = T.axis.spatial(16384, i_0_j_0_fused % 64 * 256 + i_2_j_2_fused * 4 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 10 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(192, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1920, i_0_j_0_fused // 64 * 960 + i_1_j_1_fused * 192 + ax0)
                            v1 = T.axis.spatial(16384, i_0_j_0_fused % 64 * 256 + i_2_j_2_fused * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 5, 1, 4, 48])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[64, 1, 64, 4, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[512, 5, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #38: GFLOPs: 57040.4384. Time: 5647.2663 us. Best GFLOPs: 57040.4384
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #39: GFLOPs: 73779.4415. Time: 4366.0204 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #40: GFLOPs: 9883.3431. Time: 32592.4683 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #41: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1920, 16384), "float16", scope="local")
        A_shared = T.alloc_buffer((1920, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 16384), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(512, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(8, 32, 30, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1920, i_0_j_0_fused // 4 * 960 + i_2_j_2_fused // 128 * 240 + i_3_init * 30 + i_4_init)
                            v_j = T.axis.spatial(16384, i_0_j_0_fused % 4 * 4096 + i_2_j_2_fused % 128 * 32 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1280):
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(512, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1920, i_0_j_0_fused // 4 * 960 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(5120, k_0 * 4 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 3840)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(512, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 4 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(16384, i_0_j_0_fused % 4 * 4096 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 8, 32, 4, 30, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1920, i_0_j_0_fused // 4 * 960 + i_2_j_2_fused // 128 * 240 + i_3 * 30 + i_4)
                                v_j = T.axis.spatial(16384, i_0_j_0_fused % 4 * 4096 + i_2_j_2_fused % 128 * 32 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 4 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(240, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1920, i_0_j_0_fused // 4 * 960 + i_2_j_2_fused // 128 * 240 + ax0)
                            v1 = T.axis.spatial(16384, i_0_j_0_fused % 4 * 4096 + i_2_j_2_fused % 128 * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 1, 4, 8, 30])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 1, 128, 32, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1280, 1, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 512, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 512, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #42: GFLOPs: 298.7683. Time: 1078168.3753 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #43: GFLOPs: 21566.4456. Time: 14936.2836 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #44: GFLOPs: 3520.6247. Time: 91495.8493 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #45: GFLOPs: 1382.9292. Time: 232927.7140 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #46: GFLOPs: 1472.1449. Time: 218811.7063 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #47: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1920, 16384), "float16", scope="local")
        A_shared = T.alloc_buffer((1920, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 16384), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(128, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(128, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(80, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 1, 3, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1920, i_0_j_0_fused // 32 * 480 + i_1_j_1_fused // 8 * 30 + i_2_j_2_fused // 16 * 6 + i_3_init * 3 + i_4_init)
                            v_j = T.axis.spatial(16384, i_0_j_0_fused % 32 * 512 + i_1_j_1_fused % 8 * 64 + i_2_j_2_fused % 16 * 4 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(256):
                        for ax0_ax1_fused_0 in range(15):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1920, i_0_j_0_fused // 32 * 480 + (ax0_ax1_fused_0 * 640 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 20)
                                        v1 = T.axis.spatial(5120, k_0 * 20 + (ax0_ax1_fused_0 * 640 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 20)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(64):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 20 + (ax0_ax1_fused_0 * 160 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 512)
                                        v1 = T.axis.spatial(16384, i_0_j_0_fused % 32 * 512 + (ax0_ax1_fused_0 * 160 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 512)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(20, 2, 1, 1, 3, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1920, i_0_j_0_fused // 32 * 480 + i_1_j_1_fused // 8 * 30 + i_2_j_2_fused // 16 * 6 + i_3 * 3 + i_4)
                                v_j = T.axis.spatial(16384, i_0_j_0_fused % 32 * 512 + i_1_j_1_fused % 8 * 64 + i_2_j_2_fused % 16 * 4 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 20 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(6, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1920, i_0_j_0_fused // 32 * 480 + i_1_j_1_fused // 8 * 30 + i_2_j_2_fused // 16 * 6 + ax0)
                            v1 = T.axis.spatial(16384, i_0_j_0_fused % 32 * 512 + i_1_j_1_fused % 8 * 64 + i_2_j_2_fused % 16 * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[4, 16, 5, 2, 3])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[32, 8, 16, 1, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[256, 20, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 80, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 80, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #48: GFLOPs: 17598.7783. Time: 18303.6880 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #49: GFLOPs: 68512.1790. Time: 4701.6830 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #50: GFLOPs: 377.7148. Time: 852819.4170 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #51: GFLOPs: 534.6387. Time: 602505.0860 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #52: GFLOPs: 1098.6800. Time: 293190.5110 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #53: GFLOPs: 404.4334. Time: 796478.5970 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #54: GFLOPs: 31378.2063. Time: 10265.8050 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #55: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1920, 16384), "float16", scope="local")
        A_shared = T.alloc_buffer((1920, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 16384), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(32, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(32, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(5, 1, 6, 16):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1920, i_1_j_1_fused * 60 + i_2_j_2_fused // 32 * 30 + i_3_init * 6 + i_4_init)
                            v_j = T.axis.spatial(16384, i_0_j_0_fused * 512 + i_2_j_2_fused % 32 * 16 + j_3_init * 16 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(640):
                        for ax0_ax1_fused_0 in range(30):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1920, (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(5120, k_0 * 8 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 8)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 8 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 512)
                                        v1 = T.axis.spatial(16384, i_0_j_0_fused * 512 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 512)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(8, 5, 1, 1, 6, 16):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1920, i_1_j_1_fused * 60 + i_2_j_2_fused // 32 * 30 + i_3 * 6 + i_4)
                                v_j = T.axis.spatial(16384, i_0_j_0_fused * 512 + i_2_j_2_fused % 32 * 16 + j_3 * 16 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 8 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(30, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1920, i_1_j_1_fused * 60 + i_2_j_2_fused // 32 * 30 + ax0)
                            v1 = T.axis.spatial(16384, i_0_j_0_fused * 512 + i_2_j_2_fused % 32 * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 32, 2, 5, 6])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[32, 1, 32, 1, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[640, 8, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #56: GFLOPs: 438.7101. Time: 734249.1860 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #57: GFLOPs: 1218.4763. Time: 264365.0510 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #58: GFLOPs: 1749.4673. Time: 184126.0780 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #59: GFLOPs: 1317.1519. Time: 244559.9160 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #60: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1920, 16384), "float16", scope="local")
        A_shared = T.alloc_buffer((1920, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 16384), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(16, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(16, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(80, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(3, 8, 8, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1920, i_1_j_1_fused // 4 * 480 + i_2_j_2_fused // 4 * 24 + i_3_init * 8 + i_4_init)
                            v_j = T.axis.spatial(16384, i_0_j_0_fused * 1024 + i_1_j_1_fused % 4 * 256 + i_2_j_2_fused % 4 * 64 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(5120):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1920, ax0_ax1_fused_0 * 320 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2)
                                        v1 = T.axis.spatial(5120, k_0)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(13):
                            for ax0_ax1_fused_1 in T.thread_binding(80, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0)
                                    v1 = T.axis.spatial(16384, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * 80 + ax0_ax1_fused_1 < 1024)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 3, 8, 1, 8, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1920, i_1_j_1_fused // 4 * 480 + i_2_j_2_fused // 4 * 24 + i_3 * 8 + i_4)
                                v_j = T.axis.spatial(16384, i_0_j_0_fused * 1024 + i_1_j_1_fused % 4 * 256 + i_2_j_2_fused % 4 * 64 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(5120, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(24, 64):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1920, i_1_j_1_fused // 4 * 480 + i_2_j_2_fused // 4 * 24 + ax0)
                            v1 = T.axis.spatial(16384, i_0_j_0_fused * 1024 + i_1_j_1_fused % 4 * 256 + i_2_j_2_fused % 4 * 64 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 4, 20, 3, 8])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[16, 4, 4, 8, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[5120, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 80, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 80], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #61: GFLOPs: 1827.8115. Time: 176234.0087 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #62: GFLOPs: 292.4871. Time: 1101322.1840 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #63: GFLOPs: 3592.8662. Time: 89656.1480 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #64: GFLOPs: 56275.7911. Time: 5723.9986 us. Best GFLOPs: 73779.4415
2025-10-01 12:31:56 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-01 12:31:56 [INFO] [evolutionary_search.cc:715] Picked top 55 candidate(s) from database
2025-10-01 12:31:57 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 445 failure(s)
2025-10-01 12:31:58 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 887 failure(s)
2025-10-01 12:31:59 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 1334 failure(s)
2025-10-01 12:32:00 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 1782 failure(s)
2025-10-01 12:32:01 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 2230 failure(s)
2025-10-01 12:32:01 [INFO] [evolutionary_search.cc:723] Sampled 55 candidate(s)
2025-10-01 12:32:04 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 98 failure(s)
2025-10-01 12:32:06 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 137 failure(s)
2025-10-01 12:32:08 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 110 failure(s)
2025-10-01 12:32:10 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x4bd3ed8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x4d71ba8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x4d962c8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x4d16dc8)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x4c671a8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x4d8fee8)]: 91 failure(s)
2025-10-01 12:32:10 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9996  0.9992  0.9983  0.9978  0.9978  0.9972  0.9951  0.9949  0.9942  0.9935  0.9932  0.9927  0.9926  0.9910  0.9907  0.9907
[17 : 32]:	0.9905  0.9903  0.9900  0.9891  0.9887  0.9884  0.9881  0.9879  0.9879  0.9877  0.9838  0.9834  0.9816  0.9803  0.9794  0.9786
[33 : 48]:	0.9777  0.9761  0.9756  0.9744  0.9738  0.9735  0.9733  0.9705  0.9704  0.9701  0.9697  0.9690  0.9683  0.9680  0.9679  0.9669
[49 : 64]:	0.9662  0.9661  0.9658  0.9647  0.9636  0.9636  0.9634  0.9632  0.9627  0.9627  0.9620  0.9619  0.9617  0.9612  0.9607  0.9607
2025-10-01 12:32:10 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-01 12:32:11 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #65: GFLOPs: 1006.7336. Time: 319967.9970 us. Best GFLOPs: 73779.4415
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #66: GFLOPs: 476.8065. Time: 675583.3740 us. Best GFLOPs: 73779.4415
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #67: GFLOPs: 3301.4629. Time: 97569.6410 us. Best GFLOPs: 73779.4415
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #68: GFLOPs: 1400.1112. Time: 230069.2543 us. Best GFLOPs: 73779.4415
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #69: GFLOPs: 1830.7869. Time: 175947.5910 us. Best GFLOPs: 73779.4415
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #70: GFLOPs: 549.6714. Time: 586027.5063 us. Best GFLOPs: 73779.4415
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #71: GFLOPs: 6563.9751. Time: 49074.3100 us. Best GFLOPs: 73779.4415
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #72: GFLOPs: 38936.2327. Time: 8273.0795 us. Best GFLOPs: 73779.4415
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #73: GFLOPs: 21683.3838. Time: 14855.7324 us. Best GFLOPs: 73779.4415
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #74: GFLOPs: 518.5741. Time: 621169.7997 us. Best GFLOPs: 73779.4415
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #75: GFLOPs: 26237.0879. Time: 12277.3742 us. Best GFLOPs: 73779.4415
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #76: GFLOPs: 74609.3259. Time: 4317.4569 us. Best GFLOPs: 74609.3259
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #77: GFLOPs: 225.2505. Time: 1430063.3137 us. Best GFLOPs: 74609.3259
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #78: GFLOPs: 7852.8638. Time: 41019.7550 us. Best GFLOPs: 74609.3259
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #79: GFLOPs: 88288.0065. Time: 3648.5425 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #80: GFLOPs: 1351.5620. Time: 238333.5367 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #81: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1920, 16384), "float16", scope="local")
        A_shared = T.alloc_buffer((1920, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 16384), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(16, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(40, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(96, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(4, 2, 1, 64):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1920, i_1_j_1_fused // 8 * 384 + i_2_j_2_fused * 4 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(16384, i_0_j_0_fused * 1024 + i_1_j_1_fused % 8 * 128 + j_3_init * 64 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2560):
                        for ax0_ax1_fused_0 in range(10):
                            for ax0_ax1_fused_1 in T.thread_binding(96, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1920, (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(96, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(16384, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 1024)
                                        T.where((ax0_ax1_fused_0 * 96 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 2048)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 4, 2, 2, 1, 64):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1920, i_1_j_1_fused // 8 * 384 + i_2_j_2_fused * 4 + i_3 + i_4)
                                v_j = T.axis.spatial(16384, i_0_j_0_fused * 1024 + i_1_j_1_fused % 8 * 128 + j_3 * 64 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(4, 128):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1920, i_1_j_1_fused // 8 * 384 + i_2_j_2_fused * 4 + ax0)
                            v1 = T.axis.spatial(16384, i_0_j_0_fused * 1024 + i_1_j_1_fused % 8 * 128 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 5, 96, 4, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[16, 8, 1, 2, 64])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2560, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 96, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 96, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #82: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1920, 16384), "float16", scope="local")
        A_shared = T.alloc_buffer((1920, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 16384), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(8, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(15, 16, 1, 32):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1920, i_0_j_0_fused // 2 * 960 + i_1_j_1_fused * 120 + i_2_j_2_fused // 16 * 15 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(16384, i_0_j_0_fused % 2 * 8192 + i_2_j_2_fused % 16 * 512 + j_3_init * 32 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(5120):
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(1920, i_0_j_0_fused // 2 * 960 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1))
                                    v1 = T.axis.spatial(5120, k_0)
                                    T.where(ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 < 960)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(16):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0)
                                        v1 = T.axis.spatial(16384, i_0_j_0_fused % 2 * 8192 + ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 15, 16, 1, 1, 32):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1920, i_0_j_0_fused // 2 * 960 + i_1_j_1_fused * 120 + i_2_j_2_fused // 16 * 15 + i_3 + i_4)
                                v_j = T.axis.spatial(16384, i_0_j_0_fused % 2 * 8192 + i_2_j_2_fused % 16 * 512 + j_3 * 32 + j_4)
                                v_k = T.axis.reduce(5120, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(15, 512):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1920, i_0_j_0_fused // 2 * 960 + i_1_j_1_fused * 120 + i_2_j_2_fused // 16 * 15 + ax0)
                            v1 = T.axis.spatial(16384, i_0_j_0_fused % 2 * 8192 + i_2_j_2_fused % 16 * 512 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 8, 8, 15, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 1, 16, 16, 32])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[5120, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 128, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #83: GFLOPs: 257.9084. Time: 1248980.2243 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #84: GFLOPs: 1163.0780. Time: 276956.9700 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #85: GFLOPs: 65462.9076. Time: 4920.6880 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #86: GFLOPs: 3013.4629. Time: 106894.4803 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #87: GFLOPs: 577.5712. Time: 557719.1973 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #88: GFLOPs: 175.8999. Time: 1831283.2030 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #89: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1920, 16384), "float16", scope="local")
        A_shared = T.alloc_buffer((1920, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 16384), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(8, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(384, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(5, 128, 1, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1920, i_0_j_0_fused // 2 * 960 + i_1_j_1_fused * 120 + i_2_j_2_fused // 16 * 5 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(16384, i_0_j_0_fused % 2 * 8192 + i_2_j_2_fused % 16 * 512 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(5120):
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(384, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(1920, i_0_j_0_fused // 2 * 960 + (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1))
                                    v1 = T.axis.spatial(5120, k_0)
                                    T.where(ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1 < 960)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(22):
                            for ax0_ax1_fused_1 in T.thread_binding(384, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0)
                                    v1 = T.axis.spatial(16384, i_0_j_0_fused % 2 * 8192 + (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1))
                                    T.where(ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1 < 8192)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 5, 128, 1, 1, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1920, i_0_j_0_fused // 2 * 960 + i_1_j_1_fused * 120 + i_2_j_2_fused // 16 * 5 + i_3 + i_4)
                                v_j = T.axis.spatial(16384, i_0_j_0_fused % 2 * 8192 + i_2_j_2_fused % 16 * 512 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(5120, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(5, 512):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1920, i_0_j_0_fused // 2 * 960 + i_1_j_1_fused * 120 + i_2_j_2_fused // 16 * 5 + ax0)
                            v1 = T.axis.spatial(16384, i_0_j_0_fused % 2 * 8192 + i_2_j_2_fused % 16 * 512 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 8, 24, 5, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 1, 16, 128, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[5120, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 384], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 384], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #90: GFLOPs: 74584.2460. Time: 4318.9087 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #91: GFLOPs: 34740.5565. Time: 9272.2334 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #92: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1920, 16384), "float16", scope="local")
        A_shared = T.alloc_buffer((1920, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 16384), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(16, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(8, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(96, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(20, 2, 1, 64):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1920, i_2_j_2_fused * 20 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(16384, i_0_j_0_fused * 1024 + i_1_j_1_fused * 128 + j_3_init * 64 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2560):
                        for ax0_ax1_fused_0 in range(10):
                            for ax0_ax1_fused_1 in T.thread_binding(96, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1920, (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(22):
                            for ax0_ax1_fused_1 in T.thread_binding(96, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 96 + ax0_ax1_fused_1) // 1024)
                                    v1 = T.axis.spatial(16384, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 96 + ax0_ax1_fused_1) % 1024)
                                    T.where(ax0_ax1_fused_0 * 96 + ax0_ax1_fused_1 < 2048)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 20, 2, 2, 1, 64):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1920, i_2_j_2_fused * 20 + i_3 + i_4)
                                v_j = T.axis.spatial(16384, i_0_j_0_fused * 1024 + i_1_j_1_fused * 128 + j_3 * 64 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(20, 128):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1920, i_2_j_2_fused * 20 + ax0)
                            v1 = T.axis.spatial(16384, i_0_j_0_fused * 1024 + i_1_j_1_fused * 128 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 96, 20, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[16, 8, 1, 2, 64])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2560, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 96, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 96], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #93: GFLOPs: 73872.6799. Time: 4360.5098 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #94: GFLOPs: 163.6152. Time: 1968781.0870 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #95: GFLOPs: 1962.0969. Time: 164172.5970 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #96: GFLOPs: 1286.6077. Time: 250365.7837 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #97: GFLOPs: 149.1896. Time: 2159148.1117 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #98: GFLOPs: 1215.3029. Time: 265055.3587 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #99: GFLOPs: 1232.4297. Time: 261371.9480 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #100: GFLOPs: 2089.1282. Time: 154189.9413 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #101: GFLOPs: 1315.6199. Time: 244844.6857 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #102: GFLOPs: 1807.4170. Time: 178222.5950 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #103: GFLOPs: 2054.1820. Time: 156813.0490 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #104: GFLOPs: 30158.2143. Time: 10681.0882 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #105: GFLOPs: 47610.9026. Time: 6765.7307 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #106: GFLOPs: 292.5265. Time: 1101173.7467 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #107: GFLOPs: 5246.4156. Time: 61398.5950 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #108: GFLOPs: 515.7570. Time: 624562.6220 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #109: GFLOPs: 1021.2288. Time: 315426.4117 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #110: GFLOPs: 6379.7843. Time: 50491.1343 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #111: GFLOPs: 2347.9829. Time: 137191.1823 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #112: GFLOPs: 9584.3093. Time: 33609.3647 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #113: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1920, 16384), "float16", scope="local")
        A_shared = T.alloc_buffer((1920, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 16384), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(16, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(128, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(240, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(4, 4, 2, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1920, i_0_j_0_fused // 8 * 960 + i_2_j_2_fused // 2 * 8 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(16384, i_0_j_0_fused % 8 * 2048 + i_1_j_1_fused * 16 + i_2_j_2_fused % 2 * 8 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(20):
                            for ax0_ax1_fused_1 in T.thread_binding(240, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(1920, i_0_j_0_fused // 8 * 960 + (ax0_ax1_fused_0 * 240 + ax0_ax1_fused_1) // 5)
                                    v1 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 240 + ax0_ax1_fused_1) % 5)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(11):
                            for ax0_ax1_fused_1 in T.thread_binding(240, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 5 + (ax0_ax1_fused_0 * 960 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2048)
                                        v1 = T.axis.spatial(16384, i_0_j_0_fused % 8 * 2048 + (ax0_ax1_fused_0 * 960 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2048)
                                        T.where((ax0_ax1_fused_0 * 240 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 10240)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(5, 4, 4, 1, 2, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1920, i_0_j_0_fused // 8 * 960 + i_2_j_2_fused // 2 * 8 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(16384, i_0_j_0_fused % 8 * 2048 + i_1_j_1_fused * 16 + i_2_j_2_fused % 2 * 8 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 5 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(8, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1920, i_0_j_0_fused // 8 * 960 + i_2_j_2_fused // 2 * 8 + ax0)
                            v1 = T.axis.spatial(16384, i_0_j_0_fused % 8 * 2048 + i_1_j_1_fused * 16 + i_2_j_2_fused % 2 * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 1, 120, 4, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 128, 2, 4, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 5, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 240], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 240, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #114: GFLOPs: 129.9153. Time: 2479481.9333 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #115: GFLOPs: 313.1044. Time: 1028802.4087 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #116: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1920, 16384), "float16", scope="local")
        A_shared = T.alloc_buffer((1920, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 16384), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(16, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(1280, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(6, 2, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1920, i_0_j_0_fused // 8 * 960 + i_1_j_1_fused // 32 * 24 + i_2_j_2_fused // 32 * 6 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(16384, i_0_j_0_fused % 8 * 2048 + i_1_j_1_fused % 32 * 64 + i_2_j_2_fused % 32 * 2 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1280):
                        for ax0_ax1_fused_0 in range(15):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(1920, i_0_j_0_fused // 8 * 960 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(5120, k_0 * 4 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(32):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 4 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2048)
                                        v1 = T.axis.spatial(16384, i_0_j_0_fused % 8 * 2048 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2048)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 6, 2, 2, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1920, i_0_j_0_fused // 8 * 960 + i_1_j_1_fused // 32 * 24 + i_2_j_2_fused // 32 * 6 + i_3 + i_4)
                                v_j = T.axis.spatial(16384, i_0_j_0_fused % 8 * 2048 + i_1_j_1_fused % 32 * 64 + i_2_j_2_fused % 32 * 2 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 4 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(6, 2):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1920, i_0_j_0_fused // 8 * 960 + i_1_j_1_fused // 32 * 24 + i_2_j_2_fused // 32 * 6 + ax0)
                            v1 = T.axis.spatial(16384, i_0_j_0_fused % 8 * 2048 + i_1_j_1_fused % 32 * 64 + i_2_j_2_fused % 32 * 2 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 40, 4, 6, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 32, 32, 2, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1280, 2, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 128, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #117: GFLOPs: 710.4672. Time: 453395.3857 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #118: GFLOPs: 1994.9211. Time: 161471.3233 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #119: GFLOPs: 10106.3068. Time: 31873.4188 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #120: GFLOPs: 2428.8170. Time: 132625.2847 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #121: GFLOPs: 14997.1047. Time: 21478.9824 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #122: GFLOPs: 36047.3611. Time: 8936.0923 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #123: GFLOPs: 33072.6438. Time: 9739.8487 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #124: GFLOPs: 34555.1646. Time: 9321.9798 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #125: GFLOPs: 1316.1509. Time: 244745.9103 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #126: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((1920, 5120), "float16"), B: T.Buffer((5120, 16384), "float16"), C: T.Buffer((1920, 16384), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((1920, 16384), "float16", scope="local")
        A_shared = T.alloc_buffer((1920, 5120), "float16", scope="shared")
        B_shared = T.alloc_buffer((5120, 16384), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(10240, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(3, 1, 2, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(1920, i_1_j_1_fused // 512 * 96 + i_2_j_2_fused // 4 * 6 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(16384, i_0_j_0_fused * 2048 + i_1_j_1_fused % 512 * 4 + i_2_j_2_fused % 4 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2560):
                        for ax0_ax1_fused_0 in range(60):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(1920, (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) // 2)
                                    v1 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) % 2)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(5120, k_0 * 2 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 2048)
                                        v1 = T.axis.spatial(16384, i_0_j_0_fused * 2048 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 2048)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 3, 1, 2, 2, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(1920, i_1_j_1_fused // 512 * 96 + i_2_j_2_fused // 4 * 6 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(16384, i_0_j_0_fused * 2048 + i_1_j_1_fused % 512 * 4 + i_2_j_2_fused % 4 + j_3 + j_4)
                                v_k = T.axis.reduce(5120, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(6, 1):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(1920, i_1_j_1_fused // 512 * 96 + i_2_j_2_fused // 4 * 6 + ax0)
                            v1 = T.axis.spatial(16384, i_0_j_0_fused * 2048 + i_1_j_1_fused % 512 * 4 + i_2_j_2_fused % 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 20, 16, 3, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 512, 4, 1, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2560, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #127: GFLOPs: 62474.1284. Time: 5156.0951 us. Best GFLOPs: 88288.0065
2025-10-01 12:42:11 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #128: GFLOPs: 1822.1078. Time: 176785.6647 us. Best GFLOPs: 88288.0065
