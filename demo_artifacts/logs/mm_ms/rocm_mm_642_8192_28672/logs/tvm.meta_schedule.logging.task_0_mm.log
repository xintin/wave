2025-10-01 23:45:29 [INFO] [task_scheduler.cc:160] Initializing Task #0: "mm"
2025-10-01 23:45:29 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        for i, j, k in T.grid(642, 8192, 28672):
            with T.block("C"):
                v_i, v_j, v_k = T.axis.remap("SSR", [i, j, k])
                T.reads(A[v_i, v_k], B[v_k, v_j])
                T.writes(C[v_i, v_j])
                with T.init():
                    C[v_i, v_j] = T.float16(0.0)
                C[v_i, v_j] = C[v_i, v_j] + A[v_i, v_k] * B[v_k, v_j]
2025-10-01 23:45:29 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2025-10-01 23:45:29 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 0})
            C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
            A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
            B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
            for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x"):
                for i_1_j_1_fused in T.thread_binding(192, thread="vthread.x"):
                    for i_2_j_2_fused in T.thread_binding(2, thread="threadIdx.x"):
                        for k_0 in range(4):
                            for ax0_ax1_fused in range(4601856):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, ax0_ax1_fused // 7168)
                                    v1 = T.axis.spatial(28672, k_0 * 7168 + ax0_ax1_fused % 7168)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 8})
                                    A_shared[v0, v1] = A[v0, v1]
                            for ax0_ax1_fused in range(14680064):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(28672, k_0 * 7168 + ax0_ax1_fused // 2048)
                                    v1 = T.axis.spatial(8192, i_0_j_0_fused * 2048 + ax0_ax1_fused % 2048)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 4})
                                    B_shared[v0, v1] = B[v0, v1]
                            for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(256, 107, 2, 28, 1, 16):
                                with T.block("C"):
                                    v_i = T.axis.spatial(642, i_1_j_1_fused // 32 * 107 + i_3 + i_4)
                                    v_j = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused % 32 * 64 + i_2_j_2_fused * 32 + j_3 * 16 + j_4)
                                    v_k = T.axis.reduce(28672, k_0 * 7168 + k_1 * 28 + k_2)
                                    T.reads(A_shared[v_i, v_k], B_shared[v_k, v_j])
                                    T.writes(C_local[v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        C_local[v_i, v_j] = T.float16(0.0)
                                    C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                        for ax0, ax1 in T.grid(107, 32):
                            with T.block("C_local"):
                                v0 = T.axis.spatial(642, i_1_j_1_fused // 32 * 107 + ax0)
                                v1 = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused % 32 * 64 + i_2_j_2_fused * 32 + ax1)
                                T.reads(C_local[v0, v1])
                                T.writes(C[v0, v1])
                                C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 6, 1, 107, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 32, 2, 2, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4, 256, 28])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
2025-10-01 23:45:29 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-01 23:45:29 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2025-10-01 23:45:30 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x15250c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x152c5bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x152f0548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x152a7468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x151fafc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x152f0678)]: 499 failure(s)
2025-10-01 23:45:31 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x15250c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x152c5bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x152f0548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x152a7468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x151fafc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x152f0678)]: 994 failure(s)
2025-10-01 23:45:33 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x15250c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x152c5bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x152f0548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x152a7468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x151fafc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x152f0678)]: 1495 failure(s)
2025-10-01 23:45:34 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x15250c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x152c5bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x152f0548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x152a7468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x151fafc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x152f0678)]: 1991 failure(s)
2025-10-01 23:45:34 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2025-10-01 23:45:36 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x15250c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x152c5bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x152f0548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x152a7468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x151fafc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x152f0678)]: 118 failure(s)
2025-10-01 23:45:38 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x15250c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x152c5bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x152f0548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x152a7468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x151fafc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x152f0678)]: 88 failure(s)
2025-10-01 23:45:40 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x15250c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x152c5bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x152f0548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x152a7468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x151fafc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x152f0678)]: 79 failure(s)
2025-10-01 23:45:43 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x15250c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x152c5bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x152f0548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x152a7468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x151fafc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x152f0678)]: 95 failure(s)
2025-10-01 23:45:43 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9956  0.9947  0.9936  0.9933  0.9930  0.9929  0.9926  0.9925  0.9917  0.9907  0.9907  0.9903  0.9883  0.9873  0.9867
[17 : 32]:	0.9861  0.9861  0.9849  0.9824  0.9820  0.9809  0.9800  0.9798  0.9790  0.9786  0.9775  0.9773  0.9769  0.9769  0.9767  0.9762
[33 : 48]:	0.9757  0.9748  0.9742  0.9723  0.9719  0.9715  0.9688  0.9681  0.9680  0.9679  0.9672  0.9670  0.9664  0.9663  0.9660  0.9658
[49 : 64]:	0.9646  0.9644  0.9638  0.9636  0.9628  0.9628  0.9623  0.9623  0.9611  0.9607  0.9597  0.9587  0.9583  0.9576  0.9576  0.9574
2025-10-01 23:45:43 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-01 23:45:43 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #1: GFLOPs: 835.2563. Time: 361071.4923 us. Best GFLOPs: 835.2563
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #2: GFLOPs: 4975.3302. Time: 60616.5260 us. Best GFLOPs: 4975.3302
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #3: GFLOPs: 13523.8591. Time: 22300.3828 us. Best GFLOPs: 13523.8591
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #4: GFLOPs: 9135.7777. Time: 33011.6652 us. Best GFLOPs: 13523.8591
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #5: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(16, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(48, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(107, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 4, 1, 16):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 8 * 107 + i_2_j_2_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused % 8 * 64 + j_3_init * 16 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(3584):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(28672, k_0 * 8 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 8)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(20):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 8 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 512)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 512 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 512)
                                        T.where((ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 4, 8, 1, 16):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 8 * 107 + i_2_j_2_fused + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused % 8 * 64 + j_3 * 16 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 8 + k_1 * 8 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 64):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 8 * 107 + i_2_j_2_fused + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused % 8 * 64 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 6, 107, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[16, 8, 1, 4, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[3584, 1, 8])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 107, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 107, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #6: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(4, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(256, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(107, 1, 3, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + i_3_init * 3 + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 8 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(7168):
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(28672, k_0 * 4 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 2568)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 4 + (ax0_ax1_fused_0 * 2048 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + (ax0_ax1_fused_0 * 2048 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 107, 1, 1, 3, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + i_3 * 3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 8 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 4 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(321, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 2, 1, 107, 3])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 2, 256, 1, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[7168, 4, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 256, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 256, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #7: GFLOPs: 961.5525. Time: 313646.1383 us. Best GFLOPs: 13523.8591
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #8: GFLOPs: 450.6928. Time: 669163.6960 us. Best GFLOPs: 13523.8591
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #9: GFLOPs: 386.1642. Time: 780981.9333 us. Best GFLOPs: 13523.8591
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #10: GFLOPs: 1283.3946. Time: 234991.8210 us. Best GFLOPs: 13523.8591
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #11: GFLOPs: 20703.3173. Time: 14567.0971 us. Best GFLOPs: 20703.3173
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #12: GFLOPs: 221.0225. Time: 1364509.1957 us. Best GFLOPs: 20703.3173
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #13: GFLOPs: 26921.4240. Time: 11202.4993 us. Best GFLOPs: 26921.4240
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #14: GFLOPs: 4014.2851. Time: 75128.5043 us. Best GFLOPs: 26921.4240
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #15: GFLOPs: 315.2729. Time: 956590.9830 us. Best GFLOPs: 26921.4240
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #16: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(12, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(64, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(214, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 32, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused // 4 * 214 + i_2_j_2_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused % 4 * 2048 + i_1_j_1_fused * 32 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(14336):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(214, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, i_0_j_0_fused // 4 * 214 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(28672, k_0 * 2 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 428)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(10):
                            for ax0_ax1_fused_1 in T.thread_binding(214, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 2 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2048)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused % 4 * 2048 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2048)
                                        T.where((ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 32, 2, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused // 4 * 214 + i_2_j_2_fused + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused % 4 * 2048 + i_1_j_1_fused * 32 + j_3 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused // 4 * 214 + i_2_j_2_fused + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused % 4 * 2048 + i_1_j_1_fused * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[3, 1, 214, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 64, 1, 32, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[14336, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 214, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 214, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #17: GFLOPs: 224.2627. Time: 1344794.2707 us. Best GFLOPs: 26921.4240
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #18: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(16, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(4, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(321, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 8, 1, 32):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + i_2_j_2_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused % 2 * 256 + j_3_init * 32 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(7):
                            for ax0_ax1_fused_1 in T.thread_binding(321, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 642 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 7)
                                        v1 = T.axis.spatial(28672, k_0 * 7 + (ax0_ax1_fused_0 * 642 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 7)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(12):
                            for ax0_ax1_fused_1 in T.thread_binding(321, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(28672, k_0 * 7 + (ax0_ax1_fused_0 * 321 + ax0_ax1_fused_1) // 512)
                                    v1 = T.axis.spatial(8192, i_0_j_0_fused * 512 + (ax0_ax1_fused_0 * 321 + ax0_ax1_fused_1) % 512)
                                    T.where(ax0_ax1_fused_0 * 321 + ax0_ax1_fused_1 < 3584)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(7, 1, 8, 1, 1, 32):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + i_2_j_2_fused + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused % 2 * 256 + j_3 * 32 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 7 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 256):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + i_2_j_2_fused + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused % 2 * 256 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 2, 321, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[16, 2, 1, 8, 32])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 7, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 321, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 321], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #19: GFLOPs: 1482.4655. Time: 203436.2587 us. Best GFLOPs: 26921.4240
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #20: GFLOPs: 4331.9172. Time: 69619.8067 us. Best GFLOPs: 26921.4240
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #21: GFLOPs: 1753.5892. Time: 171982.8287 us. Best GFLOPs: 26921.4240
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #22: GFLOPs: 43037.1716. Time: 7007.5989 us. Best GFLOPs: 43037.1716
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #23: GFLOPs: 249.7990. Time: 1207319.8240 us. Best GFLOPs: 43037.1716
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #24: GFLOPs: 366.3165. Time: 823296.7933 us. Best GFLOPs: 43037.1716
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #25: GFLOPs: 240.9190. Time: 1251820.1497 us. Best GFLOPs: 43037.1716
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #26: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(12, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(428, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 2, 1, 64):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 4 * 214 + i_2_j_2_fused // 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused % 4 * 256 + i_2_j_2_fused % 2 * 128 + j_3_init * 64 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(3584):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(428, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 3424 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(28672, k_0 * 8 + (ax0_ax1_fused_0 * 3424 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 8)
                                        T.where((ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 5136)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(20):
                            for ax0_ax1_fused_1 in T.thread_binding(428, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(28672, k_0 * 8 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1) // 1024)
                                    v1 = T.axis.spatial(8192, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1) % 1024)
                                    T.where(ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 < 8192)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 2, 4, 1, 64):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 4 * 214 + i_2_j_2_fused // 2 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused % 4 * 256 + i_2_j_2_fused % 2 * 128 + j_3 * 64 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 8 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 128):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 4 * 214 + i_2_j_2_fused // 2 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused % 4 * 256 + i_2_j_2_fused % 2 * 128 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 3, 214, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 4, 2, 2, 64])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[3584, 2, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 428, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 428], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #27: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(8, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(856, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(3, 4, 2, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_2_j_2_fused // 8 * 6 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 256 + i_2_j_2_fused % 8 * 32 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(3584):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(856, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 6848 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(28672, k_0 * 8 + (ax0_ax1_fused_0 * 6848 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 8)
                                        T.where((ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 5136)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(20):
                            for ax0_ax1_fused_1 in T.thread_binding(856, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(28672, k_0 * 8 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1) // 2048)
                                    v1 = T.axis.spatial(8192, i_0_j_0_fused * 2048 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1) % 2048)
                                    T.where(ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 < 16384)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(8, 3, 4, 1, 2, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_2_j_2_fused // 8 * 6 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 256 + i_2_j_2_fused % 8 * 32 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 8 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(6, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_2_j_2_fused // 8 * 6 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 256 + i_2_j_2_fused % 8 * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 107, 3, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 8, 8, 4, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[3584, 8, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 856, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 856], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #28: GFLOPs: 238.3474. Time: 1265326.0903 us. Best GFLOPs: 43037.1716
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #29: GFLOPs: 44745.1250. Time: 6740.1138 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #30: GFLOPs: 933.1768. Time: 323183.3900 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #31: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(4, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(321, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 16, 1, 32):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + i_2_j_2_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused % 2 * 512 + j_3_init * 32 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(14):
                            for ax0_ax1_fused_1 in T.thread_binding(321, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 321 + ax0_ax1_fused_1) // 7)
                                    v1 = T.axis.spatial(28672, k_0 * 7 + (ax0_ax1_fused_0 * 321 + ax0_ax1_fused_1) % 7)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(321, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 7 + (ax0_ax1_fused_0 * 1284 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 1284 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 1024)
                                        T.where((ax0_ax1_fused_0 * 321 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 7168)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 16, 7, 1, 32):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + i_2_j_2_fused + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused % 2 * 512 + j_3 * 32 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 7 + k_1 * 7 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 512):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + i_2_j_2_fused + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused % 2 * 512 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 2, 321, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 2, 1, 16, 32])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 7])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 321], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 321, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #32: GFLOPs: 685.9445. Time: 439667.1140 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #33: GFLOPs: 903.6992. Time: 333725.2400 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #34: GFLOPs: 418.8344. Time: 720063.1510 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #35: GFLOPs: 152.2681. Time: 1980632.9750 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #36: GFLOPs: 184.1538. Time: 1637692.0570 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #37: GFLOPs: 6336.1722. Time: 47597.7020 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #38: GFLOPs: 10464.8487. Time: 28819.0725 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #39: GFLOPs: 4600.3507. Time: 65557.4440 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #40: GFLOPs: 4961.3218. Time: 60787.6790 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #41: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(8, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(856, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(3, 4, 2, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_2_j_2_fused // 8 * 6 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 256 + i_2_j_2_fused % 8 * 32 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(3584):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(856, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 6848 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(28672, k_0 * 8 + (ax0_ax1_fused_0 * 6848 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 8)
                                        T.where((ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 5136)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(20):
                            for ax0_ax1_fused_1 in T.thread_binding(856, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(28672, k_0 * 8 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1) // 2048)
                                    v1 = T.axis.spatial(8192, i_0_j_0_fused * 2048 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1) % 2048)
                                    T.where(ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 < 16384)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(8, 3, 4, 1, 2, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_2_j_2_fused // 8 * 6 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 256 + i_2_j_2_fused % 8 * 32 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 8 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(6, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_2_j_2_fused // 8 * 6 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 256 + i_2_j_2_fused % 8 * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 107, 3, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 8, 8, 4, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[3584, 8, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 856, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 856], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #42: GFLOPs: 343.5964. Time: 877736.8163 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #43: GFLOPs: 3020.8496. Time: 99835.2353 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #44: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(2, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(321, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 64, 1, 16):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused * 321 + i_2_j_2_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 1024 + j_3_init * 16 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(3584):
                        for ax0_ax1_fused_0 in range(8):
                            for ax0_ax1_fused_1 in T.thread_binding(321, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 642 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 8)
                                        v1 = T.axis.spatial(28672, k_0 * 8 + (ax0_ax1_fused_0 * 642 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 8)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(7):
                            for ax0_ax1_fused_1 in T.thread_binding(321, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 8 + (ax0_ax1_fused_0 * 1284 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 1284 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 1024)
                                        T.where((ax0_ax1_fused_0 * 321 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 8192)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 64, 8, 1, 16):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused * 321 + i_2_j_2_fused + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 1024 + j_3 * 16 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 8 + k_1 * 8 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 1024):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused * 321 + i_2_j_2_fused + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 1024 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 2, 321, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 1, 1, 64, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[3584, 1, 8])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 321, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 321, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #45: GFLOPs: 9206.4317. Time: 32758.3197 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #46: GFLOPs: 10289.9605. Time: 29308.8818 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #47: GFLOPs: 8301.8271. Time: 36327.8147 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #48: GFLOPs: 134.8308. Time: 2236783.2030 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #49: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(128, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(214, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 32, 3, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 64 * 321 + i_2_j_2_fused // 2 * 3 + i_3_init * 3 + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 64 * 64 + i_2_j_2_fused % 2 * 32 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(14336):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(214, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(28672, k_0 * 2 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 1284)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(10):
                            for ax0_ax1_fused_1 in T.thread_binding(214, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 2 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4096)
                                        T.where((ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 8192)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 32, 1, 3, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 64 * 321 + i_2_j_2_fused // 2 * 3 + i_3 * 3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 64 * 64 + i_2_j_2_fused % 2 * 32 + j_3 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(3, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 64 * 321 + i_2_j_2_fused // 2 * 3 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 64 * 64 + i_2_j_2_fused % 2 * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 2, 107, 1, 3])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 64, 2, 32, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[14336, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 214, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 214, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #50: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(4, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(256, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(107, 1, 3, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + i_3_init * 3 + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 8 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(7168):
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(28672, k_0 * 4 + (ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 2568)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(64):
                            for ax0_ax1_fused_1 in T.thread_binding(256, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(28672, k_0 * 4 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1) // 4096)
                                    v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + (ax0_ax1_fused_0 * 256 + ax0_ax1_fused_1) % 4096)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 107, 1, 1, 3, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + i_3 * 3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 8 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 4 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(321, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 2, 1, 107, 3])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 2, 256, 1, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[7168, 4, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 256, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 256], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #51: GFLOPs: 5531.1602. Time: 54525.1310 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #52: GFLOPs: 15423.7641. Time: 19553.4133 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #53: GFLOPs: 5225.2964. Time: 57716.7713 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #54: GFLOPs: 11998.4406. Time: 25135.5360 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #55: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(8, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(856, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 4, 6, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_2_j_2_fused // 8 * 6 + i_3_init * 6 + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 256 + i_2_j_2_fused % 8 * 32 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(3584):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(856, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1) // 8)
                                    v1 = T.axis.spatial(28672, k_0 * 8 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1) % 8)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(856, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 8 + (ax0_ax1_fused_0 * 6848 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 2048)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 2048 + (ax0_ax1_fused_0 * 6848 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 2048)
                                        T.where((ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 16384)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(8, 1, 4, 1, 6, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_2_j_2_fused // 8 * 6 + i_3 * 6 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 256 + i_2_j_2_fused % 8 * 32 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 8 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(6, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_2_j_2_fused // 8 * 6 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 256 + i_2_j_2_fused % 8 * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 107, 1, 6])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 8, 8, 4, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[3584, 8, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 856], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 856, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #56: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(16, thread="blockIdx.x"):
            for i_1_j_1_fused in T.thread_binding(96, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(107, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 4, 1, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 16 * 107 + i_2_j_2_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused % 16 * 32 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(7168):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(28672, k_0 * 4 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(10):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 4 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 512)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 512 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 512)
                                        T.where((ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 2048)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 4, 4, 1, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 16 * 107 + i_2_j_2_fused + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused % 16 * 32 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 4 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 16 * 107 + i_2_j_2_fused + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused % 16 * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 6, 107, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[16, 16, 1, 4, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[7168, 1, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=0)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 107, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 107, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #57: GFLOPs: 233.4693. Time: 1291764.2413 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #58: GFLOPs: 3593.0781. Time: 83935.6180 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #59: GFLOPs: 10491.6084. Time: 28745.5673 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #60: GFLOPs: 297.9325. Time: 1012266.8457 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #61: GFLOPs: 238.8690. Time: 1262563.3950 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #62: GFLOPs: 1018.4539. Time: 296122.6193 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #63: GFLOPs: 10426.1581. Time: 28926.0177 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #64: GFLOPs: 28047.4328. Time: 10752.7572 us. Best GFLOPs: 44745.1250
2025-10-02 00:03:09 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-02 00:03:09 [INFO] [evolutionary_search.cc:715] Picked top 51 candidate(s) from database
2025-10-02 00:03:11 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x15250c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x152c5bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x152f0548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x152a7468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x151fafc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x152f0678)]: 447 failure(s)
2025-10-02 00:03:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x15250c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x152c5bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x152f0548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x152a7468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x151fafc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x152f0678)]: 902 failure(s)
2025-10-02 00:03:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x15250c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x152c5bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x152f0548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x152a7468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x151fafc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x152f0678)]: 1353 failure(s)
2025-10-02 00:03:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x15250c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x152c5bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x152f0548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x152a7468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x151fafc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x152f0678)]: 1799 failure(s)
2025-10-02 00:03:15 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x15250c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x152c5bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x152f0548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x152a7468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x151fafc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x152f0678)]: 2247 failure(s)
2025-10-02 00:03:15 [INFO] [evolutionary_search.cc:723] Sampled 58 candidate(s)
2025-10-02 00:03:17 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x15250c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x152c5bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x152f0548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x152a7468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x151fafc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x152f0678)]: 112 failure(s)
2025-10-02 00:03:19 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x15250c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x152c5bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x152f0548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x152a7468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x151fafc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x152f0678)]: 69 failure(s)
2025-10-02 00:03:21 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x15250c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x152c5bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x152f0548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x152a7468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x151fafc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x152f0678)]: 89 failure(s)
2025-10-02 00:03:23 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x15250c78)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x152c5bf8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x152f0548)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x152a7468)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x151fafc8)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x152f0678)]: 87 failure(s)
2025-10-02 00:03:23 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9995  0.9989  0.9986  0.9981  0.9977  0.9973  0.9973  0.9957  0.9954  0.9950  0.9946  0.9938  0.9935  0.9932  0.9930  0.9928
[17 : 32]:	0.9914  0.9908  0.9900  0.9896  0.9893  0.9890  0.9889  0.9886  0.9875  0.9871  0.9867  0.9857  0.9845  0.9841  0.9839  0.9831
[33 : 48]:	0.9811  0.9810  0.9809  0.9807  0.9803  0.9800  0.9798  0.9788  0.9788  0.9783  0.9774  0.9767  0.9762  0.9757  0.9722  0.9714
[49 : 64]:	0.9706  0.9688  0.9685  0.9683  0.9673  0.9668  0.9649  0.9648  0.9648  0.9645  0.9640  0.9637  0.9636  0.9633  0.9629  0.9625
2025-10-02 00:03:23 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-02 00:03:23 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #65: GFLOPs: 44877.5742. Time: 6720.2214 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #66: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(32, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(107, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(3, 32, 2, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_2_j_2_fused * 6 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 64 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(42):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) // 7)
                                    v1 = T.axis.spatial(28672, k_0 * 7 + (ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) % 7)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(34):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 7 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2048)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 2048 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2048)
                                        T.where((ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 14336)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(7, 3, 32, 1, 2, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_2_j_2_fused * 6 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 64 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 7 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(6, 64):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_2_j_2_fused * 6 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 64 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 107, 3, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 32, 1, 32, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 7, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 107], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 107, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #67: GFLOPs: 1937.8476. Time: 155630.0047 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #68: GFLOPs: 4525.6485. Time: 66639.5617 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #69: GFLOPs: 235.3362. Time: 1281516.3573 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #70: GFLOPs: 2177.6021. Time: 138495.1070 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #71: GFLOPs: 366.2954. Time: 823344.2380 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #72: GFLOPs: 6866.3224. Time: 43922.6733 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #73: GFLOPs: 12522.8679. Time: 24082.9208 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #74: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(214, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(384, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 1, 1, 16):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 6 + i_2_j_2_fused // 128 * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused % 128 * 16 + j_3_init * 16 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(7168):
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(384, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 768 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(28672, k_0 * 4 + (ax0_ax1_fused_0 * 768 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 2568)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(22):
                            for ax0_ax1_fused_1 in T.thread_binding(384, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 4 + (ax0_ax1_fused_0 * 768 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + (ax0_ax1_fused_0 * 768 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4096)
                                        T.where((ax0_ax1_fused_0 * 384 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 16384)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 1, 4, 1, 16):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 6 + i_2_j_2_fused // 128 * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused % 128 * 16 + j_3 * 16 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 4 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 2 * 6 + i_2_j_2_fused // 128 * 2 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused % 128 * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 107, 3, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 2, 128, 1, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[7168, 1, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 384, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 384, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #75: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(24, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(256, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(107, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 1, 1, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused // 8 * 214 + i_2_j_2_fused * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused % 8 * 1024 + i_1_j_1_fused * 4 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(14336):
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, i_0_j_0_fused // 8 * 214 + (ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) // 2)
                                    v1 = T.axis.spatial(28672, k_0 * 2 + (ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) % 2)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(5):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 2 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused % 8 * 1024 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 1024)
                                        T.where((ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 2048)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 2, 1, 1, 1, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused // 8 * 214 + i_2_j_2_fused * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused % 8 * 1024 + i_1_j_1_fused * 4 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 2 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused // 8 * 214 + i_2_j_2_fused * 2 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused % 8 * 1024 + i_1_j_1_fused * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[3, 1, 107, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 256, 1, 1, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[14336, 2, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 107], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 107, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #76: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(16, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 64, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(64, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(107, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(6, 4, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_2_j_2_fused * 6 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused * 8 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(7168):
                        for ax0_ax1_fused_0 in range(12):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(28672, k_0 * 4 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 4)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(5):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 4 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 512)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 512 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 512)
                                        T.where((ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 2048)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 6, 4, 1, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_2_j_2_fused * 6 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused * 8 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 4 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(6, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_2_j_2_fused * 6 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 512 + i_1_j_1_fused * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 107, 6, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[16, 64, 1, 4, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[7168, 4, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=2)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 107, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 107, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=64)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #77: GFLOPs: 5330.4062. Time: 56578.6590 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #78: GFLOPs: 912.6818. Time: 330440.7347 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #79: GFLOPs: 8227.4763. Time: 36656.1050 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #80: GFLOPs: 8707.7541. Time: 34634.3307 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #81: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(24, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(856, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 32, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 4 * 107 + i_2_j_2_fused // 8 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused % 4 * 256 + i_2_j_2_fused % 8 * 32 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(28672):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(856, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1)
                                    v1 = T.axis.spatial(28672, k_0)
                                    T.where(ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 < 642)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(856, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 3424 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2))
                                        T.where((ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 1024)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 32, 1, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 4 * 107 + i_2_j_2_fused // 8 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused % 4 * 256 + i_2_j_2_fused % 8 * 32 + j_3 + j_4)
                                v_k = T.axis.reduce(28672, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 4 * 107 + i_2_j_2_fused // 8 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused % 4 * 256 + i_2_j_2_fused % 8 * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 6, 107, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 4, 8, 32, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[28672, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 856], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 856, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #82: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(24, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(256, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(107, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(2, 1, 1, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused // 8 * 214 + i_2_j_2_fused * 2 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused % 8 * 1024 + i_1_j_1_fused * 4 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(14336):
                        for ax0_ax1_fused_0 in range(1):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, i_0_j_0_fused // 8 * 214 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(28672, k_0 * 2 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(10):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 2 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused % 8 * 1024 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 1024)
                                        T.where((ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 2048)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 2, 1, 2, 1, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused // 8 * 214 + i_2_j_2_fused * 2 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused % 8 * 1024 + i_1_j_1_fused * 4 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused // 8 * 214 + i_2_j_2_fused * 2 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused % 8 * 1024 + i_1_j_1_fused * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[3, 1, 107, 2, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 256, 1, 1, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[14336, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 107, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 107, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #83: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(192, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(107, 16, 2, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_2_j_2_fused // 64 * 214 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(8192, i_2_j_2_fused % 64 * 128 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(14336):
                        for ax0_ax1_fused_0 in range(7):
                            for ax0_ax1_fused_1 in T.thread_binding(192, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1) // 2)
                                    v1 = T.axis.spatial(28672, k_0 * 2 + (ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1) % 2)
                                    T.where(ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1 < 1284)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(22):
                            for ax0_ax1_fused_1 in T.thread_binding(192, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 2 + (ax0_ax1_fused_0 * 768 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 8192)
                                        v1 = T.axis.spatial(8192, (ax0_ax1_fused_0 * 768 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 8192)
                                        T.where((ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 16384)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 107, 16, 2, 2, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_2_j_2_fused // 64 * 214 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(8192, i_2_j_2_fused % 64 * 128 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(214, 128):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_2_j_2_fused // 64 * 214 + ax0)
                            v1 = T.axis.spatial(8192, i_2_j_2_fused % 64 * 128 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 3, 107, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 1, 64, 16, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[14336, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 192], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 192, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #84: GFLOPs: 9276.0730. Time: 32512.3825 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #85: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(4, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(32, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(428, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(3, 8, 2, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_2_j_2_fused // 4 * 6 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 64 + i_2_j_2_fused % 4 * 16 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(11):
                            for ax0_ax1_fused_1 in T.thread_binding(428, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1) // 7)
                                    v1 = T.axis.spatial(28672, k_0 * 7 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1) % 7)
                                    T.where(ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 < 4494)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(9):
                            for ax0_ax1_fused_1 in T.thread_binding(428, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 7 + (ax0_ax1_fused_0 * 1712 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2048)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 2048 + (ax0_ax1_fused_0 * 1712 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2048)
                                        T.where((ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 14336)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(7, 3, 8, 1, 2, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_2_j_2_fused // 4 * 6 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 64 + i_2_j_2_fused % 4 * 16 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 7 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(6, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_2_j_2_fused // 4 * 6 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 2048 + i_1_j_1_fused * 64 + i_2_j_2_fused % 4 * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 107, 3, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 32, 4, 8, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 7, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 428], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 428, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #86: GFLOPs: 3735.7743. Time: 80729.5123 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #87: GFLOPs: 5925.0061. Time: 50900.7463 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #88: GFLOPs: 8910.1465. Time: 33847.6180 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #89: Error in building:
LocalBuilder: Timeout, killed after 30.0 seconds
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(24, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(256, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(107, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 1, 2, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused // 8 * 214 + i_2_j_2_fused * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused % 8 * 1024 + i_1_j_1_fused * 4 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(14336):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, i_0_j_0_fused // 8 * 214 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(28672, k_0 * 2 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 2)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(5):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 2 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused % 8 * 1024 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 1024)
                                        T.where((ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 2048)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 1, 2, 2, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused // 8 * 214 + i_2_j_2_fused * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused % 8 * 1024 + i_1_j_1_fused * 4 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 4):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused // 8 * 214 + i_2_j_2_fused * 2 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused % 8 * 1024 + i_1_j_1_fused * 4 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[3, 1, 107, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 256, 1, 1, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[14336, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 107, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 107, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #90: GFLOPs: 2438.7792. Time: 123663.1977 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #91: GFLOPs: 777.7287. Time: 387779.5000 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #92: GFLOPs: 260.0149. Time: 1159884.2773 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #93: GFLOPs: 312.7879. Time: 964190.7550 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #94: GFLOPs: 186.9461. Time: 1613230.9570 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #95: GFLOPs: 12604.9635. Time: 23926.0696 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #96: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(8, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(214, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(3, 8, 2, 64):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_2_j_2_fused // 2 * 6 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(8192, i_1_j_1_fused * 1024 + i_2_j_2_fused % 2 * 512 + j_3_init * 64 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(14336):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(214, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 2)
                                        v1 = T.axis.spatial(28672, k_0 * 2 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 2)
                                        T.where((ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 1284)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(77):
                            for ax0_ax1_fused_1 in T.thread_binding(214, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(28672, k_0 * 2 + (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1) // 8192)
                                    v1 = T.axis.spatial(8192, (ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1) % 8192)
                                    T.where(ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1 < 16384)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 3, 8, 2, 2, 64):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_2_j_2_fused // 2 * 6 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(8192, i_1_j_1_fused * 1024 + i_2_j_2_fused % 2 * 512 + j_3 * 64 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(6, 512):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_2_j_2_fused // 2 * 6 + ax0)
                            v1 = T.axis.spatial(8192, i_1_j_1_fused * 1024 + i_2_j_2_fused % 2 * 512 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 107, 3, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 8, 2, 8, 64])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[14336, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 214, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68 = sch.split(loop=l66, factors=[None, 214], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79, l80 = sch.get_loops(block=b70)
l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #97: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(2, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(96, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(107, 2, 1, 16):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_2_j_2_fused // 16 * 107 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused * 512 + i_2_j_2_fused % 16 * 32 + j_3_init * 16 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(28672):
                        for ax0_ax1_fused_0 in range(7):
                            for ax0_ax1_fused_1 in T.thread_binding(96, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, ax0_ax1_fused_0 * 96 + ax0_ax1_fused_1)
                                    v1 = T.axis.spatial(28672, k_0)
                                    T.where(ax0_ax1_fused_0 * 96 + ax0_ax1_fused_1 < 642)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(96, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 768 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2))
                                        T.where((ax0_ax1_fused_0 * 96 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 1024)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 107, 2, 1, 1, 16):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_2_j_2_fused // 16 * 107 + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused * 512 + i_2_j_2_fused % 16 * 32 + j_3 * 16 + j_4)
                                v_k = T.axis.reduce(28672, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(107, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_2_j_2_fused // 16 * 107 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused * 512 + i_2_j_2_fused % 16 * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 6, 107, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 2, 16, 2, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[28672, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 96], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 96, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #98: GFLOPs: 5437.4880. Time: 55464.4417 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #99: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(4, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(107, 1, 3, 16):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + i_3_init * 3 + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 16 + j_3_init * 16 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(7168):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(28672, k_0 * 4 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 2568)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(32):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 4 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 4096)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 4096)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 107, 1, 1, 3, 16):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + i_3 * 3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 16 + j_3 * 16 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 4 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(321, 16):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 4096 + i_1_j_1_fused % 2 * 2048 + i_2_j_2_fused * 16 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 2, 1, 107, 3])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 2, 128, 1, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[7168, 4, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 128, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 128, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #100: GFLOPs: 15592.6041. Time: 19341.6848 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #101: GFLOPs: 1003.6457. Time: 300491.7193 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #102: GFLOPs: 1706.2827. Time: 176751.0373 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #103: GFLOPs: 14431.0428. Time: 20898.5060 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #104: GFLOPs: 20595.6512. Time: 14643.2483 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #105: GFLOPs: 5470.6841. Time: 55127.8837 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #106: GFLOPs: 531.6509. Time: 567265.5027 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #107: GFLOPs: 2203.7118. Time: 136854.2073 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #108: GFLOPs: 39535.9284. Time: 7628.1814 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #109: GFLOPs: 298.0606. Time: 1011831.9497 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #110: GFLOPs: 8277.7963. Time: 36433.2757 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #111: GFLOPs: 5011.1289. Time: 60183.4920 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #112: GFLOPs: 3788.5376. Time: 79605.1837 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #113: GFLOPs: 9901.4486. Time: 30458.9002 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #114: GFLOPs: 2083.2605. Time: 144766.9370 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #115: GFLOPs: 40850.1827. Time: 7382.7634 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #116: GFLOPs: 198.6171. Time: 1518435.7093 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #117: GFLOPs: 26548.0399. Time: 11360.0566 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #118: GFLOPs: 1192.5620. Time: 252890.1977 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #119: GFLOPs: 41890.6247. Time: 7199.3969 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #120: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(64, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(12, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(107, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 32, 1, 2):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused // 32 * 321 + i_1_j_1_fused // 4 * 107 + i_2_j_2_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused % 32 * 256 + i_1_j_1_fused % 4 * 64 + j_3_init * 2 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(2048):
                        for ax0_ax1_fused_0 in range(42):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, i_0_j_0_fused // 32 * 321 + (ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) // 14)
                                    v1 = T.axis.spatial(28672, k_0 * 14 + (ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) % 14)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(9):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(4):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 14 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) // 256)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused % 32 * 256 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 4 + ax0_ax1_fused_2) % 256)
                                        T.where((ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) * 4 + ax0_ax1_fused_2 < 3584)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(14, 1, 32, 1, 1, 2):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused // 32 * 321 + i_1_j_1_fused // 4 * 107 + i_2_j_2_fused + i_3 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused % 32 * 256 + i_1_j_1_fused % 4 * 64 + j_3 * 2 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 14 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 64):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused // 32 * 321 + i_1_j_1_fused // 4 * 107 + i_2_j_2_fused + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused % 32 * 256 + i_1_j_1_fused % 4 * 64 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[2, 3, 107, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[32, 4, 1, 32, 2])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[2048, 14, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 107], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 107, 4], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #121: GFLOPs: 41936.8281. Time: 7191.4651 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #122: GFLOPs: 12694.7503. Time: 23756.8466 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #123: GFLOPs: 14735.9311. Time: 20466.1132 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #124: GFLOPs: 7138.4288. Time: 42248.4053 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #125: GFLOPs: 256.4733. Time: 1175901.0417 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #126: GFLOPs: 427.9538. Time: 704719.1567 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #127: GFLOPs: 8173.0578. Time: 36900.1717 us. Best GFLOPs: 44877.5742
2025-10-02 00:18:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #128: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 28672), "float16"), B: T.Buffer((28672, 8192), "float16"), C: T.Buffer((642, 8192), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 8192), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 28672), "float16", scope="shared")
        B_shared = T.alloc_buffer((28672, 8192), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(1024, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(107, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(3, 1, 2, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_2_j_2_fused * 6 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(14336):
                        for ax0_ax1_fused_0 in range(12):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) // 2)
                                    v1 = T.axis.spatial(28672, k_0 * 2 + (ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) % 2)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(3):
                            for ax0_ax1_fused_1 in T.thread_binding(107, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(28672, k_0 * 2 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 1024)
                                        v1 = T.axis.spatial(8192, i_0_j_0_fused * 1024 + (ax0_ax1_fused_0 * 856 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 1024)
                                        T.where((ax0_ax1_fused_0 * 107 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 2048)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 3, 1, 2, 2, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_2_j_2_fused * 6 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused + j_3 + j_4)
                                v_k = T.axis.reduce(28672, k_0 * 2 + k_1 * 2 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(6, 1):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_2_j_2_fused * 6 + ax0)
                            v1 = T.axis.spatial(8192, i_0_j_0_fused * 1024 + i_1_j_1_fused + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 1, 107, 3, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 1024, 1, 1, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[14336, 1, 2])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 107], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 107, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
