2025-10-02 00:19:11 [INFO] [task_scheduler.cc:160] Initializing Task #0: "mm"
2025-10-02 00:19:11 [INFO] [task_scheduler.cc:35] 
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((642, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        for i, j, k in T.grid(642, 14336, 4096):
            with T.block("C"):
                v_i, v_j, v_k = T.axis.remap("SSR", [i, j, k])
                T.reads(A[v_i, v_k], B[v_k, v_j])
                T.writes(C[v_i, v_j])
                with T.init():
                    C[v_i, v_j] = T.float16(0.0)
                C[v_i, v_j] = C[v_i, v_j] + A[v_i, v_k] * B[v_k, v_j]
2025-10-02 00:19:11 [INFO] [task_scheduler.cc:164] Total 1 design space(s) generated
2025-10-02 00:19:11 [INFO] [task_scheduler.cc:170] Design space #0:
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((642, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        with T.block("root"):
            T.reads()
            T.writes()
            T.block_attr({"meta_schedule.unroll_explicit": 1024})
            C_local = T.alloc_buffer((642, 14336), "float16", scope="local")
            A_shared = T.alloc_buffer((642, 4096), "float16", scope="shared")
            B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
            for i_0_j_0_fused in T.thread_binding(672, thread="blockIdx.x"):
                for i_1_j_1_fused in T.thread_binding(8, thread="vthread.x"):
                    for i_2_j_2_fused in T.thread_binding(856, thread="threadIdx.x"):
                        for k_0 in range(1024):
                            for ax0_ax1_fused in range(856):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, i_0_j_0_fused // 224 * 214 + ax0_ax1_fused // 4)
                                    v1 = T.axis.spatial(4096, k_0 * 4 + ax0_ax1_fused % 4)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 1})
                                    A_shared[v0, v1] = A[v0, v1]
                            for ax0_ax1_fused in range(256):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(4096, k_0 * 4 + ax0_ax1_fused // 64)
                                    v1 = T.axis.spatial(14336, i_0_j_0_fused % 224 * 64 + ax0_ax1_fused % 64)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    T.block_attr({"meta_schedule.cooperative_fetch": 2})
                                    B_shared[v0, v1] = B[v0, v1]
                            for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 1, 1, 1, 2, 1):
                                with T.block("C"):
                                    v_i = T.axis.spatial(642, i_0_j_0_fused // 224 * 214 + i_2_j_2_fused // 8 * 2 + i_3 * 2 + i_4)
                                    v_j = T.axis.spatial(14336, i_0_j_0_fused % 224 * 64 + i_1_j_1_fused * 8 + i_2_j_2_fused % 8 + j_3 + j_4)
                                    v_k = T.axis.reduce(4096, k_0 * 4 + k_1 + k_2)
                                    T.reads(A_shared[v_i, v_k], B_shared[v_k, v_j])
                                    T.writes(C_local[v_i, v_j])
                                    T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                    with T.init():
                                        C_local[v_i, v_j] = T.float16(0.0)
                                    C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                        for ax0, ax1 in T.grid(2, 1):
                            with T.block("C_local"):
                                v0 = T.axis.spatial(642, i_0_j_0_fused // 224 * 214 + i_2_j_2_fused // 8 * 2 + ax0)
                                v1 = T.axis.spatial(14336, i_0_j_0_fused % 224 * 64 + i_1_j_1_fused * 8 + i_2_j_2_fused % 8 + ax1)
                                T.reads(C_local[v0, v1])
                                T.writes(C[v0, v1])
                                C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[3, 1, 107, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[224, 8, 8, 1, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 4, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
2025-10-02 00:19:11 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-02 00:19:11 [INFO] [evolutionary_search.cc:715] Picked top 0 candidate(s) from database
2025-10-02 00:19:12 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x362510e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x362d59e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x362d59b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36101718)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3600b138)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x362c24a8)]: 498 failure(s)
2025-10-02 00:19:13 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x362510e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x362d59e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x362d59b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36101718)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3600b138)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x362c24a8)]: 992 failure(s)
2025-10-02 00:19:14 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x362510e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x362d59e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x362d59b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36101718)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3600b138)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x362c24a8)]: 1489 failure(s)
2025-10-02 00:19:16 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x362510e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x362d59e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x362d59b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36101718)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3600b138)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x362c24a8)]: 1984 failure(s)
2025-10-02 00:19:16 [INFO] [evolutionary_search.cc:723] Sampled 64 candidate(s)
2025-10-02 00:19:18 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x362510e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x362d59e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x362d59b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36101718)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3600b138)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x362c24a8)]: 110 failure(s)
2025-10-02 00:19:21 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x362510e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x362d59e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x362d59b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36101718)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3600b138)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x362c24a8)]: 105 failure(s)
2025-10-02 00:19:23 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x362510e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x362d59e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x362d59b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36101718)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3600b138)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x362c24a8)]: 112 failure(s)
2025-10-02 00:19:25 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x362510e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x362d59e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x362d59b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36101718)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3600b138)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x362c24a8)]: 100 failure(s)
2025-10-02 00:19:25 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9994  0.9993  0.9990  0.9985  0.9977  0.9976  0.9972  0.9955  0.9947  0.9931  0.9922  0.9905  0.9904  0.9894  0.9891  0.9881
[17 : 32]:	0.9876  0.9875  0.9872  0.9862  0.9850  0.9850  0.9842  0.9838  0.9833  0.9824  0.9823  0.9815  0.9813  0.9813  0.9812  0.9792
[33 : 48]:	0.9790  0.9760  0.9758  0.9758  0.9756  0.9747  0.9745  0.9739  0.9739  0.9720  0.9719  0.9719  0.9714  0.9711  0.9685  0.9685
[49 : 64]:	0.9678  0.9677  0.9670  0.9651  0.9645  0.9642  0.9641  0.9622  0.9611  0.9596  0.9581  0.9578  0.9561  0.9555  0.9535  0.9535
2025-10-02 00:19:25 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-02 00:19:25 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-02 00:28:15 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #1: GFLOPs: 26251.3914. Time: 2872.1071 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:15 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #2: GFLOPs: 7340.5144. Time: 10271.3249 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:15 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #3: GFLOPs: 729.0255. Time: 103421.3663 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:15 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #4: GFLOPs: 734.8172. Time: 102606.2113 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:15 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #5: GFLOPs: 106.4748. Time: 708118.9777 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:15 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #6: GFLOPs: 323.4894. Time: 233073.5270 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:15 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #7: GFLOPs: 58.8619. Time: 1280910.9700 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:15 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #8: GFLOPs: 13538.4905. Time: 5569.0706 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:15 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #9: GFLOPs: 23712.7777. Time: 3179.5857 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:15 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #10: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((642, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(12, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(107, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 56, 2, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused // 4 * 214 + i_1_j_1_fused * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused % 4 * 3584 + i_2_j_2_fused * 56 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, i_0_j_0_fused // 4 * 214 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 4)
                                        v1 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 4)
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 8 + ax0_ax1_fused_2 < 856)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(28):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) // 3584)
                                        v1 = T.axis.spatial(14336, i_0_j_0_fused % 4 * 3584 + (ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2) % 3584)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(4, 1, 56, 1, 2, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused // 4 * 214 + i_1_j_1_fused * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused % 4 * 3584 + i_2_j_2_fused * 56 + j_3 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 4 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 56):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused // 4 * 214 + i_1_j_1_fused * 2 + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused % 4 * 3584 + i_2_j_2_fused * 56 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[3, 107, 1, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 1, 64, 56, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 4, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #11: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((642, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(24, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(107, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 56, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused // 4 * 107 + i_1_j_1_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused % 4 * 3584 + i_2_j_2_fused * 56 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(1024):
                        for ax0_ax1_fused_0 in range(7):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, i_0_j_0_fused // 4 * 107 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) // 4)
                                    v1 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) % 4)
                                    T.where(ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1 < 428)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(112):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0 * 4 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) // 3584)
                                        v1 = T.axis.spatial(14336, i_0_j_0_fused % 4 * 3584 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2) % 3584)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 56, 4, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused // 4 * 107 + i_1_j_1_fused + i_3 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused % 4 * 3584 + i_2_j_2_fused * 56 + j_3 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 4 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 56):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused // 4 * 107 + i_1_j_1_fused + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused % 4 * 3584 + i_2_j_2_fused * 56 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[6, 107, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[4, 1, 64, 56, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[1024, 1, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 64, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #12: GFLOPs: 292.5563. Time: 257717.2850 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #13: GFLOPs: 1233.8825. Time: 61105.3413 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #14: GFLOPs: 383.1806. Time: 196765.7267 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #15: GFLOPs: 620.2798. Time: 121552.8970 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #16: GFLOPs: 31.4413. Time: 2398017.7407 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #17: GFLOPs: 54.2079. Time: 1390882.9750 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #18: GFLOPs: 5937.7720. Time: 12697.8283 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #19: GFLOPs: 440.1218. Time: 171308.9800 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #20: GFLOPs: 238.4467. Time: 316199.8493 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #21: GFLOPs: 395.0191. Time: 190868.7540 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #22: GFLOPs: 1773.1308. Time: 42521.8530 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #23: GFLOPs: 53.6348. Time: 1405743.9777 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #24: GFLOPs: 353.0426. Time: 213562.9473 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #25: GFLOPs: 31.8462. Time: 2367532.2263 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #26: GFLOPs: 14433.2600. Time: 5223.8239 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #27: GFLOPs: 8653.2604. Time: 8713.1099 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #28: GFLOPs: 60.0623. Time: 1255310.1397 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #29: GFLOPs: 64.6838. Time: 1165620.9307 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #30: GFLOPs: 23095.9569. Time: 3264.5025 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #31: GFLOPs: 5593.1894. Time: 13480.1101 us. Best GFLOPs: 26251.3914
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #32: GFLOPs: 27880.0921. Time: 2704.3242 us. Best GFLOPs: 27880.0921
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #33: GFLOPs: 32.6489. Time: 2309319.3357 us. Best GFLOPs: 27880.0921
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #34: GFLOPs: 2261.4812. Time: 33339.5690 us. Best GFLOPs: 27880.0921
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #35: GFLOPs: 13160.2579. Time: 5729.1285 us. Best GFLOPs: 27880.0921
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #36: GFLOPs: 385.4644. Time: 195599.9143 us. Best GFLOPs: 27880.0921
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #37: GFLOPs: 643.7031. Time: 117129.7910 us. Best GFLOPs: 27880.0921
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #38: GFLOPs: 5823.6665. Time: 12946.6219 us. Best GFLOPs: 27880.0921
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #39: GFLOPs: 440.6715. Time: 171095.2757 us. Best GFLOPs: 27880.0921
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #40: GFLOPs: 17672.9597. Time: 4266.2242 us. Best GFLOPs: 27880.0921
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #41: GFLOPs: 73.7909. Time: 1021762.3697 us. Best GFLOPs: 27880.0921
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #42: GFLOPs: 6304.5892. Time: 11959.0360 us. Best GFLOPs: 27880.0921
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #43: GFLOPs: 5474.4286. Time: 13772.5439 us. Best GFLOPs: 27880.0921
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #44: GFLOPs: 25266.6886. Time: 2984.0400 us. Best GFLOPs: 27880.0921
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #45: GFLOPs: 31.3860. Time: 2402243.0010 us. Best GFLOPs: 27880.0921
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #46: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((642, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(2, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 512, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(48, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(214, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 28, 2, 8):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 16 * 214 + i_2_j_2_fused // 2 * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 7168 + i_1_j_1_fused % 16 * 448 + i_2_j_2_fused % 2 * 224 + j_3_init * 8 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(214, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2)
                                        v1 = T.axis.spatial(4096, k_0)
                                        T.where((ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 642)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(17):
                            for ax0_ax1_fused_1 in T.thread_binding(214, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0)
                                        v1 = T.axis.spatial(14336, i_0_j_0_fused * 7168 + (ax0_ax1_fused_0 * 428 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2))
                                        T.where((ax0_ax1_fused_0 * 214 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 7168)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 28, 1, 2, 8):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 16 * 214 + i_2_j_2_fused // 2 * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 7168 + i_1_j_1_fused % 16 * 448 + i_2_j_2_fused % 2 * 224 + j_3 * 8 + j_4)
                                v_k = T.axis.reduce(4096, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 224):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 16 * 214 + i_2_j_2_fused // 2 * 2 + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 7168 + i_1_j_1_fused % 16 * 448 + i_2_j_2_fused % 2 * 224 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 3, 107, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[2, 16, 2, 28, 8])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=3)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 214, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 214, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=512)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #47: GFLOPs: 1422.0079. Time: 53021.3723 us. Best GFLOPs: 27880.0921
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #48: GFLOPs: 41579.5512. Time: 1813.3146 us. Best GFLOPs: 41579.5512
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #49: GFLOPs: 8913.3625. Time: 8458.8514 us. Best GFLOPs: 41579.5512
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #50: GFLOPs: 769.9149. Time: 97928.7617 us. Best GFLOPs: 41579.5512
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #51: GFLOPs: 1127.8410. Time: 66850.5653 us. Best GFLOPs: 41579.5512
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #52: GFLOPs: 25277.4396. Time: 2982.7708 us. Best GFLOPs: 41579.5512
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #53: GFLOPs: 10485.5999. Time: 7190.5098 us. Best GFLOPs: 41579.5512
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #54: GFLOPs: 33124.8739. Time: 2276.1387 us. Best GFLOPs: 41579.5512
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #55: GFLOPs: 406.6445. Time: 185412.1093 us. Best GFLOPs: 41579.5512
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #56: GFLOPs: 10530.6022. Time: 7159.7813 us. Best GFLOPs: 41579.5512
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #57: GFLOPs: 105.8624. Time: 712215.2503 us. Best GFLOPs: 41579.5512
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #58: GFLOPs: 964.2622. Time: 78191.1923 us. Best GFLOPs: 41579.5512
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #59: GFLOPs: 106.1779. Time: 710098.7953 us. Best GFLOPs: 41579.5512
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #60: GFLOPs: 465.0460. Time: 162127.6347 us. Best GFLOPs: 41579.5512
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #61: GFLOPs: 229.7572. Time: 328158.6913 us. Best GFLOPs: 41579.5512
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #62: GFLOPs: 64.7818. Time: 1163857.8287 us. Best GFLOPs: 41579.5512
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #63: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((642, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(8, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(214, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(192, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 28, 1, 1):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 6 + i_2_j_2_fused // 32 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 1792 + i_1_j_1_fused % 2 * 896 + i_2_j_2_fused % 32 * 28 + j_3_init + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(512):
                        for ax0_ax1_fused_0 in range(27):
                            for ax0_ax1_fused_1 in T.thread_binding(192, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, (ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1) // 8)
                                    v1 = T.axis.spatial(4096, k_0 * 8 + (ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1) % 8)
                                    T.where(ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1 < 5136)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(75):
                            for ax0_ax1_fused_1 in T.thread_binding(192, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(4096, k_0 * 8 + (ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1) // 1792)
                                    v1 = T.axis.spatial(14336, i_0_j_0_fused * 1792 + (ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1) % 1792)
                                    T.where(ax0_ax1_fused_0 * 192 + ax0_ax1_fused_1 < 14336)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(2, 1, 28, 4, 1, 1):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 6 + i_2_j_2_fused // 32 + i_3 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 1792 + i_1_j_1_fused % 2 * 896 + i_2_j_2_fused % 32 * 28 + j_3 + j_4)
                                v_k = T.axis.reduce(4096, k_0 * 8 + k_1 * 4 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 28):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 2 * 6 + i_2_j_2_fused // 32 + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 1792 + i_1_j_1_fused % 2 * 896 + i_2_j_2_fused % 32 * 28 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 107, 6, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[8, 2, 32, 28, 1])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[512, 2, 4])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 192], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 192], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-02 00:28:16 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #64: GFLOPs: 331.2879. Time: 227586.9343 us. Best GFLOPs: 41579.5512
2025-10-02 00:28:16 [INFO] [evolutionary_search.cc:713] Generating candidates......
2025-10-02 00:28:16 [INFO] [evolutionary_search.cc:715] Picked top 60 candidate(s) from database
2025-10-02 00:28:17 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x362510e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x362d59e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x362d59b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36101718)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3600b138)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x362c24a8)]: 439 failure(s)
2025-10-02 00:28:18 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x362510e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x362d59e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x362d59b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36101718)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3600b138)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x362c24a8)]: 877 failure(s)
2025-10-02 00:28:19 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x362510e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x362d59e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x362d59b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36101718)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3600b138)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x362c24a8)]: 1313 failure(s)
2025-10-02 00:28:20 [INFO] [evolutionary_search.cc:533] Sample-Init-Population summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x362510e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x362d59e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x362d59b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36101718)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3600b138)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x362c24a8)]: 1751 failure(s)
2025-10-02 00:28:20 [INFO] [evolutionary_search.cc:723] Sampled 57 candidate(s)
2025-10-02 00:28:22 [INFO] [evolutionary_search.cc:621] Evolve iter #0 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x362510e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x362d59e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x362d59b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36101718)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3600b138)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x362c24a8)]: 111 failure(s)
2025-10-02 00:28:24 [INFO] [evolutionary_search.cc:621] Evolve iter #1 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x362510e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x362d59e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x362d59b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36101718)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3600b138)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x362c24a8)]: 106 failure(s)
2025-10-02 00:28:26 [INFO] [evolutionary_search.cc:621] Evolve iter #2 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x362510e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x362d59e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x362d59b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36101718)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3600b138)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x362c24a8)]: 95 failure(s)
2025-10-02 00:28:28 [INFO] [evolutionary_search.cc:621] Evolve iter #3 done. Summary:
Postproc #0 [meta_schedule.DisallowDynamicLoop(0x362510e8)]: 0 failure(s)
Postproc #1 [meta_schedule.RewriteCooperativeFetch(0x362d59e8)]: 0 failure(s)
Postproc #2 [meta_schedule.RewriteUnboundBlock(0x362d59b8)]: 0 failure(s)
Postproc #3 [meta_schedule.RewriteParallelVectorizeUnroll(0x36101718)]: 0 failure(s)
Postproc #4 [meta_schedule.RewriteReductionBlock(0x3600b138)]: 0 failure(s)
Postproc #5 [meta_schedule.VerifyGPUCode(0x362c24a8)]: 100 failure(s)
2025-10-02 00:28:28 [INFO] [evolutionary_search.cc:649] Scores of the best 64 candidates:
[1 : 16]:	0.9989  0.9968  0.9967  0.9962  0.9961  0.9957  0.9953  0.9942  0.9932  0.9931  0.9926  0.9923  0.9909  0.9903  0.9894  0.9870
[17 : 32]:	0.9862  0.9860  0.9820  0.9804  0.9802  0.9800  0.9800  0.9796  0.9792  0.9783  0.9776  0.9759  0.9754  0.9744  0.9743  0.9723
[33 : 48]:	0.9719  0.9706  0.9701  0.9699  0.9696  0.9682  0.9680  0.9678  0.9676  0.9675  0.9670  0.9662  0.9639  0.9622  0.9618  0.9609
[49 : 64]:	0.9609  0.9603  0.9597  0.9589  0.9587  0.9579  0.9574  0.9561  0.9550  0.9520  0.9520  0.9507  0.9503  0.9497  0.9494  0.9493
2025-10-02 00:28:28 [INFO] [evolutionary_search.cc:727] Got 64 candidate(s) with evolutionary search
2025-10-02 00:28:28 [INFO] [evolutionary_search.cc:730] Sending 64 candidates(s) for measurement
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #65: GFLOPs: 177.1280. Time: 425662.9230 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #66: GFLOPs: 19351.4606. Time: 3896.1818 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #67: GFLOPs: 4022.6409. Time: 18743.1118 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #68: GFLOPs: 24261.0734. Time: 3107.7276 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #69: GFLOPs: 18711.4375. Time: 4029.4504 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #70: GFLOPs: 7051.0556. Time: 10692.9817 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #71: GFLOPs: 22453.1197. Time: 3357.9658 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #72: GFLOPs: 433.4886. Time: 173930.2977 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #73: GFLOPs: 48.8705. Time: 1542788.4113 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #74: GFLOPs: 5525.0176. Time: 13646.4376 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #75: GFLOPs: 19062.1081. Time: 3955.3237 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #76: GFLOPs: 1601.2169. Time: 47087.1937 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #77: GFLOPs: 185.5895. Time: 406255.8593 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #78: GFLOPs: 20636.4270. Time: 3653.5786 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #79: GFLOPs: 2822.6303. Time: 26711.5420 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #80: GFLOPs: 157.7718. Time: 477885.3350 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #81: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((642, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(7, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(321, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 1, 2, 32):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 2048 + i_2_j_2_fused * 32 + j_3_init * 32 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(11):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1)
                                    v1 = T.axis.spatial(4096, k_0)
                                    T.where(ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1 < 642)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0)
                                        v1 = T.axis.spatial(14336, i_0_j_0_fused * 2048 + ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 1, 1, 2, 32):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 2048 + i_2_j_2_fused * 32 + j_3 * 32 + j_4)
                                v_k = T.axis.reduce(4096, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused * 2 + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 2048 + i_2_j_2_fused * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 321, 1, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[7, 1, 64, 1, 32])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 64], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #82: GFLOPs: 27.5166. Time: 2740048.5023 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #83: GFLOPs: 5517.2323. Time: 13665.6941 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #84: GFLOPs: 3855.3819. Time: 19556.2488 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #85: GFLOPs: 60.6710. Time: 1242714.7623 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #86: GFLOPs: 9669.8392. Time: 7797.1109 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #87: GFLOPs: 236.4930. Time: 318812.0523 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #88: GFLOPs: 6869.1228. Time: 10976.1917 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #89: Error in running:
LocalRunner: An exception occurred
Subprocess terminated
# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((642, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(1, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(4, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(321, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 448, 1, 16):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + i_2_j_2_fused + i_3_init + i_4_init)
                            v_j = T.axis.spatial(14336, i_1_j_1_fused % 2 * 7168 + j_3_init * 16 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(321, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, ax0_ax1_fused_0 * 321 + ax0_ax1_fused_1)
                                    v1 = T.axis.spatial(4096, k_0)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(45):
                            for ax0_ax1_fused_1 in T.thread_binding(321, thread="threadIdx.x"):
                                with T.block("B_shared"):
                                    v0 = T.axis.spatial(4096, k_0)
                                    v1 = T.axis.spatial(14336, ax0_ax1_fused_0 * 321 + ax0_ax1_fused_1)
                                    T.where(ax0_ax1_fused_0 * 321 + ax0_ax1_fused_1 < 14336)
                                    T.reads(B[v0, v1])
                                    T.writes(B_shared[v0, v1])
                                    B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 448, 1, 1, 16):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + i_2_j_2_fused + i_3 + i_4)
                                v_j = T.axis.spatial(14336, i_1_j_1_fused % 2 * 7168 + j_3 * 16 + j_4)
                                v_k = T.axis.reduce(4096, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 7168):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused // 2 * 321 + i_2_j_2_fused + ax0)
                            v1 = T.axis.spatial(14336, i_1_j_1_fused % 2 * 7168 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 2, 321, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 2, 1, 448, 16])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=0)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 321], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67 = sch.split(loop=l65, factors=[None, 321], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b68 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b68, ann_key="meta_schedule.unroll_explicit")
b69, b70, b71, b72 = sch.get_child_blocks(b68)
l73, l74, l75, l76, l77, l78 = sch.get_loops(block=b69)
l79, l80, l81, l82, l83, l84 = sch.get_loops(block=b70)
l85, l86, l87, l88, l89, l90, l91, l92, l93, l94 = sch.get_loops(block=b71)
sch.annotate(block_or_loop=l85, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l85, ann_key="pragma_unroll_explicit", ann_val=1)
l95, l96, l97, l98, l99 = sch.get_loops(block=b72)
b100 = sch.get_block(name="C", func_name="main")
l101, l102, l103, l104, l105, l106, l107, l108, l109, l110 = sch.get_loops(block=b100)
b111 = sch.decompose_reduction(block=b100, loop=l104)
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #90: GFLOPs: 33400.8259. Time: 2257.3337 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #91: GFLOPs: 303.1287. Time: 248728.7393 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #92: GFLOPs: 2864.0719. Time: 26325.0408 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #93: GFLOPs: 112.0250. Time: 673035.8070 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #94: GFLOPs: 383.0099. Time: 196853.4137 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #95: GFLOPs: 3963.3087. Time: 19023.7032 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #96: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((642, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(3, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 16, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(2996, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(128, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 2, 1, 4):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_0_j_0_fused * 214 + i_1_j_1_fused // 14 + i_3_init + i_4_init)
                            v_j = T.axis.spatial(14336, i_1_j_1_fused % 14 * 1024 + i_2_j_2_fused * 8 + j_3_init * 4 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(2):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                with T.block("A_shared"):
                                    v0 = T.axis.spatial(642, i_0_j_0_fused * 214 + (ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1))
                                    v1 = T.axis.spatial(4096, k_0)
                                    T.where(ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 < 214)
                                    T.reads(A[v0, v1])
                                    T.writes(A_shared[v0, v1])
                                    A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(14):
                            for ax0_ax1_fused_1 in T.thread_binding(128, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0)
                                        v1 = T.axis.spatial(14336, ax0_ax1_fused_0 * 1024 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 2, 1, 1, 4):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_0_j_0_fused * 214 + i_1_j_1_fused // 14 + i_3 + i_4)
                                v_j = T.axis.spatial(14336, i_1_j_1_fused % 14 * 1024 + i_2_j_2_fused * 8 + j_3 * 4 + j_4)
                                v_k = T.axis.reduce(4096, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(1, 8):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_0_j_0_fused * 214 + i_1_j_1_fused // 14 + ax0)
                            v1 = T.axis.spatial(14336, i_1_j_1_fused % 14 * 1024 + i_2_j_2_fused * 8 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[3, 214, 1, 1, 1])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[1, 14, 128, 2, 4])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=2)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=1)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60 = sch.split(loop=l58, factors=[None, 128], preserve_unit_iters=True, disable_predication=False)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l61, l62, l63, l64, l65 = sch.get_loops(block=b44)
l66, l67, l68 = sch.split(loop=l65, factors=[None, 128, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l68)
sch.bind(loop=l67, thread_axis="threadIdx.x")
b69 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b69, ann_key="meta_schedule.unroll_explicit")
b70, b71, b72, b73 = sch.get_child_blocks(b69)
l74, l75, l76, l77, l78, l79 = sch.get_loops(block=b70)
l80, l81, l82, l83, l84, l85, l86 = sch.get_loops(block=b71)
l87, l88, l89, l90, l91, l92, l93, l94, l95, l96 = sch.get_loops(block=b72)
sch.annotate(block_or_loop=l87, ann_key="pragma_auto_unroll_max_step", ann_val=16)
sch.annotate(block_or_loop=l87, ann_key="pragma_unroll_explicit", ann_val=1)
l97, l98, l99, l100, l101 = sch.get_loops(block=b73)
b102 = sch.get_block(name="C", func_name="main")
l103, l104, l105, l106, l107, l108, l109, l110, l111, l112 = sch.get_loops(block=b102)
b113 = sch.decompose_reduction(block=b102, loop=l106)
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #97: GFLOPs: 952.6619. Time: 79143.3003 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #98: GFLOPs: 7322.8232. Time: 10296.1395 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #99: GFLOPs: 908.5427. Time: 82986.5363 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #100: GFLOPs: 18360.4126. Time: 4106.4877 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #101: GFLOPs: 756.3247. Time: 99688.4153 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #102: GFLOPs: 3578.2359. Time: 21070.9442 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #103: GFLOPs: 282.8883. Time: 266525.0040 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #104: GFLOPs: 31.4070. Time: 2400640.2993 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #105: GFLOPs: 107.7415. Time: 699793.4570 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #106: GFLOPs: 29.5124. Time: 2554747.0700 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #107: GFLOPs: 2019.7470. Time: 37329.8287 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #108: GFLOPs: 4558.6673. Time: 16539.2216 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #109: GFLOPs: 503.3414. Time: 149792.5923 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #110: GFLOPs: 3175.2769. Time: 23744.9554 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #111: GFLOPs: 41576.6247. Time: 1813.4423 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #112: GFLOPs: 18722.7489. Time: 4027.0160 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #113: GFLOPs: 5639.4105. Time: 13369.6260 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #114: GFLOPs: 32713.1706. Time: 2304.7845 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #115: GFLOPs: 182.8781. Time: 412279.0527 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #116: GFLOPs: 36049.0194. Time: 2091.5079 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #117: GFLOPs: 67.4265. Time: 1118207.4380 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #118: GFLOPs: 15634.2295. Time: 4822.5471 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #119: GFLOPs: 13216.6192. Time: 5704.6971 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #120: GFLOPs: 34055.6105. Time: 2213.9321 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #121: GFLOPs: 1055.3736. Time: 71440.8720 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #122: GFLOPs: 96.6815. Time: 779847.1677 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #123: GFLOPs: 12383.6153. Time: 6088.4327 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #124: GFLOPs: 53.3008. Time: 1414552.5713 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #125: GFLOPs: 1263.0336. Time: 59695.0123 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:121] [Task #0: mm] Trial #126: Error in running:
LocalRunner: Timeout, killed after 30 seconds

# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(A: T.Buffer((642, 4096), "float16"), B: T.Buffer((4096, 14336), "float16"), C: T.Buffer((642, 14336), "float16")):
        T.func_attr({"global_symbol": "mm", "tir.noalias": T.bool(True)})
        # with T.block("root"):
        C_local = T.alloc_buffer((642, 14336), "float16", scope="local")
        A_shared = T.alloc_buffer((642, 4096), "float16", scope="shared")
        B_shared = T.alloc_buffer((4096, 14336), "float16", scope="shared")
        for i_0_j_0_fused in T.thread_binding(7, thread="blockIdx.x", annotations={"pragma_auto_unroll_max_step": 1024, "pragma_unroll_explicit": 1}):
            for i_1_j_1_fused in T.thread_binding(321, thread="vthread.x"):
                for i_2_j_2_fused in T.thread_binding(64, thread="threadIdx.x"):
                    for i_3_init, j_3_init, i_4_init, j_4_init in T.grid(1, 1, 2, 32):
                        with T.block("C_init"):
                            v_i = T.axis.spatial(642, i_1_j_1_fused * 2 + i_3_init * 2 + i_4_init)
                            v_j = T.axis.spatial(14336, i_0_j_0_fused * 2048 + i_2_j_2_fused * 32 + j_3_init * 32 + j_4_init)
                            T.reads()
                            T.writes(C_local[v_i, v_j])
                            T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                            C_local[v_i, v_j] = T.float16(0.0)
                    for k_0 in range(4096):
                        for ax0_ax1_fused_0 in range(6):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(2):
                                    with T.block("A_shared"):
                                        v0 = T.axis.spatial(642, ax0_ax1_fused_0 * 128 + ax0_ax1_fused_1 * 2 + ax0_ax1_fused_2)
                                        v1 = T.axis.spatial(4096, k_0)
                                        T.where((ax0_ax1_fused_0 * 64 + ax0_ax1_fused_1) * 2 + ax0_ax1_fused_2 < 642)
                                        T.reads(A[v0, v1])
                                        T.writes(A_shared[v0, v1])
                                        A_shared[v0, v1] = A[v0, v1]
                        for ax0_ax1_fused_0 in range(4):
                            for ax0_ax1_fused_1 in T.thread_binding(64, thread="threadIdx.x"):
                                for ax0_ax1_fused_2 in T.vectorized(8):
                                    with T.block("B_shared"):
                                        v0 = T.axis.spatial(4096, k_0)
                                        v1 = T.axis.spatial(14336, i_0_j_0_fused * 2048 + ax0_ax1_fused_0 * 512 + ax0_ax1_fused_1 * 8 + ax0_ax1_fused_2)
                                        T.reads(B[v0, v1])
                                        T.writes(B_shared[v0, v1])
                                        B_shared[v0, v1] = B[v0, v1]
                        for k_1, i_3, j_3, k_2, i_4, j_4 in T.grid(1, 1, 1, 1, 2, 32):
                            with T.block("C_update"):
                                v_i = T.axis.spatial(642, i_1_j_1_fused * 2 + i_3 * 2 + i_4)
                                v_j = T.axis.spatial(14336, i_0_j_0_fused * 2048 + i_2_j_2_fused * 32 + j_3 * 32 + j_4)
                                v_k = T.axis.reduce(4096, k_0 + k_1 + k_2)
                                T.reads(C_local[v_i, v_j], A_shared[v_i, v_k], B_shared[v_k, v_j])
                                T.writes(C_local[v_i, v_j])
                                T.block_attr({"meta_schedule.thread_extent_high_inclusive": 1024, "meta_schedule.thread_extent_low_inclusive": 64, "meta_schedule.tiling_structure": "SSSRRSRS"})
                                C_local[v_i, v_j] = C_local[v_i, v_j] + A_shared[v_i, v_k] * B_shared[v_k, v_j]
                    for ax0, ax1 in T.grid(2, 32):
                        with T.block("C_local"):
                            v0 = T.axis.spatial(642, i_1_j_1_fused * 2 + ax0)
                            v1 = T.axis.spatial(14336, i_0_j_0_fused * 2048 + i_2_j_2_fused * 32 + ax1)
                            T.reads(C_local[v0, v1])
                            T.writes(C[v0, v1])
                            C[v0, v1] = C_local[v0, v1]
b0 = sch.get_block(name="C", func_name="main")
b1 = sch.get_block(name="root", func_name="main")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.tiling_structure", ann_val="SSSRRSRS")
l2, l3, l4 = sch.get_loops(block=b0)
v5, v6, v7, v8, v9 = sch.sample_perfect_tile(loop=l2, n=5, max_innermost_factor=64, decision=[1, 321, 1, 1, 2])
l10, l11, l12, l13, l14 = sch.split(loop=l2, factors=[v5, v6, v7, v8, v9], preserve_unit_iters=True, disable_predication=False)
v15, v16, v17, v18, v19 = sch.sample_perfect_tile(loop=l3, n=5, max_innermost_factor=64, decision=[7, 1, 64, 1, 32])
l20, l21, l22, l23, l24 = sch.split(loop=l3, factors=[v15, v16, v17, v18, v19], preserve_unit_iters=True, disable_predication=False)
v25, v26, v27 = sch.sample_perfect_tile(loop=l4, n=3, max_innermost_factor=64, decision=[4096, 1, 1])
l28, l29, l30 = sch.split(loop=l4, factors=[v25, v26, v27], preserve_unit_iters=True, disable_predication=False)
sch.reorder(l10, l20, l11, l21, l12, l22, l28, l29, l13, l23, l30, l14, l24)
l31 = sch.fuse(l10, l20, preserve_unit_iters=True)
sch.bind(loop=l31, thread_axis="blockIdx.x")
l32 = sch.fuse(l11, l21, preserve_unit_iters=True)
sch.bind(loop=l32, thread_axis="vthread.x")
l33 = sch.fuse(l12, l22, preserve_unit_iters=True)
sch.bind(loop=l33, thread_axis="threadIdx.x")
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_low_inclusive", ann_val=64)
sch.annotate(block_or_loop=b0, ann_key="meta_schedule.thread_extent_high_inclusive", ann_val=1024)
b34 = sch.cache_write(block=b0, write_buffer_index=0, storage_scope="local")
sch.reverse_compute_at(block=b34, loop=l33, preserve_unit_loops=True, index=-1)
b35 = sch.cache_read(block=b0, read_buffer_index=0, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b35, loop=l28, preserve_unit_loops=True, index=-1)
l36, l37, l38, l39, l40, l41 = sch.get_loops(block=b35)
l42 = sch.fuse(l40, l41, preserve_unit_iters=True)
v43 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=1)
sch.annotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch", ann_val=v43)
b44 = sch.cache_read(block=b0, read_buffer_index=1, storage_scope="shared", consumer_blocks=[b0])
sch.compute_at(block=b44, loop=l28, preserve_unit_loops=True, index=-1)
l45, l46, l47, l48, l49, l50 = sch.get_loops(block=b44)
l51 = sch.fuse(l49, l50, preserve_unit_iters=True)
v52 = sch.sample_categorical(candidates=[1, 2, 4, 8], probs=[0.25, 0.25, 0.25, 0.25], decision=3)
sch.annotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch", ann_val=v52)
v53 = sch.sample_categorical(candidates=[0, 16, 64, 512, 1024], probs=[0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001, 0.20000000000000001], decision=4)
sch.annotate(block_or_loop=b1, ann_key="meta_schedule.unroll_explicit", ann_val=v53)
sch.enter_postproc()
sch.unannotate(block_or_loop=b35, ann_key="meta_schedule.cooperative_fetch")
l54, l55, l56, l57, l58 = sch.get_loops(block=b35)
l59, l60, l61 = sch.split(loop=l58, factors=[None, 64, 2], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l61)
sch.bind(loop=l60, thread_axis="threadIdx.x")
sch.unannotate(block_or_loop=b44, ann_key="meta_schedule.cooperative_fetch")
l62, l63, l64, l65, l66 = sch.get_loops(block=b44)
l67, l68, l69 = sch.split(loop=l66, factors=[None, 64, 8], preserve_unit_iters=True, disable_predication=False)
sch.vectorize(loop=l69)
sch.bind(loop=l68, thread_axis="threadIdx.x")
b70 = sch.get_block(name="root", func_name="main")
sch.unannotate(block_or_loop=b70, ann_key="meta_schedule.unroll_explicit")
b71, b72, b73, b74 = sch.get_child_blocks(b70)
l75, l76, l77, l78, l79, l80, l81 = sch.get_loops(block=b71)
l82, l83, l84, l85, l86, l87, l88 = sch.get_loops(block=b72)
l89, l90, l91, l92, l93, l94, l95, l96, l97, l98 = sch.get_loops(block=b73)
sch.annotate(block_or_loop=l89, ann_key="pragma_auto_unroll_max_step", ann_val=1024)
sch.annotate(block_or_loop=l89, ann_key="pragma_unroll_explicit", ann_val=1)
l99, l100, l101, l102, l103 = sch.get_loops(block=b74)
b104 = sch.get_block(name="C", func_name="main")
l105, l106, l107, l108, l109, l110, l111, l112, l113, l114 = sch.get_loops(block=b104)
b115 = sch.decompose_reduction(block=b104, loop=l108)
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #127: GFLOPs: 172.8122. Time: 436293.2533 us. Best GFLOPs: 41579.5512
2025-10-02 00:35:52 [INFO] [task_scheduler.cc:131] [Task #0: mm] Trial #128: GFLOPs: 14405.5659. Time: 5233.8665 us. Best GFLOPs: 41579.5512
